`timescale 1ns/1ps
`default_nettype none
// PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
// * This file was generated by Quokka FPGA Toolkit.
// * Generated code is your property, do whatever you want with it
// * Place custom code between [BEGIN USER ***] and [END USER ***].
// * CAUTION: All code outside of [USER] scope is subject to regeneration.
// * Bad things happen sometimes in developer's life,
//   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
// * Internal structure of code is subject to change.
//   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
// * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
// * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
//
// DISCLAIMER:
//   Code comes AS-IS, it is your responsibility to make sure it is working as expected
//   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
//
// System configuration name is CompositionModule_TopLevel, clock frequency is 1Hz, Top-level
// FSM summary
// -- Packages
module CompositionModule_TopLevel
(
	// [BEGIN USER PORTS]
	// [END USER PORTS]
	input wire Clock,
	input wire Reset,
	input wire IsEnabled,
	output wire [7:0] Data,
	output wire HasData
);
	// [BEGIN USER SIGNALS]
	// [END USER SIGNALS]
	localparam HiSignal = 1'b1;
	localparam LoSignal = 1'b0;
	wire Zero = 1'b0;
	wire One = 1'b1;
	wire true = 1'b1;
	wire false = 1'b0;
	wire CompositionModule_L41F27T31_Expr = 1'b1;
	wire Inputs_IsEnabled;
	wire Emitter_Ack;
	wire Emitter_IsEnabled;
	wire [7: 0] Emitter_Data;
	wire Emitter_HasData;
	wire Receiver_Ack;
	wire Receiver_Bit;
	wire Receiver_IsValid;
	wire [7: 0] Receiver_Data;
	wire Receiver_HasData;
	wire Transmitter_Ack;
	wire [7: 0] Transmitter_Data;
	wire Transmitter_Trigger;
	wire Transmitter_Bit;
	wire Transmitter_IsReady;
	wire Transmitter_IsTransmissionStarted;
	wire Transmitter_IsTransmitting;
	wire [1: 0] CompositionModule_L24F36L28T18_Object;
	wire [9: 0] CompositionModule_L30F40L35T17_Object;
	wire [2: 0] CompositionModule_L37F37L42T18_Object;
	wire Emitter_Ack_Emitter_Ack_HardLink;
	wire Emitter_IsEnabled_Emitter_IsEnabled_HardLink;
	wire [7: 0] Emitter_Data_Emitter_Data_HardLink;
	wire Emitter_HasData_Emitter_HasData_HardLink;
	wire Receiver_Ack_Receiver_Ack_HardLink;
	wire Receiver_Bit_Receiver_Bit_HardLink;
	wire Receiver_IsValid_Receiver_IsValid_HardLink;
	wire [7: 0] Receiver_Data_Receiver_Data_HardLink;
	wire Receiver_HasData_Receiver_HasData_HardLink;
	wire Transmitter_Ack_Transmitter_Ack_HardLink;
	wire [7: 0] Transmitter_Data_Transmitter_Data_HardLink;
	wire Transmitter_Trigger_Transmitter_Trigger_HardLink;
	wire Transmitter_Bit_Transmitter_Bit_HardLink;
	wire Transmitter_IsReady_Transmitter_IsReady_HardLink;
	wire Transmitter_IsTransmissionStarted_Transmitter_IsTransmissionStarted_HardLink;
	wire Transmitter_IsTransmitting_Transmitter_IsTransmitting_HardLink;
	wire BoardSignals_Clock;
	wire BoardSignals_Reset;
	wire BoardSignals_Running;
	wire BoardSignals_Starting;
	wire BoardSignals_Started;
	reg InternalReset = 1'b0;
	work_Quokka_BoardSignalsProc BoardSignalsConnection(BoardSignals_Clock, BoardSignals_Reset, BoardSignals_Running, BoardSignals_Starting, BoardSignals_Started, Clock, Reset, InternalReset);
	CompositionModule_TopLevel_Emitter
	CompositionModule_TopLevel_Emitter
	(
		// [BEGIN USER MAP FOR Emitter]
		// [END USER MAP FOR Emitter]
		.BoardSignals_Clock (BoardSignals_Clock),
		.BoardSignals_Reset (BoardSignals_Reset),
		.BoardSignals_Running (BoardSignals_Running),
		.BoardSignals_Starting (BoardSignals_Starting),
		.BoardSignals_Started (BoardSignals_Started),
		.Ack (Emitter_Ack_Emitter_Ack_HardLink),
		.IsEnabled (Emitter_IsEnabled_Emitter_IsEnabled_HardLink),
		.Data (Emitter_Data_Emitter_Data_HardLink),
		.HasData (Emitter_HasData_Emitter_HasData_HardLink)
	);
	CompositionModule_TopLevel_Receiver
	CompositionModule_TopLevel_Receiver
	(
		// [BEGIN USER MAP FOR Receiver]
		// [END USER MAP FOR Receiver]
		.BoardSignals_Clock (BoardSignals_Clock),
		.BoardSignals_Reset (BoardSignals_Reset),
		.BoardSignals_Running (BoardSignals_Running),
		.BoardSignals_Starting (BoardSignals_Starting),
		.BoardSignals_Started (BoardSignals_Started),
		.Ack (Receiver_Ack_Receiver_Ack_HardLink),
		.Bit (Receiver_Bit_Receiver_Bit_HardLink),
		.IsValid (Receiver_IsValid_Receiver_IsValid_HardLink),
		.Data (Receiver_Data_Receiver_Data_HardLink),
		.HasData (Receiver_HasData_Receiver_HasData_HardLink)
	);
	CompositionModule_TopLevel_Transmitter
	CompositionModule_TopLevel_Transmitter
	(
		// [BEGIN USER MAP FOR Transmitter]
		// [END USER MAP FOR Transmitter]
		.BoardSignals_Clock (BoardSignals_Clock),
		.BoardSignals_Reset (BoardSignals_Reset),
		.BoardSignals_Running (BoardSignals_Running),
		.BoardSignals_Starting (BoardSignals_Starting),
		.BoardSignals_Started (BoardSignals_Started),
		.Ack (Transmitter_Ack_Transmitter_Ack_HardLink),
		.Data (Transmitter_Data_Transmitter_Data_HardLink),
		.Trigger (Transmitter_Trigger_Transmitter_Trigger_HardLink),
		.Bit (Transmitter_Bit_Transmitter_Bit_HardLink),
		.IsReady (Transmitter_IsReady_Transmitter_IsReady_HardLink),
		.IsTransmissionStarted (Transmitter_IsTransmissionStarted_Transmitter_IsTransmissionStarted_HardLink),
		.IsTransmitting (Transmitter_IsTransmitting_Transmitter_IsTransmitting_HardLink)
	);
	assign Inputs_IsEnabled = IsEnabled;
	assign CompositionModule_L24F36L28T18_Object[0] = Transmitter_IsReady;
	assign CompositionModule_L24F36L28T18_Object[1] = Inputs_IsEnabled;
	assign Emitter_IsEnabled = CompositionModule_L24F36L28T18_Object[1];
	assign Emitter_Ack = CompositionModule_L24F36L28T18_Object[0];
	assign CompositionModule_L30F40L35T17_Object[0] = Receiver_HasData;
	assign CompositionModule_L30F40L35T17_Object[8:1] = Emitter_Data;
	assign CompositionModule_L30F40L35T17_Object[9] = Emitter_HasData;
	assign Transmitter_Trigger = CompositionModule_L30F40L35T17_Object[9];
	assign Transmitter_Data = CompositionModule_L30F40L35T17_Object[8:1];
	assign Transmitter_Ack = CompositionModule_L30F40L35T17_Object[0];
	assign CompositionModule_L37F37L42T18_Object[0] = CompositionModule_L41F27T31_Expr;
	assign CompositionModule_L37F37L42T18_Object[1] = Transmitter_Bit;
	assign CompositionModule_L37F37L42T18_Object[2] = Transmitter_IsTransmitting;
	assign Receiver_IsValid = CompositionModule_L37F37L42T18_Object[2];
	assign Receiver_Bit = CompositionModule_L37F37L42T18_Object[1];
	assign Receiver_Ack = CompositionModule_L37F37L42T18_Object[0];
	assign Data = Receiver_Data;
	assign HasData = Receiver_HasData;
	assign Emitter_Ack_Emitter_Ack_HardLink = Emitter_Ack;
	assign Emitter_IsEnabled_Emitter_IsEnabled_HardLink = Emitter_IsEnabled;
	assign Emitter_Data = Emitter_Data_Emitter_Data_HardLink;
	assign Emitter_HasData = Emitter_HasData_Emitter_HasData_HardLink;
	assign Receiver_Ack_Receiver_Ack_HardLink = Receiver_Ack;
	assign Receiver_Bit_Receiver_Bit_HardLink = Receiver_Bit;
	assign Receiver_IsValid_Receiver_IsValid_HardLink = Receiver_IsValid;
	assign Receiver_Data = Receiver_Data_Receiver_Data_HardLink;
	assign Receiver_HasData = Receiver_HasData_Receiver_HasData_HardLink;
	assign Transmitter_Ack_Transmitter_Ack_HardLink = Transmitter_Ack;
	assign Transmitter_Data_Transmitter_Data_HardLink = Transmitter_Data;
	assign Transmitter_Trigger_Transmitter_Trigger_HardLink = Transmitter_Trigger;
	assign Transmitter_Bit = Transmitter_Bit_Transmitter_Bit_HardLink;
	assign Transmitter_IsReady = Transmitter_IsReady_Transmitter_IsReady_HardLink;
	assign Transmitter_IsTransmissionStarted = Transmitter_IsTransmissionStarted_Transmitter_IsTransmissionStarted_HardLink;
	assign Transmitter_IsTransmitting = Transmitter_IsTransmitting_Transmitter_IsTransmitting_HardLink;
	// [BEGIN USER ARCHITECTURE]
	// [END USER ARCHITECTURE]
endmodule
