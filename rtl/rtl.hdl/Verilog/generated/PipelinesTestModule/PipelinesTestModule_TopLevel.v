`default_nettype none
// PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
// * This file was generated by Quokka FPGA Toolkit.
// * Generated code is your property, do whatever you want with it
// * Place custom code between [BEGIN USER ***] and [END USER ***].
// * CAUTION: All code outside of [USER] scope is subject to regeneration.
// * Bad things happen sometimes in developer's life,
//   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
// * Internal structure of code is subject to change.
//   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
// * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
// * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
// 
// DISCLAIMER:
//   Code comes AS-IS, it is your responsibility to make sure it is working as expected
//   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
// 
// System configuration name is PipelinesTestModule_TopLevel, clock frequency is 1Hz, Top-level
// FSM summary
// -- Packages
module PipelinesTestModule_TopLevel (
// [BEGIN USER PORTS]
// [END USER PORTS]

	input wire  Clock,
	input wire  Reset,
	input wire  inReady,
	input wire  [7: 0] inData0,
	input wire  [7: 0] inData1,
	input wire  [7: 0] inData2,
	input wire  [7: 0] inData3,
	input wire  [7: 0] inData4,
	input wire  [7: 0] inData5,
	input wire  [7: 0] inData6,
	input wire  [7: 0] inData7,
	output wire outReady,
	output wire [15: 0] outSum
    );

// [BEGIN USER SIGNALS]
// [END USER SIGNALS]
localparam HiSignal = 1'b1;
localparam LoSignal = 1'b0;
wire  Zero = 1'b0;
wire  One = 1'b1;
wire  true = 1'b1;
wire  false = 1'b0;
wire  PipelinesTestModule_L38F77T78_Expr = 1'b0;
wire  Inputs_inReady;
wire  [7:0] Inputs_inData0;
wire  [7:0] Inputs_inData1;
wire  [7:0] Inputs_inData2;
wire  [7:0] Inputs_inData3;
wire  [7:0] Inputs_inData4;
wire  [7:0] Inputs_inData5;
wire  [7:0] Inputs_inData6;
wire  [7:0] Inputs_inData7;
reg  Pipeline_NextState_ready;
reg  [15:0] Pipeline_NextState_sum;
wire  Pipeline_Inputs_inReady;
wire  [7:0] Pipeline_Inputs_inData0;
wire  [7:0] Pipeline_Inputs_inData1;
wire  [7:0] Pipeline_Inputs_inData2;
wire  [7:0] Pipeline_Inputs_inData3;
wire  [7:0] Pipeline_Inputs_inData4;
wire  [7:0] Pipeline_Inputs_inData5;
wire  [7:0] Pipeline_Inputs_inData6;
wire  [7:0] Pipeline_Inputs_inData7;
reg  Pipeline_State_ready = 1'b0;
wire  Pipeline_State_readyDefault = 1'b0;
reg  [15:0] Pipeline_State_sum = 16'b0000000000000000;
wire  [15:0] Pipeline_State_sumDefault = 16'b0000000000000000;
always @(posedge Clock)
begin
if ( Reset == 1 ) begin
Pipeline_State_ready <= Pipeline_State_readyDefault;
Pipeline_State_sum <= Pipeline_State_sumDefault;
end
else begin
Pipeline_State_ready <= Pipeline_NextState_ready;
Pipeline_State_sum <= Pipeline_NextState_sum;
end
end
always @*
begin
Pipeline_NextState_ready = Pipeline_State_ready;
Pipeline_NextState_sum = Pipeline_State_sum;
Pipeline_NextState_ready = Pipeline_Inputs_inReady;
Pipeline_NextState_sum = { {15{1'b0}}, PipelinesTestModule_L38F77T78_Expr }/*expand*/;

end
assign Inputs_inReady = inReady;
assign Inputs_inData0 = inData0;
assign Inputs_inData1 = inData1;
assign Inputs_inData2 = inData2;
assign Inputs_inData3 = inData3;
assign Inputs_inData4 = inData4;
assign Inputs_inData5 = inData5;
assign Inputs_inData6 = inData6;
assign Inputs_inData7 = inData7;
assign outReady = Pipeline_State_ready;
assign outSum = Pipeline_State_sum;
assign Pipeline_Inputs_inReady = Inputs_inReady;
assign Pipeline_Inputs_inData0 = Inputs_inData0;
assign Pipeline_Inputs_inData1 = Inputs_inData1;
assign Pipeline_Inputs_inData2 = Inputs_inData2;
assign Pipeline_Inputs_inData3 = Inputs_inData3;
assign Pipeline_Inputs_inData4 = Inputs_inData4;
assign Pipeline_Inputs_inData5 = Inputs_inData5;
assign Pipeline_Inputs_inData6 = Inputs_inData6;
assign Pipeline_Inputs_inData7 = Inputs_inData7;
// [BEGIN USER ARCHITECTURE]
// [END USER ARCHITECTURE]
endmodule
