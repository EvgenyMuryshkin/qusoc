`timescale 1ns/1ps
`default_nettype none
// PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
// * This file was generated by Quokka FPGA Toolkit.
// * Generated code is your property, do whatever you want with it
// * Place custom code between [BEGIN USER ***] and [END USER ***].
// * CAUTION: All code outside of [USER] scope is subject to regeneration.
// * Bad things happen sometimes in developer's life,
//   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
// * Internal structure of code is subject to change.
//   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
// * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
// * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
//
// DISCLAIMER:
//   Code comes AS-IS, it is your responsibility to make sure it is working as expected
//   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
//
// System configuration name is AXI4MemoryModuleB4_TopLevel, clock frequency is 1Hz, Top-level
// FSM summary
// -- Packages
module AXI4MemoryModuleB4_TopLevel
(
	// [BEGIN USER PORTS]
	// [END USER PORTS]
	input wire Clock,
	input wire Reset,
	input wire [7:0] M2S_AR_ARID,
	input wire [31:0] M2S_AR_ARADDR,
	input wire [7:0] M2S_AR_ARLEN,
	input wire [2:0] M2S_AR_ARSIZE,
	input wire [1:0] M2S_AR_ARBURST,
	input wire [1:0] M2S_AR_ARLOCK,
	input wire [3:0] M2S_AR_ARCACHE,
	input wire [2:0] M2S_AR_ARPROT,
	input wire [3:0] M2S_AR_ARQOS,
	input wire [7:0] M2S_AR_ARREGION,
	input wire [7:0] M2S_AR_ARUSER,
	input wire M2S_AR_ARVALID,
	input wire M2S_R_RREADY,
	input wire [7:0] M2S_AW_AWID,
	input wire [31:0] M2S_AW_AWADDR,
	input wire [7:0] M2S_AW_AWLEN,
	input wire [2:0] M2S_AW_AWSIZE,
	input wire [1:0] M2S_AW_AWBURST,
	input wire [1:0] M2S_AW_AWLOCK,
	input wire [3:0] M2S_AW_AWCACHE,
	input wire [2:0] M2S_AW_AWPROT,
	input wire [3:0] M2S_AW_AWQOS,
	input wire [7:0] M2S_AW_AWREGION,
	input wire [7:0] M2S_AW_AWUSER,
	input wire M2S_AW_AWVALID,
	input wire [7:0] M2S_W_WID,
	input wire [7:0] M2S_W_WDATA0,
	input wire [7:0] M2S_W_WDATA1,
	input wire [7:0] M2S_W_WDATA2,
	input wire [7:0] M2S_W_WDATA3,
	input wire [3:0] M2S_W_WSTRB,
	input wire M2S_W_WLAST,
	input wire [7:0] M2S_W_WUSER,
	input wire M2S_W_WVALID,
	input wire M2S_B_BREADY,
	output wire S2M_AR_ARREADY,
	output wire S2M_AW_AWREADY,
	output wire [7:0] S2M_B_BID,
	output wire [1:0] S2M_B_BRESP,
	output wire [7:0] S2M_B_BUSER,
	output wire S2M_B_BVALID,
	output wire [7:0] S2M_R_RID,
	output wire [7:0] S2M_R_RDATA0,
	output wire [7:0] S2M_R_RDATA1,
	output wire [7:0] S2M_R_RDATA2,
	output wire [7:0] S2M_R_RDATA3,
	output wire [1:0] S2M_R_RRESP,
	output wire S2M_R_RLAST,
	output wire [7:0] S2M_R_RUSER,
	output wire S2M_R_RVALID,
	output wire S2M_W_WREADY
);
	// [BEGIN USER SIGNALS]
	// [END USER SIGNALS]
	localparam HiSignal = 1'b1;
	localparam LoSignal = 1'b0;
	wire Zero = 1'b0;
	wire One = 1'b1;
	wire true = 1'b1;
	wire false = 1'b0;
	wire [1: 0] size = 2'b10;
	wire AXI4MemoryModule_L95F29T33_Expr = 1'b1;
	wire AXI4MemoryModule_L96F28T32_Expr = 1'b1;
	wire AXI4MemoryModule_L97F29T33_Expr = 1'b1;
	wire AXI4MemoryModule_L98F28T32_Expr = 1'b1;
	wire AXI4MemoryModule_L99F28T32_Expr = 1'b1;
	wire AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L106F13L109T14_AXI4MemoryModule_L108F38T42_Expr = 1'b1;
	wire AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L112F13L116T14_AXI4MemoryModule_L115F38T42_Expr = 1'b1;
	wire AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L119F13L122T14_AXI4MemoryModule_L120F38T43_Expr = 1'b0;
	wire AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L119F13L122T14_AXI4MemoryModule_L121F38T43_Expr = 1'b0;
	wire AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_0_w = 1'b0;
	wire AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_1_w = 1'b1;
	wire [1: 0] AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_2_w = 2'b10;
	wire [1: 0] AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_3_w = 2'b11;
	wire [7: 0] Inputs_M2S_AR_ARID;
	wire [31: 0] Inputs_M2S_AR_ARADDR;
	wire [7: 0] Inputs_M2S_AR_ARLEN;
	wire [2: 0] Inputs_M2S_AR_ARSIZE;
	wire [1: 0] Inputs_M2S_AR_ARBURST;
	wire [1: 0] Inputs_M2S_AR_ARLOCK;
	wire [3: 0] Inputs_M2S_AR_ARCACHE;
	wire [2: 0] Inputs_M2S_AR_ARPROT;
	wire [3: 0] Inputs_M2S_AR_ARQOS;
	wire [7: 0] Inputs_M2S_AR_ARREGION;
	wire [7: 0] Inputs_M2S_AR_ARUSER;
	wire Inputs_M2S_AR_ARVALID;
	wire Inputs_M2S_R_RREADY;
	wire [7: 0] Inputs_M2S_AW_AWID;
	wire [31: 0] Inputs_M2S_AW_AWADDR;
	wire [7: 0] Inputs_M2S_AW_AWLEN;
	wire [2: 0] Inputs_M2S_AW_AWSIZE;
	wire [1: 0] Inputs_M2S_AW_AWBURST;
	wire [1: 0] Inputs_M2S_AW_AWLOCK;
	wire [3: 0] Inputs_M2S_AW_AWCACHE;
	wire [2: 0] Inputs_M2S_AW_AWPROT;
	wire [3: 0] Inputs_M2S_AW_AWQOS;
	wire [7: 0] Inputs_M2S_AW_AWREGION;
	wire [7: 0] Inputs_M2S_AW_AWUSER;
	wire Inputs_M2S_AW_AWVALID;
	wire [7: 0] Inputs_M2S_W_WID;
	wire [3: 0] Inputs_M2S_W_WSTRB;
	wire Inputs_M2S_W_WLAST;
	wire [7: 0] Inputs_M2S_W_WUSER;
	wire Inputs_M2S_W_WVALID;
	wire Inputs_M2S_B_BREADY;
	reg [31: 0] NextState_raddr;
	reg NextState_waddrSet;
	reg NextState_wdataSet;
	reg [31: 0] NextState_waddr;
	reg [3: 0] NextState_wstrb;
	wire internalSameTxWrite;
	wire internalDelayedTxWrite;
	wire internalWE;
	wire [3: 0] internalWSTRB;
	wire [31: 0] internalWADDR;
	wire [31: 0] internalRADDR;
	wire [7: 0] axiSlave_M2S_AR_ARID;
	wire [31: 0] axiSlave_M2S_AR_ARADDR;
	wire [7: 0] axiSlave_M2S_AR_ARLEN;
	wire [2: 0] axiSlave_M2S_AR_ARSIZE;
	wire [1: 0] axiSlave_M2S_AR_ARBURST;
	wire [1: 0] axiSlave_M2S_AR_ARLOCK;
	wire [3: 0] axiSlave_M2S_AR_ARCACHE;
	wire [2: 0] axiSlave_M2S_AR_ARPROT;
	wire [3: 0] axiSlave_M2S_AR_ARQOS;
	wire [7: 0] axiSlave_M2S_AR_ARREGION;
	wire [7: 0] axiSlave_M2S_AR_ARUSER;
	wire axiSlave_M2S_AR_ARVALID;
	wire axiSlave_M2S_R_RREADY;
	wire [7: 0] axiSlave_M2S_AW_AWID;
	wire [31: 0] axiSlave_M2S_AW_AWADDR;
	wire [7: 0] axiSlave_M2S_AW_AWLEN;
	wire [2: 0] axiSlave_M2S_AW_AWSIZE;
	wire [1: 0] axiSlave_M2S_AW_AWBURST;
	wire [1: 0] axiSlave_M2S_AW_AWLOCK;
	wire [3: 0] axiSlave_M2S_AW_AWCACHE;
	wire [2: 0] axiSlave_M2S_AW_AWPROT;
	wire [3: 0] axiSlave_M2S_AW_AWQOS;
	wire [7: 0] axiSlave_M2S_AW_AWREGION;
	wire [7: 0] axiSlave_M2S_AW_AWUSER;
	wire axiSlave_M2S_AW_AWVALID;
	wire [7: 0] axiSlave_M2S_W_WID;
	wire [3: 0] axiSlave_M2S_W_WSTRB;
	wire axiSlave_M2S_W_WLAST;
	wire [7: 0] axiSlave_M2S_W_WUSER;
	wire axiSlave_M2S_W_WVALID;
	wire axiSlave_M2S_B_BREADY;
	wire axiSlave_inARREADY;
	wire axiSlave_inRVALID;
	wire axiSlave_inAWREADY;
	wire axiSlave_inWREADY;
	wire axiSlave_inBVALID;
	wire axiSlave_S2M_AR_ARREADY;
	wire axiSlave_S2M_AW_AWREADY;
	wire [7: 0] axiSlave_S2M_B_BID;
	wire [1: 0] axiSlave_S2M_B_BRESP;
	wire [7: 0] axiSlave_S2M_B_BUSER;
	wire axiSlave_S2M_B_BVALID;
	wire [7: 0] axiSlave_S2M_R_RID;
	wire [1: 0] axiSlave_S2M_R_RRESP;
	wire axiSlave_S2M_R_RLAST;
	wire [7: 0] axiSlave_S2M_R_RUSER;
	wire axiSlave_S2M_R_RVALID;
	wire axiSlave_S2M_W_WREADY;
	wire axiSlave_outReadTXCompleting;
	wire axiSlave_outWriteTXCompleting;
	wire axiSlave_outARREADYConfirming;
	wire axiSlave_outARVALID;
	wire [31: 0] axiSlave_outARADDR;
	wire axiSlave_outAWREADYConfirming;
	wire axiSlave_outAWVALID;
	wire [31: 0] axiSlave_outAWADDR;
	wire axiSlave_outWREADYConfirming;
	wire axiSlave_outWVALID;
	wire [3: 0] axiSlave_outWSTRB;
	wire AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_0_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F35T51_Index;
	wire AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_1_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F35T51_Index;
	wire AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_2_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F35T51_Index;
	wire AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_3_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F35T51_Index;
	reg [7: 0] State_wdataDefault = 8'b00000000;
	wire [7: 0] axiSlaveM2S_AR_ARIDaxiSlave_M2S_AR_ARIDHardLink;
	wire [31: 0] axiSlaveM2S_AR_ARADDRaxiSlave_M2S_AR_ARADDRHardLink;
	wire [7: 0] axiSlaveM2S_AR_ARLENaxiSlave_M2S_AR_ARLENHardLink;
	wire [2: 0] axiSlaveM2S_AR_ARSIZEaxiSlave_M2S_AR_ARSIZEHardLink;
	wire [1: 0] axiSlaveM2S_AR_ARBURSTaxiSlave_M2S_AR_ARBURSTHardLink;
	wire [1: 0] axiSlaveM2S_AR_ARLOCKaxiSlave_M2S_AR_ARLOCKHardLink;
	wire [3: 0] axiSlaveM2S_AR_ARCACHEaxiSlave_M2S_AR_ARCACHEHardLink;
	wire [2: 0] axiSlaveM2S_AR_ARPROTaxiSlave_M2S_AR_ARPROTHardLink;
	wire [3: 0] axiSlaveM2S_AR_ARQOSaxiSlave_M2S_AR_ARQOSHardLink;
	wire [7: 0] axiSlaveM2S_AR_ARREGIONaxiSlave_M2S_AR_ARREGIONHardLink;
	wire [7: 0] axiSlaveM2S_AR_ARUSERaxiSlave_M2S_AR_ARUSERHardLink;
	wire axiSlaveM2S_AR_ARVALIDaxiSlave_M2S_AR_ARVALIDHardLink;
	wire axiSlaveM2S_R_RREADYaxiSlave_M2S_R_RREADYHardLink;
	wire [7: 0] axiSlaveM2S_AW_AWIDaxiSlave_M2S_AW_AWIDHardLink;
	wire [31: 0] axiSlaveM2S_AW_AWADDRaxiSlave_M2S_AW_AWADDRHardLink;
	wire [7: 0] axiSlaveM2S_AW_AWLENaxiSlave_M2S_AW_AWLENHardLink;
	wire [2: 0] axiSlaveM2S_AW_AWSIZEaxiSlave_M2S_AW_AWSIZEHardLink;
	wire [1: 0] axiSlaveM2S_AW_AWBURSTaxiSlave_M2S_AW_AWBURSTHardLink;
	wire [1: 0] axiSlaveM2S_AW_AWLOCKaxiSlave_M2S_AW_AWLOCKHardLink;
	wire [3: 0] axiSlaveM2S_AW_AWCACHEaxiSlave_M2S_AW_AWCACHEHardLink;
	wire [2: 0] axiSlaveM2S_AW_AWPROTaxiSlave_M2S_AW_AWPROTHardLink;
	wire [3: 0] axiSlaveM2S_AW_AWQOSaxiSlave_M2S_AW_AWQOSHardLink;
	wire [7: 0] axiSlaveM2S_AW_AWREGIONaxiSlave_M2S_AW_AWREGIONHardLink;
	wire [7: 0] axiSlaveM2S_AW_AWUSERaxiSlave_M2S_AW_AWUSERHardLink;
	wire axiSlaveM2S_AW_AWVALIDaxiSlave_M2S_AW_AWVALIDHardLink;
	wire [7: 0] axiSlaveM2S_W_WIDaxiSlave_M2S_W_WIDHardLink;
	wire [7: 0] axiSlaveM2S_W_WDATA0axiSlave_M2S_W_WDATAHardLink;
	wire [7: 0] axiSlaveM2S_W_WDATA1axiSlave_M2S_W_WDATAHardLink;
	wire [7: 0] axiSlaveM2S_W_WDATA2axiSlave_M2S_W_WDATAHardLink;
	wire [7: 0] axiSlaveM2S_W_WDATA3axiSlave_M2S_W_WDATAHardLink;
	wire [3: 0] axiSlaveM2S_W_WSTRBaxiSlave_M2S_W_WSTRBHardLink;
	wire axiSlaveM2S_W_WLASTaxiSlave_M2S_W_WLASTHardLink;
	wire [7: 0] axiSlaveM2S_W_WUSERaxiSlave_M2S_W_WUSERHardLink;
	wire axiSlaveM2S_W_WVALIDaxiSlave_M2S_W_WVALIDHardLink;
	wire axiSlaveM2S_B_BREADYaxiSlave_M2S_B_BREADYHardLink;
	wire [7: 0] axiSlaveinRDATA0axiSlave_inRDATAHardLink;
	wire [7: 0] axiSlaveinRDATA1axiSlave_inRDATAHardLink;
	wire [7: 0] axiSlaveinRDATA2axiSlave_inRDATAHardLink;
	wire [7: 0] axiSlaveinRDATA3axiSlave_inRDATAHardLink;
	wire axiSlaveinARREADYaxiSlave_inARREADYHardLink;
	wire axiSlaveinRVALIDaxiSlave_inRVALIDHardLink;
	wire axiSlaveinAWREADYaxiSlave_inAWREADYHardLink;
	wire axiSlaveinWREADYaxiSlave_inWREADYHardLink;
	wire axiSlaveinBVALIDaxiSlave_inBVALIDHardLink;
	wire axiSlaveS2M_AR_ARREADYaxiSlave_S2M_AR_ARREADYHardLink;
	wire axiSlaveS2M_AW_AWREADYaxiSlave_S2M_AW_AWREADYHardLink;
	wire [7: 0] axiSlaveS2M_B_BIDaxiSlave_S2M_B_BIDHardLink;
	wire [1: 0] axiSlaveS2M_B_BRESPaxiSlave_S2M_B_BRESPHardLink;
	wire [7: 0] axiSlaveS2M_B_BUSERaxiSlave_S2M_B_BUSERHardLink;
	wire axiSlaveS2M_B_BVALIDaxiSlave_S2M_B_BVALIDHardLink;
	wire [7: 0] axiSlaveS2M_R_RIDaxiSlave_S2M_R_RIDHardLink;
	wire [7: 0] axiSlaveS2M_R_RDATA0axiSlave_S2M_R_RDATAHardLink;
	wire [7: 0] axiSlaveS2M_R_RDATA1axiSlave_S2M_R_RDATAHardLink;
	wire [7: 0] axiSlaveS2M_R_RDATA2axiSlave_S2M_R_RDATAHardLink;
	wire [7: 0] axiSlaveS2M_R_RDATA3axiSlave_S2M_R_RDATAHardLink;
	wire [1: 0] axiSlaveS2M_R_RRESPaxiSlave_S2M_R_RRESPHardLink;
	wire axiSlaveS2M_R_RLASTaxiSlave_S2M_R_RLASTHardLink;
	wire [7: 0] axiSlaveS2M_R_RUSERaxiSlave_S2M_R_RUSERHardLink;
	wire axiSlaveS2M_R_RVALIDaxiSlave_S2M_R_RVALIDHardLink;
	wire axiSlaveS2M_W_WREADYaxiSlave_S2M_W_WREADYHardLink;
	wire axiSlaveoutReadTXCompletingaxiSlave_outReadTXCompletingHardLink;
	wire axiSlaveoutWriteTXCompletingaxiSlave_outWriteTXCompletingHardLink;
	wire axiSlaveoutARREADYConfirmingaxiSlave_outARREADYConfirmingHardLink;
	wire axiSlaveoutARVALIDaxiSlave_outARVALIDHardLink;
	wire [31: 0] axiSlaveoutARADDRaxiSlave_outARADDRHardLink;
	wire axiSlaveoutAWREADYConfirmingaxiSlave_outAWREADYConfirmingHardLink;
	wire axiSlaveoutAWVALIDaxiSlave_outAWVALIDHardLink;
	wire [31: 0] axiSlaveoutAWADDRaxiSlave_outAWADDRHardLink;
	wire axiSlaveoutWREADYConfirmingaxiSlave_outWREADYConfirmingHardLink;
	wire axiSlaveoutWVALIDaxiSlave_outWVALIDHardLink;
	wire [7: 0] axiSlaveoutWDATA0axiSlave_outWDATAHardLink;
	wire [7: 0] axiSlaveoutWDATA1axiSlave_outWDATAHardLink;
	wire [7: 0] axiSlaveoutWDATA2axiSlave_outWDATAHardLink;
	wire [7: 0] axiSlaveoutWDATA3axiSlave_outWDATAHardLink;
	wire [3: 0] axiSlaveoutWSTRBaxiSlave_outWSTRBHardLink;
	reg [31: 0] State_raddr = 32'b00000000000000000000000000000000;
	wire [31: 0] State_raddrDefault = 32'b00000000000000000000000000000000;
	reg State_waddrSet = 1'b0;
	wire State_waddrSetDefault = 1'b0;
	reg State_wdataSet = 1'b0;
	wire State_wdataSetDefault = 1'b0;
	reg [31: 0] State_waddr = 32'b00000000000000000000000000000000;
	wire [31: 0] State_waddrDefault = 32'b00000000000000000000000000000000;
	reg [3: 0] State_wstrb = 4'b0000;
	wire [3: 0] State_wstrbDefault = 4'b0000;
	wire AXI4MemoryModule_L64F37T81_Expr;
	wire AXI4MemoryModule_L64F37T81_Expr_1;
	wire AXI4MemoryModule_L64F37T81_Expr_2;
	wire AXI4MemoryModule_L65F40T72_Expr;
	wire AXI4MemoryModule_L65F40T72_Expr_1;
	wire AXI4MemoryModule_L65F40T72_Expr_2;
	wire AXI4MemoryModule_L66F28T73_Expr;
	wire AXI4MemoryModule_L66F28T73_Expr_1;
	wire AXI4MemoryModule_L66F28T73_Expr_2;
	wire AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_0_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr;
	wire AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_0_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr_1;
	wire AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_0_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr_2;
	wire AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_1_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr;
	wire AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_1_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr_1;
	wire AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_1_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr_2;
	wire AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_2_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr;
	wire AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_2_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr_1;
	wire AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_2_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr_2;
	wire AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_3_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr;
	wire AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_3_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr_1;
	wire AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_3_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr_2;
	reg [3: 0] AXI4MemoryModule_L69F13L71T26_Lookup;
	reg [31: 0] AXI4MemoryModule_L74F13L76T26_Lookup;
	reg [31: 0] AXI4MemoryModule_L79F13L81T26_Lookup;
	reg [31: 0] AXI4MemoryModule_L84F13L86T26_Lookup;
	wire AXI4MemoryModule_L69F13L71T26_LookupMultiplexerAddress;
	wire [3: 0] AXI4MemoryModule_L69F13L71T26_Lookup1;
	wire [3: 0] AXI4MemoryModule_L69F13L71T26_Lookup2;
	wire AXI4MemoryModule_L74F13L76T26_LookupMultiplexerAddress;
	wire [31: 0] AXI4MemoryModule_L74F13L76T26_Lookup1;
	wire [31: 0] AXI4MemoryModule_L74F13L76T26_Lookup2;
	wire AXI4MemoryModule_L79F13L81T26_LookupMultiplexerAddress;
	wire [31: 0] AXI4MemoryModule_L79F13L81T26_Lookup1;
	wire [31: 0] AXI4MemoryModule_L79F13L81T26_Lookup2;
	wire AXI4MemoryModule_L84F13L86T26_LookupMultiplexerAddress;
	wire [31: 0] AXI4MemoryModule_L84F13L86T26_Lookup1;
	wire [31: 0] AXI4MemoryModule_L84F13L86T26_Lookup2;
	wire [7 : 0] Inputs_M2S_W_WDATA [0 : 3];
	wire [7 : 0] State_rdata [0 : 3];
	integer State_wdata_Iterator;
	reg [7 : 0] State_wdata [0 : 3];
	initial
	begin : Init_State_wdata
		for (State_wdata_Iterator = 0; State_wdata_Iterator < 4; State_wdata_Iterator = State_wdata_Iterator + 1)
			State_wdata[State_wdata_Iterator] = 0;
	end
	integer NextState_wdata_Iterator;
	reg [7 : 0] NextState_wdata [0 : 3];
	initial
	begin : Init_NextState_wdata
		for (NextState_wdata_Iterator = 0; NextState_wdata_Iterator < 4; NextState_wdata_Iterator = NextState_wdata_Iterator + 1)
			NextState_wdata[NextState_wdata_Iterator] = 0;
	end
	wire [7 : 0] internalWDATA [0 : 3];
	wire [7 : 0] axiSlave_M2S_W_WDATA [0 : 3];
	wire [7 : 0] axiSlave_inRDATA [0 : 3];
	wire [7 : 0] axiSlave_S2M_R_RDATA [0 : 3];
	wire [7 : 0] axiSlave_outWDATA [0 : 3];
	reg [7 : 0] State_buff0 [0 : 1023];
	integer State_buff0_i;
	initial
	begin : Init_State_buff0
		for (State_buff0_i = 0; State_buff0_i < 1024; State_buff0_i = State_buff0_i + 1)
			State_buff0[State_buff0_i] = 0;
	end
	reg [7 : 0] State_buff1 [0 : 1023];
	integer State_buff1_i;
	initial
	begin : Init_State_buff1
		for (State_buff1_i = 0; State_buff1_i < 1024; State_buff1_i = State_buff1_i + 1)
			State_buff1[State_buff1_i] = 0;
	end
	reg [7 : 0] State_buff2 [0 : 1023];
	integer State_buff2_i;
	initial
	begin : Init_State_buff2
		for (State_buff2_i = 0; State_buff2_i < 1024; State_buff2_i = State_buff2_i + 1)
			State_buff2[State_buff2_i] = 0;
	end
	reg [7 : 0] State_buff3 [0 : 1023];
	integer State_buff3_i;
	initial
	begin : Init_State_buff3
		for (State_buff3_i = 0; State_buff3_i < 1024; State_buff3_i = State_buff3_i + 1)
			State_buff3[State_buff3_i] = 0;
	end
	wire BoardSignals_Clock;
	wire BoardSignals_Reset;
	wire BoardSignals_Running;
	wire BoardSignals_Starting;
	wire BoardSignals_Started;
	reg InternalReset = 1'b0;
	// inferred simple dual port RAM with write-first behaviour
	reg [9: 0] internalRADDR_reg0;
	always @ (posedge Clock)
	begin
		if (AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_0_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr)
		begin
			State_buff0[internalWADDR] <= internalWDATA[0];
		end
		internalRADDR_reg0 <= internalRADDR[9:0];
	end
	assign State_rdata[0] = State_buff0[internalRADDR_reg0];
	// inferred simple dual port RAM with write-first behaviour
	reg [9: 0] internalRADDR_reg1;
	always @ (posedge Clock)
	begin
		if (AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_1_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr)
		begin
			State_buff1[internalWADDR] <= internalWDATA[1];
		end
		internalRADDR_reg1 <= internalRADDR[9:0];
	end
	assign State_rdata[1] = State_buff1[internalRADDR_reg1];
	// inferred simple dual port RAM with write-first behaviour
	reg [9: 0] internalRADDR_reg2;
	always @ (posedge Clock)
	begin
		if (AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_2_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr)
		begin
			State_buff2[internalWADDR] <= internalWDATA[2];
		end
		internalRADDR_reg2 <= internalRADDR[9:0];
	end
	assign State_rdata[2] = State_buff2[internalRADDR_reg2];
	// inferred simple dual port RAM with write-first behaviour
	reg [9: 0] internalRADDR_reg3;
	always @ (posedge Clock)
	begin
		if (AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_3_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr)
		begin
			State_buff3[internalWADDR] <= internalWDATA[3];
		end
		internalRADDR_reg3 <= internalRADDR[9:0];
	end
	assign State_rdata[3] = State_buff3[internalRADDR_reg3];
	work_Quokka_BoardSignalsProc BoardSignalsConnection(BoardSignals_Clock, BoardSignals_Reset, BoardSignals_Running, BoardSignals_Starting, BoardSignals_Started, Clock, Reset, InternalReset);
	always @ (posedge Clock)
	begin
		if ((Reset == 1))
		begin
			State_raddr <= State_raddrDefault;
			State_waddrSet <= State_waddrSetDefault;
			State_wdataSet <= State_wdataSetDefault;
			State_waddr <= State_waddrDefault;
			State_wstrb <= State_wstrbDefault;
		end
		else
		begin
			State_raddr <= NextState_raddr;
			State_waddrSet <= NextState_waddrSet;
			State_wdataSet <= NextState_wdataSet;
			State_waddr <= NextState_waddr;
			State_wstrb <= NextState_wstrb;
		end
	end
	always @ (posedge Clock)
	begin
		if ((Reset == 1))
		begin
			for (State_wdata_Iterator = 0; (State_wdata_Iterator < 4); State_wdata_Iterator = (State_wdata_Iterator + 1))
			begin
				State_wdata[State_wdata_Iterator] <= State_wdataDefault;
			end
		end
		else
		begin
			for (State_wdata_Iterator = 0; (State_wdata_Iterator < 4); State_wdata_Iterator = (State_wdata_Iterator + 1))
			begin
				State_wdata[State_wdata_Iterator] <= NextState_wdata[State_wdata_Iterator];
			end
		end
	end
	assign AXI4MemoryModule_L64F37T81_Expr = AXI4MemoryModule_L64F37T81_Expr_1 & AXI4MemoryModule_L64F37T81_Expr_2;
	assign AXI4MemoryModule_L65F40T72_Expr = AXI4MemoryModule_L65F40T72_Expr_1 & AXI4MemoryModule_L65F40T72_Expr_2;
	assign AXI4MemoryModule_L66F28T73_Expr = AXI4MemoryModule_L66F28T73_Expr_1 | AXI4MemoryModule_L66F28T73_Expr_2;
	assign AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_0_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr = AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_0_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr_1 & AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_0_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr_2;
	assign AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_1_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr = AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_1_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr_1 & AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_1_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr_2;
	assign AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_2_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr = AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_2_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr_1 & AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_2_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr_2;
	assign AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_3_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr = AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_3_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr_1 & AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_3_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr_2;
	AXI4MemoryModuleB4_TopLevel_axiSlave
	AXI4MemoryModuleB4_TopLevel_axiSlave
	(
		// [BEGIN USER MAP FOR axiSlave]
		// [END USER MAP FOR axiSlave]
		.BoardSignals_Clock (BoardSignals_Clock),
		.BoardSignals_Reset (BoardSignals_Reset),
		.BoardSignals_Running (BoardSignals_Running),
		.BoardSignals_Starting (BoardSignals_Starting),
		.BoardSignals_Started (BoardSignals_Started),
		.M2S_AR_ARID (axiSlaveM2S_AR_ARIDaxiSlave_M2S_AR_ARIDHardLink),
		.M2S_AR_ARADDR (axiSlaveM2S_AR_ARADDRaxiSlave_M2S_AR_ARADDRHardLink),
		.M2S_AR_ARLEN (axiSlaveM2S_AR_ARLENaxiSlave_M2S_AR_ARLENHardLink),
		.M2S_AR_ARSIZE (axiSlaveM2S_AR_ARSIZEaxiSlave_M2S_AR_ARSIZEHardLink),
		.M2S_AR_ARBURST (axiSlaveM2S_AR_ARBURSTaxiSlave_M2S_AR_ARBURSTHardLink),
		.M2S_AR_ARLOCK (axiSlaveM2S_AR_ARLOCKaxiSlave_M2S_AR_ARLOCKHardLink),
		.M2S_AR_ARCACHE (axiSlaveM2S_AR_ARCACHEaxiSlave_M2S_AR_ARCACHEHardLink),
		.M2S_AR_ARPROT (axiSlaveM2S_AR_ARPROTaxiSlave_M2S_AR_ARPROTHardLink),
		.M2S_AR_ARQOS (axiSlaveM2S_AR_ARQOSaxiSlave_M2S_AR_ARQOSHardLink),
		.M2S_AR_ARREGION (axiSlaveM2S_AR_ARREGIONaxiSlave_M2S_AR_ARREGIONHardLink),
		.M2S_AR_ARUSER (axiSlaveM2S_AR_ARUSERaxiSlave_M2S_AR_ARUSERHardLink),
		.M2S_AR_ARVALID (axiSlaveM2S_AR_ARVALIDaxiSlave_M2S_AR_ARVALIDHardLink),
		.M2S_R_RREADY (axiSlaveM2S_R_RREADYaxiSlave_M2S_R_RREADYHardLink),
		.M2S_AW_AWID (axiSlaveM2S_AW_AWIDaxiSlave_M2S_AW_AWIDHardLink),
		.M2S_AW_AWADDR (axiSlaveM2S_AW_AWADDRaxiSlave_M2S_AW_AWADDRHardLink),
		.M2S_AW_AWLEN (axiSlaveM2S_AW_AWLENaxiSlave_M2S_AW_AWLENHardLink),
		.M2S_AW_AWSIZE (axiSlaveM2S_AW_AWSIZEaxiSlave_M2S_AW_AWSIZEHardLink),
		.M2S_AW_AWBURST (axiSlaveM2S_AW_AWBURSTaxiSlave_M2S_AW_AWBURSTHardLink),
		.M2S_AW_AWLOCK (axiSlaveM2S_AW_AWLOCKaxiSlave_M2S_AW_AWLOCKHardLink),
		.M2S_AW_AWCACHE (axiSlaveM2S_AW_AWCACHEaxiSlave_M2S_AW_AWCACHEHardLink),
		.M2S_AW_AWPROT (axiSlaveM2S_AW_AWPROTaxiSlave_M2S_AW_AWPROTHardLink),
		.M2S_AW_AWQOS (axiSlaveM2S_AW_AWQOSaxiSlave_M2S_AW_AWQOSHardLink),
		.M2S_AW_AWREGION (axiSlaveM2S_AW_AWREGIONaxiSlave_M2S_AW_AWREGIONHardLink),
		.M2S_AW_AWUSER (axiSlaveM2S_AW_AWUSERaxiSlave_M2S_AW_AWUSERHardLink),
		.M2S_AW_AWVALID (axiSlaveM2S_AW_AWVALIDaxiSlave_M2S_AW_AWVALIDHardLink),
		.M2S_W_WID (axiSlaveM2S_W_WIDaxiSlave_M2S_W_WIDHardLink),
		.M2S_W_WDATA0 (axiSlaveM2S_W_WDATA0axiSlave_M2S_W_WDATAHardLink),
		.M2S_W_WDATA1 (axiSlaveM2S_W_WDATA1axiSlave_M2S_W_WDATAHardLink),
		.M2S_W_WDATA2 (axiSlaveM2S_W_WDATA2axiSlave_M2S_W_WDATAHardLink),
		.M2S_W_WDATA3 (axiSlaveM2S_W_WDATA3axiSlave_M2S_W_WDATAHardLink),
		.M2S_W_WSTRB (axiSlaveM2S_W_WSTRBaxiSlave_M2S_W_WSTRBHardLink),
		.M2S_W_WLAST (axiSlaveM2S_W_WLASTaxiSlave_M2S_W_WLASTHardLink),
		.M2S_W_WUSER (axiSlaveM2S_W_WUSERaxiSlave_M2S_W_WUSERHardLink),
		.M2S_W_WVALID (axiSlaveM2S_W_WVALIDaxiSlave_M2S_W_WVALIDHardLink),
		.M2S_B_BREADY (axiSlaveM2S_B_BREADYaxiSlave_M2S_B_BREADYHardLink),
		.inRDATA0 (axiSlaveinRDATA0axiSlave_inRDATAHardLink),
		.inRDATA1 (axiSlaveinRDATA1axiSlave_inRDATAHardLink),
		.inRDATA2 (axiSlaveinRDATA2axiSlave_inRDATAHardLink),
		.inRDATA3 (axiSlaveinRDATA3axiSlave_inRDATAHardLink),
		.inARREADY (axiSlaveinARREADYaxiSlave_inARREADYHardLink),
		.inRVALID (axiSlaveinRVALIDaxiSlave_inRVALIDHardLink),
		.inAWREADY (axiSlaveinAWREADYaxiSlave_inAWREADYHardLink),
		.inWREADY (axiSlaveinWREADYaxiSlave_inWREADYHardLink),
		.inBVALID (axiSlaveinBVALIDaxiSlave_inBVALIDHardLink),
		.S2M_AR_ARREADY (axiSlaveS2M_AR_ARREADYaxiSlave_S2M_AR_ARREADYHardLink),
		.S2M_AW_AWREADY (axiSlaveS2M_AW_AWREADYaxiSlave_S2M_AW_AWREADYHardLink),
		.S2M_B_BID (axiSlaveS2M_B_BIDaxiSlave_S2M_B_BIDHardLink),
		.S2M_B_BRESP (axiSlaveS2M_B_BRESPaxiSlave_S2M_B_BRESPHardLink),
		.S2M_B_BUSER (axiSlaveS2M_B_BUSERaxiSlave_S2M_B_BUSERHardLink),
		.S2M_B_BVALID (axiSlaveS2M_B_BVALIDaxiSlave_S2M_B_BVALIDHardLink),
		.S2M_R_RID (axiSlaveS2M_R_RIDaxiSlave_S2M_R_RIDHardLink),
		.S2M_R_RDATA0 (axiSlaveS2M_R_RDATA0axiSlave_S2M_R_RDATAHardLink),
		.S2M_R_RDATA1 (axiSlaveS2M_R_RDATA1axiSlave_S2M_R_RDATAHardLink),
		.S2M_R_RDATA2 (axiSlaveS2M_R_RDATA2axiSlave_S2M_R_RDATAHardLink),
		.S2M_R_RDATA3 (axiSlaveS2M_R_RDATA3axiSlave_S2M_R_RDATAHardLink),
		.S2M_R_RRESP (axiSlaveS2M_R_RRESPaxiSlave_S2M_R_RRESPHardLink),
		.S2M_R_RLAST (axiSlaveS2M_R_RLASTaxiSlave_S2M_R_RLASTHardLink),
		.S2M_R_RUSER (axiSlaveS2M_R_RUSERaxiSlave_S2M_R_RUSERHardLink),
		.S2M_R_RVALID (axiSlaveS2M_R_RVALIDaxiSlave_S2M_R_RVALIDHardLink),
		.S2M_W_WREADY (axiSlaveS2M_W_WREADYaxiSlave_S2M_W_WREADYHardLink),
		.outReadTXCompleting (axiSlaveoutReadTXCompletingaxiSlave_outReadTXCompletingHardLink),
		.outWriteTXCompleting (axiSlaveoutWriteTXCompletingaxiSlave_outWriteTXCompletingHardLink),
		.outARREADYConfirming (axiSlaveoutARREADYConfirmingaxiSlave_outARREADYConfirmingHardLink),
		.outARVALID (axiSlaveoutARVALIDaxiSlave_outARVALIDHardLink),
		.outARADDR (axiSlaveoutARADDRaxiSlave_outARADDRHardLink),
		.outAWREADYConfirming (axiSlaveoutAWREADYConfirmingaxiSlave_outAWREADYConfirmingHardLink),
		.outAWVALID (axiSlaveoutAWVALIDaxiSlave_outAWVALIDHardLink),
		.outAWADDR (axiSlaveoutAWADDRaxiSlave_outAWADDRHardLink),
		.outWREADYConfirming (axiSlaveoutWREADYConfirmingaxiSlave_outWREADYConfirmingHardLink),
		.outWVALID (axiSlaveoutWVALIDaxiSlave_outWVALIDHardLink),
		.outWDATA0 (axiSlaveoutWDATA0axiSlave_outWDATAHardLink),
		.outWDATA1 (axiSlaveoutWDATA1axiSlave_outWDATAHardLink),
		.outWDATA2 (axiSlaveoutWDATA2axiSlave_outWDATAHardLink),
		.outWDATA3 (axiSlaveoutWDATA3axiSlave_outWDATAHardLink),
		.outWSTRB (axiSlaveoutWSTRBaxiSlave_outWSTRBHardLink)
	);
	always @ (*)
	begin
		case (AXI4MemoryModule_L69F13L71T26_LookupMultiplexerAddress)
			'b0:
			begin
				AXI4MemoryModule_L69F13L71T26_Lookup = AXI4MemoryModule_L69F13L71T26_Lookup1;
			end
			'b1:
			begin
				AXI4MemoryModule_L69F13L71T26_Lookup = AXI4MemoryModule_L69F13L71T26_Lookup2;
			end
			default:
			begin
				AXI4MemoryModule_L69F13L71T26_Lookup = 'b0000;
			end
		endcase
	end
	always @ (*)
	begin
		case (AXI4MemoryModule_L74F13L76T26_LookupMultiplexerAddress)
			'b0:
			begin
				AXI4MemoryModule_L74F13L76T26_Lookup = AXI4MemoryModule_L74F13L76T26_Lookup1;
			end
			'b1:
			begin
				AXI4MemoryModule_L74F13L76T26_Lookup = AXI4MemoryModule_L74F13L76T26_Lookup2;
			end
			default:
			begin
				AXI4MemoryModule_L74F13L76T26_Lookup = 'b00000000000000000000000000000000;
			end
		endcase
	end
	always @ (*)
	begin
		case (AXI4MemoryModule_L79F13L81T26_LookupMultiplexerAddress)
			'b0:
			begin
				AXI4MemoryModule_L79F13L81T26_Lookup = AXI4MemoryModule_L79F13L81T26_Lookup1;
			end
			'b1:
			begin
				AXI4MemoryModule_L79F13L81T26_Lookup = AXI4MemoryModule_L79F13L81T26_Lookup2;
			end
			default:
			begin
				AXI4MemoryModule_L79F13L81T26_Lookup = 'b00000000000000000000000000000000;
			end
		endcase
	end
	always @ (*)
	begin
		case (AXI4MemoryModule_L84F13L86T26_LookupMultiplexerAddress)
			'b0:
			begin
				AXI4MemoryModule_L84F13L86T26_Lookup = AXI4MemoryModule_L84F13L86T26_Lookup1;
			end
			'b1:
			begin
				AXI4MemoryModule_L84F13L86T26_Lookup = AXI4MemoryModule_L84F13L86T26_Lookup2;
			end
			default:
			begin
				AXI4MemoryModule_L84F13L86T26_Lookup = 'b00000000000000000000000000000000;
			end
		endcase
	end
	always @ (*)
	begin
		for (NextState_wdata_Iterator = 0; (NextState_wdata_Iterator < 4); NextState_wdata_Iterator = (NextState_wdata_Iterator + 1))
		begin
			NextState_wdata[NextState_wdata_Iterator] = State_wdata[NextState_wdata_Iterator];
		end
		NextState_raddr = State_raddr;
		NextState_waddrSet = State_waddrSet;
		NextState_wdataSet = State_wdataSet;
		NextState_waddr = State_waddr;
		NextState_wstrb = State_wstrb;
		if ((axiSlave_outAWREADYConfirming == 1))
		begin
			NextState_waddr = axiSlave_outAWADDR;
			NextState_waddrSet = AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L106F13L109T14_AXI4MemoryModule_L108F38T42_Expr;
		end
		if ((axiSlave_outWREADYConfirming == 1))
		begin
			NextState_wdata[0] = axiSlave_outWDATA[0];
			NextState_wdata[1] = axiSlave_outWDATA[1];
			NextState_wdata[2] = axiSlave_outWDATA[2];
			NextState_wdata[3] = axiSlave_outWDATA[3];
			NextState_wstrb = axiSlave_outWSTRB;
			NextState_wdataSet = AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L112F13L116T14_AXI4MemoryModule_L115F38T42_Expr;
		end
		if ((axiSlave_outWriteTXCompleting == 1))
		begin
			NextState_waddrSet = AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L119F13L122T14_AXI4MemoryModule_L120F38T43_Expr;
			NextState_wdataSet = AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L119F13L122T14_AXI4MemoryModule_L121F38T43_Expr;
		end
		if ((axiSlave_outARREADYConfirming == 1))
		begin
			NextState_raddr = axiSlave_outARADDR;
		end
	end
	assign AXI4MemoryModule_L64F37T81_Expr_1 = Inputs_M2S_AW_AWVALID;
	assign AXI4MemoryModule_L64F37T81_Expr_2 = Inputs_M2S_W_WVALID;
	assign AXI4MemoryModule_L65F40T72_Expr_1 = State_waddrSet;
	assign AXI4MemoryModule_L65F40T72_Expr_2 = State_wdataSet;
	assign AXI4MemoryModule_L66F28T73_Expr_1 = internalSameTxWrite;
	assign AXI4MemoryModule_L66F28T73_Expr_2 = internalDelayedTxWrite;
	assign AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_0_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr_1 = internalWE;
	assign AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_0_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr_2 = AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_0_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F35T51_Index;
	assign AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_1_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr_1 = internalWE;
	assign AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_1_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr_2 = AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_1_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F35T51_Index;
	assign AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_2_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr_1 = internalWE;
	assign AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_2_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr_2 = AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_2_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F35T51_Index;
	assign AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_3_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr_1 = internalWE;
	assign AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_3_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F21T51_Expr_2 = AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_3_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F35T51_Index;
	assign Inputs_M2S_AR_ARID = M2S_AR_ARID;
	assign Inputs_M2S_AR_ARADDR = M2S_AR_ARADDR;
	assign Inputs_M2S_AR_ARLEN = M2S_AR_ARLEN;
	assign Inputs_M2S_AR_ARSIZE = M2S_AR_ARSIZE;
	assign Inputs_M2S_AR_ARBURST = M2S_AR_ARBURST;
	assign Inputs_M2S_AR_ARLOCK = M2S_AR_ARLOCK;
	assign Inputs_M2S_AR_ARCACHE = M2S_AR_ARCACHE;
	assign Inputs_M2S_AR_ARPROT = M2S_AR_ARPROT;
	assign Inputs_M2S_AR_ARQOS = M2S_AR_ARQOS;
	assign Inputs_M2S_AR_ARREGION = M2S_AR_ARREGION;
	assign Inputs_M2S_AR_ARUSER = M2S_AR_ARUSER;
	assign Inputs_M2S_AR_ARVALID = M2S_AR_ARVALID;
	assign Inputs_M2S_R_RREADY = M2S_R_RREADY;
	assign Inputs_M2S_AW_AWID = M2S_AW_AWID;
	assign Inputs_M2S_AW_AWADDR = M2S_AW_AWADDR;
	assign Inputs_M2S_AW_AWLEN = M2S_AW_AWLEN;
	assign Inputs_M2S_AW_AWSIZE = M2S_AW_AWSIZE;
	assign Inputs_M2S_AW_AWBURST = M2S_AW_AWBURST;
	assign Inputs_M2S_AW_AWLOCK = M2S_AW_AWLOCK;
	assign Inputs_M2S_AW_AWCACHE = M2S_AW_AWCACHE;
	assign Inputs_M2S_AW_AWPROT = M2S_AW_AWPROT;
	assign Inputs_M2S_AW_AWQOS = M2S_AW_AWQOS;
	assign Inputs_M2S_AW_AWREGION = M2S_AW_AWREGION;
	assign Inputs_M2S_AW_AWUSER = M2S_AW_AWUSER;
	assign Inputs_M2S_AW_AWVALID = M2S_AW_AWVALID;
	assign Inputs_M2S_W_WID = M2S_W_WID;
	assign Inputs_M2S_W_WDATA[0] = M2S_W_WDATA0;
	assign Inputs_M2S_W_WDATA[1] = M2S_W_WDATA1;
	assign Inputs_M2S_W_WDATA[2] = M2S_W_WDATA2;
	assign Inputs_M2S_W_WDATA[3] = M2S_W_WDATA3;
	assign Inputs_M2S_W_WSTRB = M2S_W_WSTRB;
	assign Inputs_M2S_W_WLAST = M2S_W_WLAST;
	assign Inputs_M2S_W_WUSER = M2S_W_WUSER;
	assign Inputs_M2S_W_WVALID = M2S_W_WVALID;
	assign Inputs_M2S_B_BREADY = M2S_B_BREADY;
	assign internalSameTxWrite = AXI4MemoryModule_L64F37T81_Expr;
	assign internalDelayedTxWrite = AXI4MemoryModule_L65F40T72_Expr;
	assign internalWE = AXI4MemoryModule_L66F28T73_Expr;
	assign internalWSTRB = AXI4MemoryModule_L69F13L71T26_Lookup;
	assign internalWADDR = AXI4MemoryModule_L74F13L76T26_Lookup;
	assign internalWDATA[0] = AXI4MemoryModule_L79F13L81T26_Lookup[7:0];
	assign internalWDATA[1] = AXI4MemoryModule_L79F13L81T26_Lookup[15:8];
	assign internalWDATA[2] = AXI4MemoryModule_L79F13L81T26_Lookup[23:16];
	assign internalWDATA[3] = AXI4MemoryModule_L79F13L81T26_Lookup[31:24];
	assign internalRADDR = AXI4MemoryModule_L84F13L86T26_Lookup;
	assign axiSlave_M2S_AR_ARID = Inputs_M2S_AR_ARID;
	assign axiSlave_M2S_AR_ARADDR = Inputs_M2S_AR_ARADDR;
	assign axiSlave_M2S_AR_ARLEN = Inputs_M2S_AR_ARLEN;
	assign axiSlave_M2S_AR_ARSIZE = Inputs_M2S_AR_ARSIZE;
	assign axiSlave_M2S_AR_ARBURST = Inputs_M2S_AR_ARBURST;
	assign axiSlave_M2S_AR_ARLOCK = Inputs_M2S_AR_ARLOCK;
	assign axiSlave_M2S_AR_ARCACHE = Inputs_M2S_AR_ARCACHE;
	assign axiSlave_M2S_AR_ARPROT = Inputs_M2S_AR_ARPROT;
	assign axiSlave_M2S_AR_ARQOS = Inputs_M2S_AR_ARQOS;
	assign axiSlave_M2S_AR_ARREGION = Inputs_M2S_AR_ARREGION;
	assign axiSlave_M2S_AR_ARUSER = Inputs_M2S_AR_ARUSER;
	assign axiSlave_M2S_AR_ARVALID = Inputs_M2S_AR_ARVALID;
	assign axiSlave_M2S_R_RREADY = Inputs_M2S_R_RREADY;
	assign axiSlave_M2S_AW_AWID = Inputs_M2S_AW_AWID;
	assign axiSlave_M2S_AW_AWADDR = Inputs_M2S_AW_AWADDR;
	assign axiSlave_M2S_AW_AWLEN = Inputs_M2S_AW_AWLEN;
	assign axiSlave_M2S_AW_AWSIZE = Inputs_M2S_AW_AWSIZE;
	assign axiSlave_M2S_AW_AWBURST = Inputs_M2S_AW_AWBURST;
	assign axiSlave_M2S_AW_AWLOCK = Inputs_M2S_AW_AWLOCK;
	assign axiSlave_M2S_AW_AWCACHE = Inputs_M2S_AW_AWCACHE;
	assign axiSlave_M2S_AW_AWPROT = Inputs_M2S_AW_AWPROT;
	assign axiSlave_M2S_AW_AWQOS = Inputs_M2S_AW_AWQOS;
	assign axiSlave_M2S_AW_AWREGION = Inputs_M2S_AW_AWREGION;
	assign axiSlave_M2S_AW_AWUSER = Inputs_M2S_AW_AWUSER;
	assign axiSlave_M2S_AW_AWVALID = Inputs_M2S_AW_AWVALID;
	assign axiSlave_M2S_W_WID = Inputs_M2S_W_WID;
	assign axiSlave_M2S_W_WDATA[0] = Inputs_M2S_W_WDATA[0];
	assign axiSlave_M2S_W_WDATA[1] = Inputs_M2S_W_WDATA[1];
	assign axiSlave_M2S_W_WDATA[2] = Inputs_M2S_W_WDATA[2];
	assign axiSlave_M2S_W_WDATA[3] = Inputs_M2S_W_WDATA[3];
	assign axiSlave_M2S_W_WSTRB = Inputs_M2S_W_WSTRB;
	assign axiSlave_M2S_W_WLAST = Inputs_M2S_W_WLAST;
	assign axiSlave_M2S_W_WUSER = Inputs_M2S_W_WUSER;
	assign axiSlave_M2S_W_WVALID = Inputs_M2S_W_WVALID;
	assign axiSlave_M2S_B_BREADY = Inputs_M2S_B_BREADY;
	assign axiSlave_inRDATA[0] = State_rdata[0];
	assign axiSlave_inRDATA[1] = State_rdata[1];
	assign axiSlave_inRDATA[2] = State_rdata[2];
	assign axiSlave_inRDATA[3] = State_rdata[3];
	assign axiSlave_inARREADY = AXI4MemoryModule_L95F29T33_Expr;
	assign axiSlave_inRVALID = AXI4MemoryModule_L96F28T32_Expr;
	assign axiSlave_inAWREADY = AXI4MemoryModule_L97F29T33_Expr;
	assign axiSlave_inWREADY = AXI4MemoryModule_L98F28T32_Expr;
	assign axiSlave_inBVALID = AXI4MemoryModule_L99F28T32_Expr;
	assign AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_0_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F35T51_Index = internalWSTRB[AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_0_w];
	assign AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_1_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F35T51_Index = internalWSTRB[AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_1_w];
	assign AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_2_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F35T51_Index = internalWSTRB[AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_2_w];
	assign AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_3_AXI4MemoryModule_L125F13L128T14_AXI4MemoryModule_L126F35T51_Index = internalWSTRB[AXI4MemoryModule_L104F9L136T10_AXI4MemoryModule_L124F13L128T14_3_w];
	assign S2M_AR_ARREADY = axiSlave_S2M_AR_ARREADY;
	assign S2M_AW_AWREADY = axiSlave_S2M_AW_AWREADY;
	assign S2M_B_BID = axiSlave_S2M_B_BID;
	assign S2M_B_BRESP = axiSlave_S2M_B_BRESP;
	assign S2M_B_BUSER = axiSlave_S2M_B_BUSER;
	assign S2M_B_BVALID = axiSlave_S2M_B_BVALID;
	assign S2M_R_RID = axiSlave_S2M_R_RID;
	assign S2M_R_RDATA0 = axiSlave_S2M_R_RDATA[0];
	assign S2M_R_RDATA1 = axiSlave_S2M_R_RDATA[1];
	assign S2M_R_RDATA2 = axiSlave_S2M_R_RDATA[2];
	assign S2M_R_RDATA3 = axiSlave_S2M_R_RDATA[3];
	assign S2M_R_RRESP = axiSlave_S2M_R_RRESP;
	assign S2M_R_RLAST = axiSlave_S2M_R_RLAST;
	assign S2M_R_RUSER = axiSlave_S2M_R_RUSER;
	assign S2M_R_RVALID = axiSlave_S2M_R_RVALID;
	assign S2M_W_WREADY = axiSlave_S2M_W_WREADY;
	assign axiSlaveM2S_AR_ARIDaxiSlave_M2S_AR_ARIDHardLink = axiSlave_M2S_AR_ARID;
	assign axiSlaveM2S_AR_ARADDRaxiSlave_M2S_AR_ARADDRHardLink = axiSlave_M2S_AR_ARADDR;
	assign axiSlaveM2S_AR_ARLENaxiSlave_M2S_AR_ARLENHardLink = axiSlave_M2S_AR_ARLEN;
	assign axiSlaveM2S_AR_ARSIZEaxiSlave_M2S_AR_ARSIZEHardLink = axiSlave_M2S_AR_ARSIZE;
	assign axiSlaveM2S_AR_ARBURSTaxiSlave_M2S_AR_ARBURSTHardLink = axiSlave_M2S_AR_ARBURST;
	assign axiSlaveM2S_AR_ARLOCKaxiSlave_M2S_AR_ARLOCKHardLink = axiSlave_M2S_AR_ARLOCK;
	assign axiSlaveM2S_AR_ARCACHEaxiSlave_M2S_AR_ARCACHEHardLink = axiSlave_M2S_AR_ARCACHE;
	assign axiSlaveM2S_AR_ARPROTaxiSlave_M2S_AR_ARPROTHardLink = axiSlave_M2S_AR_ARPROT;
	assign axiSlaveM2S_AR_ARQOSaxiSlave_M2S_AR_ARQOSHardLink = axiSlave_M2S_AR_ARQOS;
	assign axiSlaveM2S_AR_ARREGIONaxiSlave_M2S_AR_ARREGIONHardLink = axiSlave_M2S_AR_ARREGION;
	assign axiSlaveM2S_AR_ARUSERaxiSlave_M2S_AR_ARUSERHardLink = axiSlave_M2S_AR_ARUSER;
	assign axiSlaveM2S_AR_ARVALIDaxiSlave_M2S_AR_ARVALIDHardLink = axiSlave_M2S_AR_ARVALID;
	assign axiSlaveM2S_R_RREADYaxiSlave_M2S_R_RREADYHardLink = axiSlave_M2S_R_RREADY;
	assign axiSlaveM2S_AW_AWIDaxiSlave_M2S_AW_AWIDHardLink = axiSlave_M2S_AW_AWID;
	assign axiSlaveM2S_AW_AWADDRaxiSlave_M2S_AW_AWADDRHardLink = axiSlave_M2S_AW_AWADDR;
	assign axiSlaveM2S_AW_AWLENaxiSlave_M2S_AW_AWLENHardLink = axiSlave_M2S_AW_AWLEN;
	assign axiSlaveM2S_AW_AWSIZEaxiSlave_M2S_AW_AWSIZEHardLink = axiSlave_M2S_AW_AWSIZE;
	assign axiSlaveM2S_AW_AWBURSTaxiSlave_M2S_AW_AWBURSTHardLink = axiSlave_M2S_AW_AWBURST;
	assign axiSlaveM2S_AW_AWLOCKaxiSlave_M2S_AW_AWLOCKHardLink = axiSlave_M2S_AW_AWLOCK;
	assign axiSlaveM2S_AW_AWCACHEaxiSlave_M2S_AW_AWCACHEHardLink = axiSlave_M2S_AW_AWCACHE;
	assign axiSlaveM2S_AW_AWPROTaxiSlave_M2S_AW_AWPROTHardLink = axiSlave_M2S_AW_AWPROT;
	assign axiSlaveM2S_AW_AWQOSaxiSlave_M2S_AW_AWQOSHardLink = axiSlave_M2S_AW_AWQOS;
	assign axiSlaveM2S_AW_AWREGIONaxiSlave_M2S_AW_AWREGIONHardLink = axiSlave_M2S_AW_AWREGION;
	assign axiSlaveM2S_AW_AWUSERaxiSlave_M2S_AW_AWUSERHardLink = axiSlave_M2S_AW_AWUSER;
	assign axiSlaveM2S_AW_AWVALIDaxiSlave_M2S_AW_AWVALIDHardLink = axiSlave_M2S_AW_AWVALID;
	assign axiSlaveM2S_W_WIDaxiSlave_M2S_W_WIDHardLink = axiSlave_M2S_W_WID;
	assign axiSlaveM2S_W_WDATA0axiSlave_M2S_W_WDATAHardLink = axiSlave_M2S_W_WDATA[0];
	assign axiSlaveM2S_W_WDATA1axiSlave_M2S_W_WDATAHardLink = axiSlave_M2S_W_WDATA[1];
	assign axiSlaveM2S_W_WDATA2axiSlave_M2S_W_WDATAHardLink = axiSlave_M2S_W_WDATA[2];
	assign axiSlaveM2S_W_WDATA3axiSlave_M2S_W_WDATAHardLink = axiSlave_M2S_W_WDATA[3];
	assign axiSlaveM2S_W_WSTRBaxiSlave_M2S_W_WSTRBHardLink = axiSlave_M2S_W_WSTRB;
	assign axiSlaveM2S_W_WLASTaxiSlave_M2S_W_WLASTHardLink = axiSlave_M2S_W_WLAST;
	assign axiSlaveM2S_W_WUSERaxiSlave_M2S_W_WUSERHardLink = axiSlave_M2S_W_WUSER;
	assign axiSlaveM2S_W_WVALIDaxiSlave_M2S_W_WVALIDHardLink = axiSlave_M2S_W_WVALID;
	assign axiSlaveM2S_B_BREADYaxiSlave_M2S_B_BREADYHardLink = axiSlave_M2S_B_BREADY;
	assign axiSlaveinRDATA0axiSlave_inRDATAHardLink = axiSlave_inRDATA[0];
	assign axiSlaveinRDATA1axiSlave_inRDATAHardLink = axiSlave_inRDATA[1];
	assign axiSlaveinRDATA2axiSlave_inRDATAHardLink = axiSlave_inRDATA[2];
	assign axiSlaveinRDATA3axiSlave_inRDATAHardLink = axiSlave_inRDATA[3];
	assign axiSlaveinARREADYaxiSlave_inARREADYHardLink = axiSlave_inARREADY;
	assign axiSlaveinRVALIDaxiSlave_inRVALIDHardLink = axiSlave_inRVALID;
	assign axiSlaveinAWREADYaxiSlave_inAWREADYHardLink = axiSlave_inAWREADY;
	assign axiSlaveinWREADYaxiSlave_inWREADYHardLink = axiSlave_inWREADY;
	assign axiSlaveinBVALIDaxiSlave_inBVALIDHardLink = axiSlave_inBVALID;
	assign axiSlave_S2M_AR_ARREADY = axiSlaveS2M_AR_ARREADYaxiSlave_S2M_AR_ARREADYHardLink;
	assign axiSlave_S2M_AW_AWREADY = axiSlaveS2M_AW_AWREADYaxiSlave_S2M_AW_AWREADYHardLink;
	assign axiSlave_S2M_B_BID = axiSlaveS2M_B_BIDaxiSlave_S2M_B_BIDHardLink;
	assign axiSlave_S2M_B_BRESP = axiSlaveS2M_B_BRESPaxiSlave_S2M_B_BRESPHardLink;
	assign axiSlave_S2M_B_BUSER = axiSlaveS2M_B_BUSERaxiSlave_S2M_B_BUSERHardLink;
	assign axiSlave_S2M_B_BVALID = axiSlaveS2M_B_BVALIDaxiSlave_S2M_B_BVALIDHardLink;
	assign axiSlave_S2M_R_RID = axiSlaveS2M_R_RIDaxiSlave_S2M_R_RIDHardLink;
	assign axiSlave_S2M_R_RDATA[0] = axiSlaveS2M_R_RDATA0axiSlave_S2M_R_RDATAHardLink;
	assign axiSlave_S2M_R_RDATA[1] = axiSlaveS2M_R_RDATA1axiSlave_S2M_R_RDATAHardLink;
	assign axiSlave_S2M_R_RDATA[2] = axiSlaveS2M_R_RDATA2axiSlave_S2M_R_RDATAHardLink;
	assign axiSlave_S2M_R_RDATA[3] = axiSlaveS2M_R_RDATA3axiSlave_S2M_R_RDATAHardLink;
	assign axiSlave_S2M_R_RRESP = axiSlaveS2M_R_RRESPaxiSlave_S2M_R_RRESPHardLink;
	assign axiSlave_S2M_R_RLAST = axiSlaveS2M_R_RLASTaxiSlave_S2M_R_RLASTHardLink;
	assign axiSlave_S2M_R_RUSER = axiSlaveS2M_R_RUSERaxiSlave_S2M_R_RUSERHardLink;
	assign axiSlave_S2M_R_RVALID = axiSlaveS2M_R_RVALIDaxiSlave_S2M_R_RVALIDHardLink;
	assign axiSlave_S2M_W_WREADY = axiSlaveS2M_W_WREADYaxiSlave_S2M_W_WREADYHardLink;
	assign axiSlave_outReadTXCompleting = axiSlaveoutReadTXCompletingaxiSlave_outReadTXCompletingHardLink;
	assign axiSlave_outWriteTXCompleting = axiSlaveoutWriteTXCompletingaxiSlave_outWriteTXCompletingHardLink;
	assign axiSlave_outARREADYConfirming = axiSlaveoutARREADYConfirmingaxiSlave_outARREADYConfirmingHardLink;
	assign axiSlave_outARVALID = axiSlaveoutARVALIDaxiSlave_outARVALIDHardLink;
	assign axiSlave_outARADDR = axiSlaveoutARADDRaxiSlave_outARADDRHardLink;
	assign axiSlave_outAWREADYConfirming = axiSlaveoutAWREADYConfirmingaxiSlave_outAWREADYConfirmingHardLink;
	assign axiSlave_outAWVALID = axiSlaveoutAWVALIDaxiSlave_outAWVALIDHardLink;
	assign axiSlave_outAWADDR = axiSlaveoutAWADDRaxiSlave_outAWADDRHardLink;
	assign axiSlave_outWREADYConfirming = axiSlaveoutWREADYConfirmingaxiSlave_outWREADYConfirmingHardLink;
	assign axiSlave_outWVALID = axiSlaveoutWVALIDaxiSlave_outWVALIDHardLink;
	assign axiSlave_outWDATA[0] = axiSlaveoutWDATA0axiSlave_outWDATAHardLink;
	assign axiSlave_outWDATA[1] = axiSlaveoutWDATA1axiSlave_outWDATAHardLink;
	assign axiSlave_outWDATA[2] = axiSlaveoutWDATA2axiSlave_outWDATAHardLink;
	assign axiSlave_outWDATA[3] = axiSlaveoutWDATA3axiSlave_outWDATAHardLink;
	assign axiSlave_outWSTRB = axiSlaveoutWSTRBaxiSlave_outWSTRBHardLink;
	assign AXI4MemoryModule_L69F13L71T26_Lookup1 = State_wstrb;
	assign AXI4MemoryModule_L69F13L71T26_Lookup2 = axiSlave_outWSTRB;
	assign AXI4MemoryModule_L69F13L71T26_LookupMultiplexerAddress = internalSameTxWrite;
	assign AXI4MemoryModule_L74F13L76T26_Lookup1 = State_waddr;
	assign AXI4MemoryModule_L74F13L76T26_Lookup2 = axiSlave_outAWADDR;
	assign AXI4MemoryModule_L74F13L76T26_LookupMultiplexerAddress = internalSameTxWrite;
	assign AXI4MemoryModule_L79F13L81T26_Lookup1 = { State_wdata[3], State_wdata[2], State_wdata[1], State_wdata[0] };
	assign AXI4MemoryModule_L79F13L81T26_Lookup2 = { axiSlave_outWDATA[3], axiSlave_outWDATA[2], axiSlave_outWDATA[1], axiSlave_outWDATA[0] };
	assign AXI4MemoryModule_L79F13L81T26_LookupMultiplexerAddress = internalSameTxWrite;
	assign AXI4MemoryModule_L84F13L86T26_Lookup1 = State_raddr;
	assign AXI4MemoryModule_L84F13L86T26_Lookup2 = axiSlave_outARADDR;
	assign AXI4MemoryModule_L84F13L86T26_LookupMultiplexerAddress = axiSlave_outARREADYConfirming;
	// [BEGIN USER ARCHITECTURE]
	// [END USER ARCHITECTURE]
endmodule
