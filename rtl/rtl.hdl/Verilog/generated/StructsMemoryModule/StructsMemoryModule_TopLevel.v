`timescale 1ns/1ps
`default_nettype none
// PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
// * This file was generated by Quokka FPGA Toolkit.
// * Generated code is your property, do whatever you want with it
// * Place custom code between [BEGIN USER ***] and [END USER ***].
// * CAUTION: All code outside of [USER] scope is subject to regeneration.
// * Bad things happen sometimes in developer's life,
//   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
// * Internal structure of code is subject to change.
//   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
// * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
// * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
//
// DISCLAIMER:
//   Code comes AS-IS, it is your responsibility to make sure it is working as expected
//   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
//
// System configuration name is StructsMemoryModule_TopLevel, clock frequency is 1Hz, Top-level
// FSM summary
// -- Packages
module StructsMemoryModule_TopLevel
(
	// [BEGIN USER PORTS]
	// [END USER PORTS]
	input wire Clock,
	input wire Reset,
	input wire [7:0] In_Op1,
	input wire [7:0] In_Op2,
	output wire [7:0] Out_Op1,
	output wire [7:0] Out_Op2
);
	// [BEGIN USER SIGNALS]
	// [END USER SIGNALS]
	localparam HiSignal = 1'b1;
	localparam LoSignal = 1'b0;
	wire Zero = 1'b0;
	wire One = 1'b1;
	wire true = 1'b1;
	wire false = 1'b0;
	wire [15: 0] State_BuffDefault = 16'b0000000000000000;
	wire StructsMemoryModule_L33F9L40T10_StructsMemoryModule_L35F13L38T14_0_idx = 1'b0;
	wire StructsMemoryModule_L33F9L40T10_StructsMemoryModule_L35F13L38T14_1_idx = 1'b1;
	wire [1: 0] StructsMemoryModule_L33F9L40T10_StructsMemoryModule_L35F13L38T14_2_idx = 2'b10;
	wire [7: 0] Inputs_In_Op1;
	wire [7: 0] Inputs_In_Op2;
	reg [7: 0] NextState_Out_Op1;
	reg [7: 0] NextState_Out_Op2;
	reg [7: 0] State_Out_Op1 = 8'b00000000;
	wire [7: 0] State_Out_Op1Default = 8'b00001010;
	reg [7: 0] State_Out_Op2 = 8'b00000000;
	wire [7: 0] State_Out_Op2Default = 8'b00010100;
	integer State_Buff_Iterator;
	reg [15 : 0] State_Buff [0 : 3];
	initial
	begin : Init_State_Buff
$readmemh("StructsMemoryModule_TopLevel_State_Buff.hex", State_Buff);
	end
	integer NextState_Buff_Iterator;
	reg [15 : 0] NextState_Buff [0 : 3];
	initial
	begin : Init_NextState_Buff
		for (NextState_Buff_Iterator = 0; NextState_Buff_Iterator < 4; NextState_Buff_Iterator = NextState_Buff_Iterator + 1)
			NextState_Buff[NextState_Buff_Iterator] = 0;
	end
	always @ (posedge Clock)
	begin
		if ((Reset == 1))
		begin
			State_Out_Op1 <= State_Out_Op1Default;
			State_Out_Op2 <= State_Out_Op2Default;
		end
		else
		begin
			State_Out_Op1 <= NextState_Out_Op1;
			State_Out_Op2 <= NextState_Out_Op2;
		end
	end
	always @ (posedge Clock)
	begin
		if ((Reset == 1))
		begin
		end
		else
		begin
			for (State_Buff_Iterator = 0; (State_Buff_Iterator < 4); State_Buff_Iterator = (State_Buff_Iterator + 1))
			begin
				State_Buff[State_Buff_Iterator] <= NextState_Buff[State_Buff_Iterator];
			end
		end
	end
	always @ (*)
	begin
		NextState_Buff_Iterator = 0;
		for (NextState_Buff_Iterator = 0; (NextState_Buff_Iterator < 4); NextState_Buff_Iterator = (NextState_Buff_Iterator + 1))
		begin
			NextState_Buff[NextState_Buff_Iterator] = State_Buff[NextState_Buff_Iterator];
		end
		NextState_Out_Op1 = State_Out_Op1;
		NextState_Out_Op2 = State_Out_Op2;
		NextState_Buff[0] = {
			Inputs_In_Op2,
			Inputs_In_Op1
		}
		;
		NextState_Buff[1] = State_Buff[0];
		NextState_Buff[2] = State_Buff[1];
		NextState_Buff[3] = State_Buff[2];
		NextState_Out_Op2 = State_Buff[3][15:8];
		NextState_Out_Op1 = State_Buff[3][7:0];
	end
	assign Inputs_In_Op1 = In_Op1;
	assign Inputs_In_Op2 = In_Op2;
	assign Out_Op1 = State_Out_Op1;
	assign Out_Op2 = State_Out_Op2;
	// [BEGIN USER ARCHITECTURE]
	// [END USER ARCHITECTURE]
endmodule
