`timescale 1ns/1ps
`default_nettype none
// PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
// * This file was generated by Quokka FPGA Toolkit.
// * Generated code is your property, do whatever you want with it
// * Place custom code between [BEGIN USER ***] and [END USER ***].
// * CAUTION: All code outside of [USER] scope is subject to regeneration.
// * Bad things happen sometimes in developer's life,
//   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
// * Internal structure of code is subject to change.
//   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
// * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
// * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
//
// DISCLAIMER:
//   Code comes AS-IS, it is your responsibility to make sure it is working as expected
//   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
//
// System configuration name is AXILikeMuxModule_TopLevel, clock frequency is 1Hz, Top-level
// FSM summary
// -- Packages
module AXILikeMuxModule_TopLevel
(
	// [BEGIN USER PORTS]
	// [END USER PORTS]
	input wire [2:0] MAddr,
	input wire MAddrValid,
	input wire MArr0_IsActive,
	input wire [7:0] MArr0_Payload_Data,
	input wire MArr0_Payload_DataFlag,
	input wire MArr1_IsActive,
	input wire [7:0] MArr1_Payload_Data,
	input wire MArr1_Payload_DataFlag,
	input wire MArr2_IsActive,
	input wire [7:0] MArr2_Payload_Data,
	input wire MArr2_Payload_DataFlag,
	input wire MArr3_IsActive,
	input wire [7:0] MArr3_Payload_Data,
	input wire MArr3_Payload_DataFlag,
	input wire MArr4_IsActive,
	input wire [7:0] MArr4_Payload_Data,
	input wire MArr4_Payload_DataFlag,
	input wire MArr5_IsActive,
	input wire [7:0] MArr5_Payload_Data,
	input wire MArr5_Payload_DataFlag,
	input wire MArr6_IsActive,
	input wire [7:0] MArr6_Payload_Data,
	input wire MArr6_Payload_DataFlag,
	input wire MArr7_IsActive,
	input wire [7:0] MArr7_Payload_Data,
	input wire MArr7_Payload_DataFlag,
	input wire [1:0] SAddr,
	input wire SAddrValid,
	input wire SArr0_IsActive,
	input wire [7:0] SArr0_Payload_Data,
	input wire SArr0_Payload_DataFlag,
	input wire SArr1_IsActive,
	input wire [7:0] SArr1_Payload_Data,
	input wire SArr1_Payload_DataFlag,
	input wire SArr2_IsActive,
	input wire [7:0] SArr2_Payload_Data,
	input wire SArr2_Payload_DataFlag,
	input wire SArr3_IsActive,
	input wire [7:0] SArr3_Payload_Data,
	input wire SArr3_Payload_DataFlag,
	output wire OutMData0_IsActive,
	output wire [7:0] OutMData0_Payload_Data,
	output wire OutMData0_Payload_DataFlag,
	output wire OutMData1_IsActive,
	output wire [7:0] OutMData1_Payload_Data,
	output wire OutMData1_Payload_DataFlag,
	output wire OutMData2_IsActive,
	output wire [7:0] OutMData2_Payload_Data,
	output wire OutMData2_Payload_DataFlag,
	output wire OutMData3_IsActive,
	output wire [7:0] OutMData3_Payload_Data,
	output wire OutMData3_Payload_DataFlag,
	output wire OutSData0_IsActive,
	output wire [7:0] OutSData0_Payload_Data,
	output wire OutSData0_Payload_DataFlag,
	output wire OutSData1_IsActive,
	output wire [7:0] OutSData1_Payload_Data,
	output wire OutSData1_Payload_DataFlag,
	output wire OutSData2_IsActive,
	output wire [7:0] OutSData2_Payload_Data,
	output wire OutSData2_Payload_DataFlag,
	output wire OutSData3_IsActive,
	output wire [7:0] OutSData3_Payload_Data,
	output wire OutSData3_Payload_DataFlag,
	output wire OutSData4_IsActive,
	output wire [7:0] OutSData4_Payload_Data,
	output wire OutSData4_Payload_DataFlag,
	output wire OutSData5_IsActive,
	output wire [7:0] OutSData5_Payload_Data,
	output wire OutSData5_Payload_DataFlag,
	output wire OutSData6_IsActive,
	output wire [7:0] OutSData6_Payload_Data,
	output wire OutSData6_Payload_DataFlag,
	output wire OutSData7_IsActive,
	output wire [7:0] OutSData7_Payload_Data,
	output wire OutSData7_Payload_DataFlag
);
	// [BEGIN USER SIGNALS]
	// [END USER SIGNALS]
	localparam HiSignal = 1'b1;
	localparam LoSignal = 1'b0;
	wire Zero = 1'b0;
	wire One = 1'b1;
	wire true = 1'b1;
	wire false = 1'b0;
	wire [3: 0] mastersCount = 4'b1000;
	wire [2: 0] slavesCount = 3'b100;
	wire [2: 0] Inputs_MAddr;
	wire Inputs_MAddrValid;
	wire [1: 0] Inputs_SAddr;
	wire Inputs_SAddrValid;
	wire [2: 0] fullDuplexMux_iLeftAddr;
	wire fullDuplexMux_iLeftAddrValid;
	wire [1: 0] fullDuplexMux_iRightAddr;
	wire fullDuplexMux_iRightAddrValid;
	wire [9: 0] fullDuplexMux_iLeft0_fullDuplexMux_iLeft_HardLink;
	wire [9: 0] fullDuplexMux_iLeft1_fullDuplexMux_iLeft_HardLink;
	wire [9: 0] fullDuplexMux_iLeft2_fullDuplexMux_iLeft_HardLink;
	wire [9: 0] fullDuplexMux_iLeft3_fullDuplexMux_iLeft_HardLink;
	wire [9: 0] fullDuplexMux_iLeft4_fullDuplexMux_iLeft_HardLink;
	wire [9: 0] fullDuplexMux_iLeft5_fullDuplexMux_iLeft_HardLink;
	wire [9: 0] fullDuplexMux_iLeft6_fullDuplexMux_iLeft_HardLink;
	wire [9: 0] fullDuplexMux_iLeft7_fullDuplexMux_iLeft_HardLink;
	wire [2: 0] fullDuplexMux_iLeftAddr_fullDuplexMux_iLeftAddr_HardLink;
	wire fullDuplexMux_iLeftAddrValid_fullDuplexMux_iLeftAddrValid_HardLink;
	wire [9: 0] fullDuplexMux_iRight0_fullDuplexMux_iRight_HardLink;
	wire [9: 0] fullDuplexMux_iRight1_fullDuplexMux_iRight_HardLink;
	wire [9: 0] fullDuplexMux_iRight2_fullDuplexMux_iRight_HardLink;
	wire [9: 0] fullDuplexMux_iRight3_fullDuplexMux_iRight_HardLink;
	wire [1: 0] fullDuplexMux_iRightAddr_fullDuplexMux_iRightAddr_HardLink;
	wire fullDuplexMux_iRightAddrValid_fullDuplexMux_iRightAddrValid_HardLink;
	wire [9: 0] fullDuplexMux_oLeft0_fullDuplexMux_oLeft_HardLink;
	wire [9: 0] fullDuplexMux_oLeft1_fullDuplexMux_oLeft_HardLink;
	wire [9: 0] fullDuplexMux_oLeft2_fullDuplexMux_oLeft_HardLink;
	wire [9: 0] fullDuplexMux_oLeft3_fullDuplexMux_oLeft_HardLink;
	wire [9: 0] fullDuplexMux_oRight0_fullDuplexMux_oRight_HardLink;
	wire [9: 0] fullDuplexMux_oRight1_fullDuplexMux_oRight_HardLink;
	wire [9: 0] fullDuplexMux_oRight2_fullDuplexMux_oRight_HardLink;
	wire [9: 0] fullDuplexMux_oRight3_fullDuplexMux_oRight_HardLink;
	wire [9: 0] fullDuplexMux_oRight4_fullDuplexMux_oRight_HardLink;
	wire [9: 0] fullDuplexMux_oRight5_fullDuplexMux_oRight_HardLink;
	wire [9: 0] fullDuplexMux_oRight6_fullDuplexMux_oRight_HardLink;
	wire [9: 0] fullDuplexMux_oRight7_fullDuplexMux_oRight_HardLink;
	wire [9 : 0] Inputs_MArr [0 : 7];
	wire [9 : 0] Inputs_SArr [0 : 3];
	wire [9 : 0] fullDuplexMux_iLeft [0 : 7];
	wire [9 : 0] fullDuplexMux_iRight [0 : 3];
	wire [9 : 0] fullDuplexMux_oLeft [0 : 3];
	wire [9 : 0] fullDuplexMux_oRight [0 : 7];
	AXILikeMuxModule_TopLevel_fullDuplexMux
	AXILikeMuxModule_TopLevel_fullDuplexMux
	(
		// [BEGIN USER MAP FOR fullDuplexMux]
		// [END USER MAP FOR fullDuplexMux]
		.iLeft0 (fullDuplexMux_iLeft0_fullDuplexMux_iLeft_HardLink),
		.iLeft1 (fullDuplexMux_iLeft1_fullDuplexMux_iLeft_HardLink),
		.iLeft2 (fullDuplexMux_iLeft2_fullDuplexMux_iLeft_HardLink),
		.iLeft3 (fullDuplexMux_iLeft3_fullDuplexMux_iLeft_HardLink),
		.iLeft4 (fullDuplexMux_iLeft4_fullDuplexMux_iLeft_HardLink),
		.iLeft5 (fullDuplexMux_iLeft5_fullDuplexMux_iLeft_HardLink),
		.iLeft6 (fullDuplexMux_iLeft6_fullDuplexMux_iLeft_HardLink),
		.iLeft7 (fullDuplexMux_iLeft7_fullDuplexMux_iLeft_HardLink),
		.iLeftAddr (fullDuplexMux_iLeftAddr_fullDuplexMux_iLeftAddr_HardLink),
		.iLeftAddrValid (fullDuplexMux_iLeftAddrValid_fullDuplexMux_iLeftAddrValid_HardLink),
		.iRight0 (fullDuplexMux_iRight0_fullDuplexMux_iRight_HardLink),
		.iRight1 (fullDuplexMux_iRight1_fullDuplexMux_iRight_HardLink),
		.iRight2 (fullDuplexMux_iRight2_fullDuplexMux_iRight_HardLink),
		.iRight3 (fullDuplexMux_iRight3_fullDuplexMux_iRight_HardLink),
		.iRightAddr (fullDuplexMux_iRightAddr_fullDuplexMux_iRightAddr_HardLink),
		.iRightAddrValid (fullDuplexMux_iRightAddrValid_fullDuplexMux_iRightAddrValid_HardLink),
		.oLeft0 (fullDuplexMux_oLeft0_fullDuplexMux_oLeft_HardLink),
		.oLeft1 (fullDuplexMux_oLeft1_fullDuplexMux_oLeft_HardLink),
		.oLeft2 (fullDuplexMux_oLeft2_fullDuplexMux_oLeft_HardLink),
		.oLeft3 (fullDuplexMux_oLeft3_fullDuplexMux_oLeft_HardLink),
		.oRight0 (fullDuplexMux_oRight0_fullDuplexMux_oRight_HardLink),
		.oRight1 (fullDuplexMux_oRight1_fullDuplexMux_oRight_HardLink),
		.oRight2 (fullDuplexMux_oRight2_fullDuplexMux_oRight_HardLink),
		.oRight3 (fullDuplexMux_oRight3_fullDuplexMux_oRight_HardLink),
		.oRight4 (fullDuplexMux_oRight4_fullDuplexMux_oRight_HardLink),
		.oRight5 (fullDuplexMux_oRight5_fullDuplexMux_oRight_HardLink),
		.oRight6 (fullDuplexMux_oRight6_fullDuplexMux_oRight_HardLink),
		.oRight7 (fullDuplexMux_oRight7_fullDuplexMux_oRight_HardLink)
	);
	assign Inputs_MAddr = MAddr;
	assign Inputs_MAddrValid = MAddrValid;
	assign Inputs_MArr[0][9] = MArr0_Payload_DataFlag;
	assign Inputs_MArr[0][8:1] = MArr0_Payload_Data;
	assign Inputs_MArr[0][0] = MArr0_IsActive;
	assign Inputs_MArr[1][9] = MArr1_Payload_DataFlag;
	assign Inputs_MArr[1][8:1] = MArr1_Payload_Data;
	assign Inputs_MArr[1][0] = MArr1_IsActive;
	assign Inputs_MArr[2][9] = MArr2_Payload_DataFlag;
	assign Inputs_MArr[2][8:1] = MArr2_Payload_Data;
	assign Inputs_MArr[2][0] = MArr2_IsActive;
	assign Inputs_MArr[3][9] = MArr3_Payload_DataFlag;
	assign Inputs_MArr[3][8:1] = MArr3_Payload_Data;
	assign Inputs_MArr[3][0] = MArr3_IsActive;
	assign Inputs_MArr[4][9] = MArr4_Payload_DataFlag;
	assign Inputs_MArr[4][8:1] = MArr4_Payload_Data;
	assign Inputs_MArr[4][0] = MArr4_IsActive;
	assign Inputs_MArr[5][9] = MArr5_Payload_DataFlag;
	assign Inputs_MArr[5][8:1] = MArr5_Payload_Data;
	assign Inputs_MArr[5][0] = MArr5_IsActive;
	assign Inputs_MArr[6][9] = MArr6_Payload_DataFlag;
	assign Inputs_MArr[6][8:1] = MArr6_Payload_Data;
	assign Inputs_MArr[6][0] = MArr6_IsActive;
	assign Inputs_MArr[7][9] = MArr7_Payload_DataFlag;
	assign Inputs_MArr[7][8:1] = MArr7_Payload_Data;
	assign Inputs_MArr[7][0] = MArr7_IsActive;
	assign Inputs_SAddr = SAddr;
	assign Inputs_SAddrValid = SAddrValid;
	assign Inputs_SArr[0][9] = SArr0_Payload_DataFlag;
	assign Inputs_SArr[0][8:1] = SArr0_Payload_Data;
	assign Inputs_SArr[0][0] = SArr0_IsActive;
	assign Inputs_SArr[1][9] = SArr1_Payload_DataFlag;
	assign Inputs_SArr[1][8:1] = SArr1_Payload_Data;
	assign Inputs_SArr[1][0] = SArr1_IsActive;
	assign Inputs_SArr[2][9] = SArr2_Payload_DataFlag;
	assign Inputs_SArr[2][8:1] = SArr2_Payload_Data;
	assign Inputs_SArr[2][0] = SArr2_IsActive;
	assign Inputs_SArr[3][9] = SArr3_Payload_DataFlag;
	assign Inputs_SArr[3][8:1] = SArr3_Payload_Data;
	assign Inputs_SArr[3][0] = SArr3_IsActive;
	assign fullDuplexMux_iLeft[0] = Inputs_MArr[0];
	assign fullDuplexMux_iLeft[1] = Inputs_MArr[1];
	assign fullDuplexMux_iLeft[2] = Inputs_MArr[2];
	assign fullDuplexMux_iLeft[3] = Inputs_MArr[3];
	assign fullDuplexMux_iLeft[4] = Inputs_MArr[4];
	assign fullDuplexMux_iLeft[5] = Inputs_MArr[5];
	assign fullDuplexMux_iLeft[6] = Inputs_MArr[6];
	assign fullDuplexMux_iLeft[7] = Inputs_MArr[7];
	assign fullDuplexMux_iLeftAddr = Inputs_MAddr;
	assign fullDuplexMux_iLeftAddrValid = Inputs_MAddrValid;
	assign fullDuplexMux_iRight[0] = Inputs_SArr[0];
	assign fullDuplexMux_iRight[1] = Inputs_SArr[1];
	assign fullDuplexMux_iRight[2] = Inputs_SArr[2];
	assign fullDuplexMux_iRight[3] = Inputs_SArr[3];
	assign fullDuplexMux_iRightAddr = Inputs_SAddr;
	assign fullDuplexMux_iRightAddrValid = Inputs_SAddrValid;
	assign OutMData0_Payload_DataFlag = fullDuplexMux_oLeft[0][9];
	assign OutMData0_Payload_Data = fullDuplexMux_oLeft[0][8:1];
	assign OutMData0_IsActive = fullDuplexMux_oLeft[0][0];
	assign OutMData1_Payload_DataFlag = fullDuplexMux_oLeft[1][9];
	assign OutMData1_Payload_Data = fullDuplexMux_oLeft[1][8:1];
	assign OutMData1_IsActive = fullDuplexMux_oLeft[1][0];
	assign OutMData2_Payload_DataFlag = fullDuplexMux_oLeft[2][9];
	assign OutMData2_Payload_Data = fullDuplexMux_oLeft[2][8:1];
	assign OutMData2_IsActive = fullDuplexMux_oLeft[2][0];
	assign OutMData3_Payload_DataFlag = fullDuplexMux_oLeft[3][9];
	assign OutMData3_Payload_Data = fullDuplexMux_oLeft[3][8:1];
	assign OutMData3_IsActive = fullDuplexMux_oLeft[3][0];
	assign OutSData0_Payload_DataFlag = fullDuplexMux_oRight[0][9];
	assign OutSData0_Payload_Data = fullDuplexMux_oRight[0][8:1];
	assign OutSData0_IsActive = fullDuplexMux_oRight[0][0];
	assign OutSData1_Payload_DataFlag = fullDuplexMux_oRight[1][9];
	assign OutSData1_Payload_Data = fullDuplexMux_oRight[1][8:1];
	assign OutSData1_IsActive = fullDuplexMux_oRight[1][0];
	assign OutSData2_Payload_DataFlag = fullDuplexMux_oRight[2][9];
	assign OutSData2_Payload_Data = fullDuplexMux_oRight[2][8:1];
	assign OutSData2_IsActive = fullDuplexMux_oRight[2][0];
	assign OutSData3_Payload_DataFlag = fullDuplexMux_oRight[3][9];
	assign OutSData3_Payload_Data = fullDuplexMux_oRight[3][8:1];
	assign OutSData3_IsActive = fullDuplexMux_oRight[3][0];
	assign OutSData4_Payload_DataFlag = fullDuplexMux_oRight[4][9];
	assign OutSData4_Payload_Data = fullDuplexMux_oRight[4][8:1];
	assign OutSData4_IsActive = fullDuplexMux_oRight[4][0];
	assign OutSData5_Payload_DataFlag = fullDuplexMux_oRight[5][9];
	assign OutSData5_Payload_Data = fullDuplexMux_oRight[5][8:1];
	assign OutSData5_IsActive = fullDuplexMux_oRight[5][0];
	assign OutSData6_Payload_DataFlag = fullDuplexMux_oRight[6][9];
	assign OutSData6_Payload_Data = fullDuplexMux_oRight[6][8:1];
	assign OutSData6_IsActive = fullDuplexMux_oRight[6][0];
	assign OutSData7_Payload_DataFlag = fullDuplexMux_oRight[7][9];
	assign OutSData7_Payload_Data = fullDuplexMux_oRight[7][8:1];
	assign OutSData7_IsActive = fullDuplexMux_oRight[7][0];
	assign fullDuplexMux_iLeft0_fullDuplexMux_iLeft_HardLink = fullDuplexMux_iLeft[0];
	assign fullDuplexMux_iLeft1_fullDuplexMux_iLeft_HardLink = fullDuplexMux_iLeft[1];
	assign fullDuplexMux_iLeft2_fullDuplexMux_iLeft_HardLink = fullDuplexMux_iLeft[2];
	assign fullDuplexMux_iLeft3_fullDuplexMux_iLeft_HardLink = fullDuplexMux_iLeft[3];
	assign fullDuplexMux_iLeft4_fullDuplexMux_iLeft_HardLink = fullDuplexMux_iLeft[4];
	assign fullDuplexMux_iLeft5_fullDuplexMux_iLeft_HardLink = fullDuplexMux_iLeft[5];
	assign fullDuplexMux_iLeft6_fullDuplexMux_iLeft_HardLink = fullDuplexMux_iLeft[6];
	assign fullDuplexMux_iLeft7_fullDuplexMux_iLeft_HardLink = fullDuplexMux_iLeft[7];
	assign fullDuplexMux_iLeftAddr_fullDuplexMux_iLeftAddr_HardLink = fullDuplexMux_iLeftAddr;
	assign fullDuplexMux_iLeftAddrValid_fullDuplexMux_iLeftAddrValid_HardLink = fullDuplexMux_iLeftAddrValid;
	assign fullDuplexMux_iRight0_fullDuplexMux_iRight_HardLink = fullDuplexMux_iRight[0];
	assign fullDuplexMux_iRight1_fullDuplexMux_iRight_HardLink = fullDuplexMux_iRight[1];
	assign fullDuplexMux_iRight2_fullDuplexMux_iRight_HardLink = fullDuplexMux_iRight[2];
	assign fullDuplexMux_iRight3_fullDuplexMux_iRight_HardLink = fullDuplexMux_iRight[3];
	assign fullDuplexMux_iRightAddr_fullDuplexMux_iRightAddr_HardLink = fullDuplexMux_iRightAddr;
	assign fullDuplexMux_iRightAddrValid_fullDuplexMux_iRightAddrValid_HardLink = fullDuplexMux_iRightAddrValid;
	assign fullDuplexMux_oLeft[0] = fullDuplexMux_oLeft0_fullDuplexMux_oLeft_HardLink;
	assign fullDuplexMux_oLeft[1] = fullDuplexMux_oLeft1_fullDuplexMux_oLeft_HardLink;
	assign fullDuplexMux_oLeft[2] = fullDuplexMux_oLeft2_fullDuplexMux_oLeft_HardLink;
	assign fullDuplexMux_oLeft[3] = fullDuplexMux_oLeft3_fullDuplexMux_oLeft_HardLink;
	assign fullDuplexMux_oRight[0] = fullDuplexMux_oRight0_fullDuplexMux_oRight_HardLink;
	assign fullDuplexMux_oRight[1] = fullDuplexMux_oRight1_fullDuplexMux_oRight_HardLink;
	assign fullDuplexMux_oRight[2] = fullDuplexMux_oRight2_fullDuplexMux_oRight_HardLink;
	assign fullDuplexMux_oRight[3] = fullDuplexMux_oRight3_fullDuplexMux_oRight_HardLink;
	assign fullDuplexMux_oRight[4] = fullDuplexMux_oRight4_fullDuplexMux_oRight_HardLink;
	assign fullDuplexMux_oRight[5] = fullDuplexMux_oRight5_fullDuplexMux_oRight_HardLink;
	assign fullDuplexMux_oRight[6] = fullDuplexMux_oRight6_fullDuplexMux_oRight_HardLink;
	assign fullDuplexMux_oRight[7] = fullDuplexMux_oRight7_fullDuplexMux_oRight_HardLink;
	// [BEGIN USER ARCHITECTURE]
	// [END USER ARCHITECTURE]
endmodule
