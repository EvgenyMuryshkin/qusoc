`timescale 1ns/1ps
`default_nettype none
// PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
// * This file was generated by Quokka FPGA Toolkit.
// * Generated code is your property, do whatever you want with it
// * Place custom code between [BEGIN USER ***] and [END USER ***].
// * CAUTION: All code outside of [USER] scope is subject to regeneration.
// * Bad things happen sometimes in developer's life,
//   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
// * Internal structure of code is subject to change.
//   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
// * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
// * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
//
// DISCLAIMER:
//   Code comes AS-IS, it is your responsibility to make sure it is working as expected
//   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
//
// System configuration name is GenerateModule4_TopLevel, clock frequency is 1Hz, Top-level
// FSM summary
// -- Packages
module GenerateModule4_TopLevel
(
	// [BEGIN USER PORTS]
	// [END USER PORTS]
	input wire iSeed,
	input wire [4:0] iBits,
	output wire [1:0] oData0,
	output wire [2:0] oData1,
	output wire [3:0] oData2,
	output wire [4:0] oData3,
	output wire [5:0] oData4
);
	// [BEGIN USER SIGNALS]
	// [END USER SIGNALS]
	localparam HiSignal = 1'b1;
	localparam LoSignal = 1'b0;
	wire Zero = 1'b0;
	wire One = 1'b1;
	wire true = 1'b1;
	wire false = 1'b0;
	wire [2: 0] size = 3'b101;
	wire GenerateModule_L83F25T26_Expr = 1'b0;
	wire GenerateModule_L86F13L93T14_1_idx = 1'b1;
	wire [1: 0] GenerateModule_L86F13L93T14_2_idx = 2'b10;
	wire [1: 0] GenerateModule_L95F13L102T14_3_idx = 2'b11;
	wire [2: 0] GenerateModule_L95F13L102T14_4_idx = 3'b100;
	wire Inputs_iSeed;
	wire [4: 0] Inputs_iBits;
	wire nested0_iData;
	wire nested0_iBit;
	wire [1: 0] nested0_oData;
	wire nested0_oBit;
	wire [1: 0] nested1_iData;
	wire nested1_iBit;
	wire [2: 0] nested1_oData;
	wire nested1_oBit;
	wire [2: 0] nested2_iData;
	wire nested2_iBit;
	wire [3: 0] nested2_oData;
	wire nested2_oBit;
	reg [3: 0] nested3_iData = 4'b0000;
	reg nested3_iBit = 1'b0;
	wire [4: 0] nested3_oData;
	wire nested3_oBit;
	reg [4: 0] nested4_iData = 5'b00000;
	reg nested4_iBit = 1'b0;
	wire [5: 0] nested4_oData;
	wire nested4_oBit;
	wire nested0iDatanested0_iDataHardLink;
	wire nested0iBitnested0_iBitHardLink;
	wire [1: 0] nested0oDatanested0_oDataHardLink;
	wire nested0oBitnested0_oBitHardLink;
	wire [1: 0] nested1iDatanested1_iDataHardLink;
	wire nested1iBitnested1_iBitHardLink;
	wire [2: 0] nested1oDatanested1_oDataHardLink;
	wire nested1oBitnested1_oBitHardLink;
	wire [2: 0] nested2iDatanested2_iDataHardLink;
	wire nested2iBitnested2_iBitHardLink;
	wire [3: 0] nested2oDatanested2_oDataHardLink;
	wire nested2oBitnested2_oBitHardLink;
	wire [3: 0] nested3iDatanested3_iDataHardLink;
	wire nested3iBitnested3_iBitHardLink;
	wire [4: 0] nested3oDatanested3_oDataHardLink;
	wire nested3oBitnested3_oBitHardLink;
	wire [4: 0] nested4iDatanested4_iDataHardLink;
	wire nested4iBitnested4_iBitHardLink;
	wire [5: 0] nested4oDatanested4_oDataHardLink;
	wire nested4oBitnested4_oBitHardLink;
	GenerateModule4_TopLevel_nested0
	GenerateModule4_TopLevel_nested0
	(
		// [BEGIN USER MAP FOR nested0]
		// [END USER MAP FOR nested0]
		.iData (nested0iDatanested0_iDataHardLink),
		.iBit (nested0iBitnested0_iBitHardLink),
		.oData (nested0oDatanested0_oDataHardLink),
		.oBit (nested0oBitnested0_oBitHardLink)
	);
	GenerateModule4_TopLevel_nested1
	GenerateModule4_TopLevel_nested1
	(
		// [BEGIN USER MAP FOR nested1]
		// [END USER MAP FOR nested1]
		.iData (nested1iDatanested1_iDataHardLink),
		.iBit (nested1iBitnested1_iBitHardLink),
		.oData (nested1oDatanested1_oDataHardLink),
		.oBit (nested1oBitnested1_oBitHardLink)
	);
	GenerateModule4_TopLevel_nested2
	GenerateModule4_TopLevel_nested2
	(
		// [BEGIN USER MAP FOR nested2]
		// [END USER MAP FOR nested2]
		.iData (nested2iDatanested2_iDataHardLink),
		.iBit (nested2iBitnested2_iBitHardLink),
		.oData (nested2oDatanested2_oDataHardLink),
		.oBit (nested2oBitnested2_oBitHardLink)
	);
	GenerateModule4_TopLevel_nested3
	GenerateModule4_TopLevel_nested3
	(
		// [BEGIN USER MAP FOR nested3]
		// [END USER MAP FOR nested3]
		.iData (nested3iDatanested3_iDataHardLink),
		.iBit (nested3iBitnested3_iBitHardLink),
		.oData (nested3oDatanested3_oDataHardLink),
		.oBit (nested3oBitnested3_oBitHardLink)
	);
	GenerateModule4_TopLevel_nested4
	GenerateModule4_TopLevel_nested4
	(
		// [BEGIN USER MAP FOR nested4]
		// [END USER MAP FOR nested4]
		.iData (nested4iDatanested4_iDataHardLink),
		.iBit (nested4iBitnested4_iBitHardLink),
		.oData (nested4oDatanested4_oDataHardLink),
		.oBit (nested4oBitnested4_oBitHardLink)
	);
	assign Inputs_iSeed = iSeed;
	assign Inputs_iBits = iBits;
	assign nested0_iData = GenerateModule_L83F25T26_Expr;
	assign nested0_iBit = Inputs_iBits[0];
	assign nested1_iData = nested0_oData;
	assign nested1_iBit = Inputs_iBits[1];
	assign nested2_iData = nested1_oData;
	assign nested2_iBit = Inputs_iBits[2];
	assign oData0 = nested0_oData;
	assign oData1 = nested1_oData;
	assign oData2 = nested2_oData;
	assign oData3 = nested3_oData;
	assign oData4 = nested4_oData;
	assign nested0iDatanested0_iDataHardLink = nested0_iData;
	assign nested0iBitnested0_iBitHardLink = nested0_iBit;
	assign nested0_oData = nested0oDatanested0_oDataHardLink;
	assign nested0_oBit = nested0oBitnested0_oBitHardLink;
	assign nested1iDatanested1_iDataHardLink = nested1_iData;
	assign nested1iBitnested1_iBitHardLink = nested1_iBit;
	assign nested1_oData = nested1oDatanested1_oDataHardLink;
	assign nested1_oBit = nested1oBitnested1_oBitHardLink;
	assign nested2iDatanested2_iDataHardLink = nested2_iData;
	assign nested2iBitnested2_iBitHardLink = nested2_iBit;
	assign nested2_oData = nested2oDatanested2_oDataHardLink;
	assign nested2_oBit = nested2oBitnested2_oBitHardLink;
	assign nested3iDatanested3_iDataHardLink = nested3_iData;
	assign nested3iBitnested3_iBitHardLink = nested3_iBit;
	assign nested3_oData = nested3oDatanested3_oDataHardLink;
	assign nested3_oBit = nested3oBitnested3_oBitHardLink;
	assign nested4iDatanested4_iDataHardLink = nested4_iData;
	assign nested4iBitnested4_iBitHardLink = nested4_iBit;
	assign nested4_oData = nested4oDatanested4_oDataHardLink;
	assign nested4_oBit = nested4oBitnested4_oBitHardLink;
	// [BEGIN USER ARCHITECTURE]
	// [END USER ARCHITECTURE]
endmodule
