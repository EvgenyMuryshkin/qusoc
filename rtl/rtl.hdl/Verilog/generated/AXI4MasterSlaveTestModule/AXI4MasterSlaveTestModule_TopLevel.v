`timescale 1ns/1ps
`default_nettype none
// PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
// * This file was generated by Quokka FPGA Toolkit.
// * Generated code is your property, do whatever you want with it
// * Place custom code between [BEGIN USER ***] and [END USER ***].
// * CAUTION: All code outside of [USER] scope is subject to regeneration.
// * Bad things happen sometimes in developer's life,
//   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
// * Internal structure of code is subject to change.
//   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
// * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
// * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
//
// DISCLAIMER:
//   Code comes AS-IS, it is your responsibility to make sure it is working as expected
//   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
//
// System configuration name is AXI4MasterSlaveTestModule_TopLevel, clock frequency is 1Hz, Top-level
// FSM summary
// -- Packages
module AXI4MasterSlaveTestModule_TopLevel
(
	// [BEGIN USER PORTS]
	// [END USER PORTS]
	input wire Clock,
	input wire Reset,
	input wire [31:0] InData,
	input wire MRE,
	input wire MWE,
	input wire SWE,
	input wire [3:0] WSTRB,
	output wire BVALID,
	output wire RACK,
	output wire [31:0] ReadData,
	output wire [31:0] RegisterData,
	output wire RVALID,
	output wire WACK
);
	// [BEGIN USER SIGNALS]
	// [END USER SIGNALS]
	localparam HiSignal = 1'b1;
	localparam LoSignal = 1'b0;
	wire Zero = 1'b0;
	wire One = 1'b1;
	wire true = 1'b1;
	wire false = 1'b0;
	wire [7: 0] State_ReadDataDefault = 8'b00000000;
	wire AXI4MasterSlaveTestModule_L58F30T31_Expr = 1'b0;
	wire AXI4MasterSlaveTestModule_L59F30T31_Expr = 1'b0;
	wire [31: 0] Inputs_InData;
	wire Inputs_MRE;
	wire Inputs_MWE;
	wire Inputs_SWE;
	wire [3: 0] Inputs_WSTRB;
	wire [101: 0] master_Master;
	wire [73: 0] master_S2M;
	wire [221: 0] master_M2S;
	wire master_RACK;
	wire master_WACK;
	wire reg_inWE;
	wire [221: 0] reg_M2S;
	wire reg_outACK;
	wire reg_outWritten;
	wire [73: 0] reg_S2M;
	wire [31: 0] AXI4MasterSlaveTestModule_L31F40T71_Source;
	wire [31: 0] AXI4MasterSlaveTestModule_L32F44T72_Source;
	wire [101: 0] master_Master_master_Master_HardLink;
	wire [73: 0] master_S2M_master_S2M_HardLink;
	wire [221: 0] master_M2S_master_M2S_HardLink;
	wire master_RACK_master_RACK_HardLink;
	wire [7: 0] master_RDATA0_master_RDATA_HardLink;
	wire [7: 0] master_RDATA1_master_RDATA_HardLink;
	wire [7: 0] master_RDATA2_master_RDATA_HardLink;
	wire [7: 0] master_RDATA3_master_RDATA_HardLink;
	wire master_WACK_master_WACK_HardLink;
	wire [7: 0] reg_inWDATA0_reg_inWDATA_HardLink;
	wire [7: 0] reg_inWDATA1_reg_inWDATA_HardLink;
	wire [7: 0] reg_inWDATA2_reg_inWDATA_HardLink;
	wire [7: 0] reg_inWDATA3_reg_inWDATA_HardLink;
	wire reg_inWE_reg_inWE_HardLink;
	wire [221: 0] reg_M2S_reg_M2S_HardLink;
	wire reg_outACK_reg_outACK_HardLink;
	wire [7: 0] reg_outData0_reg_outData_HardLink;
	wire [7: 0] reg_outData1_reg_outData_HardLink;
	wire [7: 0] reg_outData2_reg_outData_HardLink;
	wire [7: 0] reg_outData3_reg_outData_HardLink;
	wire reg_outWritten_reg_outWritten_HardLink;
	wire [73: 0] reg_S2M_reg_S2M_HardLink;
	integer State_ReadData_Iterator;
	reg [7 : 0] State_ReadData [0 : 3];
	initial
	begin : Init_State_ReadData
		for (State_ReadData_Iterator = 0; State_ReadData_Iterator < 4; State_ReadData_Iterator = State_ReadData_Iterator + 1)
			State_ReadData[State_ReadData_Iterator] = 0;
	end
	integer NextState_ReadData_Iterator;
	reg [7 : 0] NextState_ReadData [0 : 3];
	initial
	begin : Init_NextState_ReadData
		for (NextState_ReadData_Iterator = 0; NextState_ReadData_Iterator < 4; NextState_ReadData_Iterator = NextState_ReadData_Iterator + 1)
			NextState_ReadData[NextState_ReadData_Iterator] = 0;
	end
	wire [7 : 0] master_RDATA [0 : 3];
	wire [7 : 0] reg_inWDATA [0 : 3];
	wire [7 : 0] reg_outData [0 : 3];
	wire BoardSignals_Clock;
	wire BoardSignals_Reset;
	wire BoardSignals_Running;
	wire BoardSignals_Starting;
	wire BoardSignals_Started;
	reg InternalReset = 1'b0;
	work_Quokka_BoardSignalsProc BoardSignalsConnection(BoardSignals_Clock, BoardSignals_Reset, BoardSignals_Running, BoardSignals_Starting, BoardSignals_Started, Clock, Reset, InternalReset);
	always @ (posedge Clock)
	begin
		if ((Reset == 1))
		begin
			for (State_ReadData_Iterator = 0; (State_ReadData_Iterator < 4); State_ReadData_Iterator = (State_ReadData_Iterator + 1))
			begin
				State_ReadData[State_ReadData_Iterator] <= State_ReadDataDefault;
			end
		end
		else
		begin
			for (State_ReadData_Iterator = 0; (State_ReadData_Iterator < 4); State_ReadData_Iterator = (State_ReadData_Iterator + 1))
			begin
				State_ReadData[State_ReadData_Iterator] <= NextState_ReadData[State_ReadData_Iterator];
			end
		end
	end
	AXI4MasterSlaveTestModule_TopLevel_master
	AXI4MasterSlaveTestModule_TopLevel_master
	(
		// [BEGIN USER MAP FOR master]
		// [END USER MAP FOR master]
		.BoardSignals_Clock (BoardSignals_Clock),
		.BoardSignals_Reset (BoardSignals_Reset),
		.BoardSignals_Running (BoardSignals_Running),
		.BoardSignals_Starting (BoardSignals_Starting),
		.BoardSignals_Started (BoardSignals_Started),
		.Master (master_Master_master_Master_HardLink),
		.S2M (master_S2M_master_S2M_HardLink),
		.M2S (master_M2S_master_M2S_HardLink),
		.RACK (master_RACK_master_RACK_HardLink),
		.RDATA0 (master_RDATA0_master_RDATA_HardLink),
		.RDATA1 (master_RDATA1_master_RDATA_HardLink),
		.RDATA2 (master_RDATA2_master_RDATA_HardLink),
		.RDATA3 (master_RDATA3_master_RDATA_HardLink),
		.WACK (master_WACK_master_WACK_HardLink)
	);
	AXI4MasterSlaveTestModule_TopLevel_reg
	AXI4MasterSlaveTestModule_TopLevel_reg
	(
		// [BEGIN USER MAP FOR reg]
		// [END USER MAP FOR reg]
		.BoardSignals_Clock (BoardSignals_Clock),
		.BoardSignals_Reset (BoardSignals_Reset),
		.BoardSignals_Running (BoardSignals_Running),
		.BoardSignals_Starting (BoardSignals_Starting),
		.BoardSignals_Started (BoardSignals_Started),
		.inWDATA0 (reg_inWDATA0_reg_inWDATA_HardLink),
		.inWDATA1 (reg_inWDATA1_reg_inWDATA_HardLink),
		.inWDATA2 (reg_inWDATA2_reg_inWDATA_HardLink),
		.inWDATA3 (reg_inWDATA3_reg_inWDATA_HardLink),
		.inWE (reg_inWE_reg_inWE_HardLink),
		.M2S (reg_M2S_reg_M2S_HardLink),
		.outACK (reg_outACK_reg_outACK_HardLink),
		.outData0 (reg_outData0_reg_outData_HardLink),
		.outData1 (reg_outData1_reg_outData_HardLink),
		.outData2 (reg_outData2_reg_outData_HardLink),
		.outData3 (reg_outData3_reg_outData_HardLink),
		.outWritten (reg_outWritten_reg_outWritten_HardLink),
		.S2M (reg_S2M_reg_S2M_HardLink)
	);
	always @ (*)
	begin
		NextState_ReadData_Iterator = 0;
		for (NextState_ReadData_Iterator = 0; (NextState_ReadData_Iterator < 4); NextState_ReadData_Iterator = (NextState_ReadData_Iterator + 1))
		begin
			NextState_ReadData[NextState_ReadData_Iterator] = State_ReadData[NextState_ReadData_Iterator];
		end
		if ((reg_S2M[52] == 1))
		begin
			NextState_ReadData[0] = reg_S2M[16:9];
			NextState_ReadData[1] = reg_S2M[24:17];
			NextState_ReadData[2] = reg_S2M[32:25];
			NextState_ReadData[3] = reg_S2M[40:33];
		end
	end
	assign Inputs_InData = InData;
	assign Inputs_MRE = MRE;
	assign Inputs_MWE = MWE;
	assign Inputs_SWE = SWE;
	assign Inputs_WSTRB = WSTRB;
	assign reg_inWDATA[3] = Inputs_InData[31:24];
	assign reg_inWDATA[2] = Inputs_InData[23:16];
	assign reg_inWDATA[1] = Inputs_InData[15:8];
	assign reg_inWDATA[0] = Inputs_InData[7:0];
	assign reg_inWE = Inputs_SWE;
	assign reg_M2S[221:84] = master_M2S[221:84];
	assign reg_M2S[83:0] = master_M2S[83:0];
	assign master_Master[101:98] = Inputs_WSTRB;
	assign master_Master[97] = Inputs_MWE;
	assign master_Master[96:65] = Inputs_InData;
	assign master_Master[64] = Inputs_MRE;
	assign master_Master[63:32] = { {31{1'b0}}, AXI4MasterSlaveTestModule_L59F30T31_Expr };
	assign master_Master[31:0] = { {31{1'b0}}, AXI4MasterSlaveTestModule_L58F30T31_Expr };
	assign master_S2M[73:53] = reg_S2M[73:53];
	assign master_S2M[52:0] = reg_S2M[52:0];
	assign BVALID = reg_S2M[72];
	assign RACK = master_RACK;
	assign AXI4MasterSlaveTestModule_L31F40T71_Source = { State_ReadData[3], State_ReadData[2], State_ReadData[1], State_ReadData[0] };
	assign ReadData = AXI4MasterSlaveTestModule_L31F40T71_Source;
	assign AXI4MasterSlaveTestModule_L32F44T72_Source = { reg_outData[3], reg_outData[2], reg_outData[1], reg_outData[0] };
	assign RegisterData = AXI4MasterSlaveTestModule_L32F44T72_Source;
	assign RVALID = reg_S2M[52];
	assign WACK = master_WACK;
	assign master_Master_master_Master_HardLink = master_Master;
	assign master_S2M_master_S2M_HardLink = master_S2M;
	assign master_M2S = master_M2S_master_M2S_HardLink;
	assign master_RACK = master_RACK_master_RACK_HardLink;
	assign master_RDATA[0] = master_RDATA0_master_RDATA_HardLink;
	assign master_RDATA[1] = master_RDATA1_master_RDATA_HardLink;
	assign master_RDATA[2] = master_RDATA2_master_RDATA_HardLink;
	assign master_RDATA[3] = master_RDATA3_master_RDATA_HardLink;
	assign master_WACK = master_WACK_master_WACK_HardLink;
	assign reg_inWDATA0_reg_inWDATA_HardLink = reg_inWDATA[0];
	assign reg_inWDATA1_reg_inWDATA_HardLink = reg_inWDATA[1];
	assign reg_inWDATA2_reg_inWDATA_HardLink = reg_inWDATA[2];
	assign reg_inWDATA3_reg_inWDATA_HardLink = reg_inWDATA[3];
	assign reg_inWE_reg_inWE_HardLink = reg_inWE;
	assign reg_M2S_reg_M2S_HardLink = reg_M2S;
	assign reg_outACK = reg_outACK_reg_outACK_HardLink;
	assign reg_outData[0] = reg_outData0_reg_outData_HardLink;
	assign reg_outData[1] = reg_outData1_reg_outData_HardLink;
	assign reg_outData[2] = reg_outData2_reg_outData_HardLink;
	assign reg_outData[3] = reg_outData3_reg_outData_HardLink;
	assign reg_outWritten = reg_outWritten_reg_outWritten_HardLink;
	assign reg_S2M = reg_S2M_reg_S2M_HardLink;
	// [BEGIN USER ARCHITECTURE]
	// [END USER ARCHITECTURE]
endmodule
