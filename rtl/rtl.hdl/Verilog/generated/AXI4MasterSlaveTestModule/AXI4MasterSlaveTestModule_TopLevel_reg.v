`timescale 1ns/1ps
`default_nettype none
// PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
// * This file was generated by Quokka FPGA Toolkit.
// * Generated code is your property, do whatever you want with it
// * Place custom code between [BEGIN USER ***] and [END USER ***].
// * CAUTION: All code outside of [USER] scope is subject to regeneration.
// * Bad things happen sometimes in developer's life,
//   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
// * Internal structure of code is subject to change.
//   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
// * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
// * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
//
// DISCLAIMER:
//   Code comes AS-IS, it is your responsibility to make sure it is working as expected
//   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
//
// System configuration name is AXI4MasterSlaveTestModule_TopLevel_reg, clock frequency is 1Hz, Embedded
// FSM summary
// -- Packages
module AXI4MasterSlaveTestModule_TopLevel_reg
(
	// [BEGIN USER PORTS]
	// [END USER PORTS]
	input wire BoardSignals_Clock,
	input wire BoardSignals_Reset,
	input wire BoardSignals_Running,
	input wire BoardSignals_Starting,
	input wire BoardSignals_Started,
	input wire [7:0] inWDATA0,
	input wire [7:0] inWDATA1,
	input wire [7:0] inWDATA2,
	input wire [7:0] inWDATA3,
	input wire inWE,
	input wire [31:0] M2S_AR_ARADDR,
	input wire [1:0] M2S_AR_ARBURST,
	input wire [3:0] M2S_AR_ARCACHE,
	input wire [7:0] M2S_AR_ARID,
	input wire [7:0] M2S_AR_ARLEN,
	input wire [1:0] M2S_AR_ARLOCK,
	input wire [2:0] M2S_AR_ARPROT,
	input wire [3:0] M2S_AR_ARQOS,
	input wire [7:0] M2S_AR_ARREGION,
	input wire [2:0] M2S_AR_ARSIZE,
	input wire [7:0] M2S_AR_ARUSER,
	input wire M2S_AR_ARVALID,
	input wire [31:0] M2S_AW_AWADDR,
	input wire [1:0] M2S_AW_AWBURST,
	input wire [3:0] M2S_AW_AWCACHE,
	input wire [7:0] M2S_AW_AWID,
	input wire [7:0] M2S_AW_AWLEN,
	input wire [1:0] M2S_AW_AWLOCK,
	input wire [2:0] M2S_AW_AWPROT,
	input wire [3:0] M2S_AW_AWQOS,
	input wire [7:0] M2S_AW_AWREGION,
	input wire [2:0] M2S_AW_AWSIZE,
	input wire [7:0] M2S_AW_AWUSER,
	input wire M2S_AW_AWVALID,
	input wire M2S_B_BREADY,
	input wire M2S_R_RREADY,
	input wire [7:0] M2S_W_WDATA0,
	input wire [7:0] M2S_W_WDATA1,
	input wire [7:0] M2S_W_WDATA2,
	input wire [7:0] M2S_W_WDATA3,
	input wire [7:0] M2S_W_WID,
	input wire M2S_W_WLAST,
	input wire [3:0] M2S_W_WSTRB,
	input wire [7:0] M2S_W_WUSER,
	input wire M2S_W_WVALID,
	output wire outACK,
	output wire [7:0] outData0,
	output wire [7:0] outData1,
	output wire [7:0] outData2,
	output wire [7:0] outData3,
	output wire outWritten,
	output wire S2M_AR_ARREADY,
	output wire S2M_AW_AWREADY,
	output wire [7:0] S2M_B_BID,
	output wire [1:0] S2M_B_BRESP,
	output wire [7:0] S2M_B_BUSER,
	output wire S2M_B_BVALID,
	output wire [7:0] S2M_R_RDATA0,
	output wire [7:0] S2M_R_RDATA1,
	output wire [7:0] S2M_R_RDATA2,
	output wire [7:0] S2M_R_RDATA3,
	output wire [7:0] S2M_R_RID,
	output wire S2M_R_RLAST,
	output wire [1:0] S2M_R_RRESP,
	output wire [7:0] S2M_R_RUSER,
	output wire S2M_R_RVALID,
	output wire S2M_W_WREADY
);
	// [BEGIN USER SIGNALS]
	// [END USER SIGNALS]
	localparam HiSignal = 1'b1;
	localparam LoSignal = 1'b0;
	wire Zero = 1'b0;
	wire One = 1'b1;
	wire true = 1'b1;
	wire false = 1'b0;
	wire [7: 0] State_bytesDefault = 8'b00000000;
	wire [1: 0] size = 2'b10;
	wire AXI4RegisterModule_L58F29T33_Expr = 1'b1;
	wire AXI4RegisterModule_L59F28T32_Expr = 1'b1;
	wire AXI4RegisterModule_L60F29T33_Expr = 1'b1;
	wire AXI4RegisterModule_L62F28T32_Expr = 1'b1;
	wire Inputs_inWE;
	wire [31: 0] Inputs_M2S_AR_ARADDR;
	wire [1: 0] Inputs_M2S_AR_ARBURST;
	wire [3: 0] Inputs_M2S_AR_ARCACHE;
	wire [7: 0] Inputs_M2S_AR_ARID;
	wire [7: 0] Inputs_M2S_AR_ARLEN;
	wire [1: 0] Inputs_M2S_AR_ARLOCK;
	wire [2: 0] Inputs_M2S_AR_ARPROT;
	wire [3: 0] Inputs_M2S_AR_ARQOS;
	wire [7: 0] Inputs_M2S_AR_ARREGION;
	wire [2: 0] Inputs_M2S_AR_ARSIZE;
	wire [7: 0] Inputs_M2S_AR_ARUSER;
	wire Inputs_M2S_AR_ARVALID;
	wire [31: 0] Inputs_M2S_AW_AWADDR;
	wire [1: 0] Inputs_M2S_AW_AWBURST;
	wire [3: 0] Inputs_M2S_AW_AWCACHE;
	wire [7: 0] Inputs_M2S_AW_AWID;
	wire [7: 0] Inputs_M2S_AW_AWLEN;
	wire [1: 0] Inputs_M2S_AW_AWLOCK;
	wire [2: 0] Inputs_M2S_AW_AWPROT;
	wire [3: 0] Inputs_M2S_AW_AWQOS;
	wire [7: 0] Inputs_M2S_AW_AWREGION;
	wire [2: 0] Inputs_M2S_AW_AWSIZE;
	wire [7: 0] Inputs_M2S_AW_AWUSER;
	wire Inputs_M2S_AW_AWVALID;
	wire Inputs_M2S_B_BREADY;
	wire Inputs_M2S_R_RREADY;
	wire [7: 0] Inputs_M2S_W_WID;
	wire Inputs_M2S_W_WLAST;
	wire [3: 0] Inputs_M2S_W_WSTRB;
	wire [7: 0] Inputs_M2S_W_WUSER;
	wire Inputs_M2S_W_WVALID;
	reg NextState_Written;
	wire axiSlave_inARREADY;
	wire axiSlave_inAWREADY;
	wire axiSlave_inBVALID;
	wire axiSlave_inRVALID;
	wire axiSlave_inWREADY;
	wire [31: 0] axiSlave_M2S_AR_ARADDR;
	wire [1: 0] axiSlave_M2S_AR_ARBURST;
	wire [3: 0] axiSlave_M2S_AR_ARCACHE;
	wire [7: 0] axiSlave_M2S_AR_ARID;
	wire [7: 0] axiSlave_M2S_AR_ARLEN;
	wire [1: 0] axiSlave_M2S_AR_ARLOCK;
	wire [2: 0] axiSlave_M2S_AR_ARPROT;
	wire [3: 0] axiSlave_M2S_AR_ARQOS;
	wire [7: 0] axiSlave_M2S_AR_ARREGION;
	wire [2: 0] axiSlave_M2S_AR_ARSIZE;
	wire [7: 0] axiSlave_M2S_AR_ARUSER;
	wire axiSlave_M2S_AR_ARVALID;
	wire [31: 0] axiSlave_M2S_AW_AWADDR;
	wire [1: 0] axiSlave_M2S_AW_AWBURST;
	wire [3: 0] axiSlave_M2S_AW_AWCACHE;
	wire [7: 0] axiSlave_M2S_AW_AWID;
	wire [7: 0] axiSlave_M2S_AW_AWLEN;
	wire [1: 0] axiSlave_M2S_AW_AWLOCK;
	wire [2: 0] axiSlave_M2S_AW_AWPROT;
	wire [3: 0] axiSlave_M2S_AW_AWQOS;
	wire [7: 0] axiSlave_M2S_AW_AWREGION;
	wire [2: 0] axiSlave_M2S_AW_AWSIZE;
	wire [7: 0] axiSlave_M2S_AW_AWUSER;
	wire axiSlave_M2S_AW_AWVALID;
	wire axiSlave_M2S_B_BREADY;
	wire axiSlave_M2S_R_RREADY;
	wire [7: 0] axiSlave_M2S_W_WID;
	wire axiSlave_M2S_W_WLAST;
	wire [3: 0] axiSlave_M2S_W_WSTRB;
	wire [7: 0] axiSlave_M2S_W_WUSER;
	wire axiSlave_M2S_W_WVALID;
	wire [31: 0] axiSlave_outARADDR;
	wire axiSlave_outARREADYConfirming;
	wire axiSlave_outARVALID;
	wire [31: 0] axiSlave_outAWADDR;
	wire axiSlave_outAWREADYConfirming;
	wire axiSlave_outAWVALID;
	wire axiSlave_outReadTXCompleting;
	wire axiSlave_outWREADYConfirming;
	wire axiSlave_outWriteTXCompleting;
	wire [3: 0] axiSlave_outWSTRB;
	wire axiSlave_outWVALID;
	wire axiSlave_S2M_AR_ARREADY;
	wire axiSlave_S2M_AW_AWREADY;
	wire [7: 0] axiSlave_S2M_B_BID;
	wire [1: 0] axiSlave_S2M_B_BRESP;
	wire [7: 0] axiSlave_S2M_B_BUSER;
	wire axiSlave_S2M_B_BVALID;
	wire [7: 0] axiSlave_S2M_R_RID;
	wire axiSlave_S2M_R_RLAST;
	wire [1: 0] axiSlave_S2M_R_RRESP;
	wire [7: 0] axiSlave_S2M_R_RUSER;
	wire axiSlave_S2M_R_RVALID;
	wire axiSlave_S2M_W_WREADY;
	wire axiSlave_inARREADY_axiSlave_inARREADY_HardLink;
	wire axiSlave_inAWREADY_axiSlave_inAWREADY_HardLink;
	wire axiSlave_inBVALID_axiSlave_inBVALID_HardLink;
	wire [7: 0] axiSlave_inRDATA0_axiSlave_inRDATA_HardLink;
	wire [7: 0] axiSlave_inRDATA1_axiSlave_inRDATA_HardLink;
	wire [7: 0] axiSlave_inRDATA2_axiSlave_inRDATA_HardLink;
	wire [7: 0] axiSlave_inRDATA3_axiSlave_inRDATA_HardLink;
	wire axiSlave_inRVALID_axiSlave_inRVALID_HardLink;
	wire axiSlave_inWREADY_axiSlave_inWREADY_HardLink;
	wire [31: 0] axiSlave_M2S_AR_ARADDR_axiSlave_M2S_AR_ARADDR_HardLink;
	wire [1: 0] axiSlave_M2S_AR_ARBURST_axiSlave_M2S_AR_ARBURST_HardLink;
	wire [3: 0] axiSlave_M2S_AR_ARCACHE_axiSlave_M2S_AR_ARCACHE_HardLink;
	wire [7: 0] axiSlave_M2S_AR_ARID_axiSlave_M2S_AR_ARID_HardLink;
	wire [7: 0] axiSlave_M2S_AR_ARLEN_axiSlave_M2S_AR_ARLEN_HardLink;
	wire [1: 0] axiSlave_M2S_AR_ARLOCK_axiSlave_M2S_AR_ARLOCK_HardLink;
	wire [2: 0] axiSlave_M2S_AR_ARPROT_axiSlave_M2S_AR_ARPROT_HardLink;
	wire [3: 0] axiSlave_M2S_AR_ARQOS_axiSlave_M2S_AR_ARQOS_HardLink;
	wire [7: 0] axiSlave_M2S_AR_ARREGION_axiSlave_M2S_AR_ARREGION_HardLink;
	wire [2: 0] axiSlave_M2S_AR_ARSIZE_axiSlave_M2S_AR_ARSIZE_HardLink;
	wire [7: 0] axiSlave_M2S_AR_ARUSER_axiSlave_M2S_AR_ARUSER_HardLink;
	wire axiSlave_M2S_AR_ARVALID_axiSlave_M2S_AR_ARVALID_HardLink;
	wire [31: 0] axiSlave_M2S_AW_AWADDR_axiSlave_M2S_AW_AWADDR_HardLink;
	wire [1: 0] axiSlave_M2S_AW_AWBURST_axiSlave_M2S_AW_AWBURST_HardLink;
	wire [3: 0] axiSlave_M2S_AW_AWCACHE_axiSlave_M2S_AW_AWCACHE_HardLink;
	wire [7: 0] axiSlave_M2S_AW_AWID_axiSlave_M2S_AW_AWID_HardLink;
	wire [7: 0] axiSlave_M2S_AW_AWLEN_axiSlave_M2S_AW_AWLEN_HardLink;
	wire [1: 0] axiSlave_M2S_AW_AWLOCK_axiSlave_M2S_AW_AWLOCK_HardLink;
	wire [2: 0] axiSlave_M2S_AW_AWPROT_axiSlave_M2S_AW_AWPROT_HardLink;
	wire [3: 0] axiSlave_M2S_AW_AWQOS_axiSlave_M2S_AW_AWQOS_HardLink;
	wire [7: 0] axiSlave_M2S_AW_AWREGION_axiSlave_M2S_AW_AWREGION_HardLink;
	wire [2: 0] axiSlave_M2S_AW_AWSIZE_axiSlave_M2S_AW_AWSIZE_HardLink;
	wire [7: 0] axiSlave_M2S_AW_AWUSER_axiSlave_M2S_AW_AWUSER_HardLink;
	wire axiSlave_M2S_AW_AWVALID_axiSlave_M2S_AW_AWVALID_HardLink;
	wire axiSlave_M2S_B_BREADY_axiSlave_M2S_B_BREADY_HardLink;
	wire axiSlave_M2S_R_RREADY_axiSlave_M2S_R_RREADY_HardLink;
	wire [7: 0] axiSlave_M2S_W_WDATA0_axiSlave_M2S_W_WDATA_HardLink;
	wire [7: 0] axiSlave_M2S_W_WDATA1_axiSlave_M2S_W_WDATA_HardLink;
	wire [7: 0] axiSlave_M2S_W_WDATA2_axiSlave_M2S_W_WDATA_HardLink;
	wire [7: 0] axiSlave_M2S_W_WDATA3_axiSlave_M2S_W_WDATA_HardLink;
	wire [7: 0] axiSlave_M2S_W_WID_axiSlave_M2S_W_WID_HardLink;
	wire axiSlave_M2S_W_WLAST_axiSlave_M2S_W_WLAST_HardLink;
	wire [3: 0] axiSlave_M2S_W_WSTRB_axiSlave_M2S_W_WSTRB_HardLink;
	wire [7: 0] axiSlave_M2S_W_WUSER_axiSlave_M2S_W_WUSER_HardLink;
	wire axiSlave_M2S_W_WVALID_axiSlave_M2S_W_WVALID_HardLink;
	wire [31: 0] axiSlave_outARADDR_axiSlave_outARADDR_HardLink;
	wire axiSlave_outARREADYConfirming_axiSlave_outARREADYConfirming_HardLink;
	wire axiSlave_outARVALID_axiSlave_outARVALID_HardLink;
	wire [31: 0] axiSlave_outAWADDR_axiSlave_outAWADDR_HardLink;
	wire axiSlave_outAWREADYConfirming_axiSlave_outAWREADYConfirming_HardLink;
	wire axiSlave_outAWVALID_axiSlave_outAWVALID_HardLink;
	wire axiSlave_outReadTXCompleting_axiSlave_outReadTXCompleting_HardLink;
	wire [7: 0] axiSlave_outWDATA0_axiSlave_outWDATA_HardLink;
	wire [7: 0] axiSlave_outWDATA1_axiSlave_outWDATA_HardLink;
	wire [7: 0] axiSlave_outWDATA2_axiSlave_outWDATA_HardLink;
	wire [7: 0] axiSlave_outWDATA3_axiSlave_outWDATA_HardLink;
	wire axiSlave_outWREADYConfirming_axiSlave_outWREADYConfirming_HardLink;
	wire axiSlave_outWriteTXCompleting_axiSlave_outWriteTXCompleting_HardLink;
	wire [3: 0] axiSlave_outWSTRB_axiSlave_outWSTRB_HardLink;
	wire axiSlave_outWVALID_axiSlave_outWVALID_HardLink;
	wire axiSlave_S2M_AR_ARREADY_axiSlave_S2M_AR_ARREADY_HardLink;
	wire axiSlave_S2M_AW_AWREADY_axiSlave_S2M_AW_AWREADY_HardLink;
	wire [7: 0] axiSlave_S2M_B_BID_axiSlave_S2M_B_BID_HardLink;
	wire [1: 0] axiSlave_S2M_B_BRESP_axiSlave_S2M_B_BRESP_HardLink;
	wire [7: 0] axiSlave_S2M_B_BUSER_axiSlave_S2M_B_BUSER_HardLink;
	wire axiSlave_S2M_B_BVALID_axiSlave_S2M_B_BVALID_HardLink;
	wire [7: 0] axiSlave_S2M_R_RDATA0_axiSlave_S2M_R_RDATA_HardLink;
	wire [7: 0] axiSlave_S2M_R_RDATA1_axiSlave_S2M_R_RDATA_HardLink;
	wire [7: 0] axiSlave_S2M_R_RDATA2_axiSlave_S2M_R_RDATA_HardLink;
	wire [7: 0] axiSlave_S2M_R_RDATA3_axiSlave_S2M_R_RDATA_HardLink;
	wire [7: 0] axiSlave_S2M_R_RID_axiSlave_S2M_R_RID_HardLink;
	wire axiSlave_S2M_R_RLAST_axiSlave_S2M_R_RLAST_HardLink;
	wire [1: 0] axiSlave_S2M_R_RRESP_axiSlave_S2M_R_RRESP_HardLink;
	wire [7: 0] axiSlave_S2M_R_RUSER_axiSlave_S2M_R_RUSER_HardLink;
	wire axiSlave_S2M_R_RVALID_axiSlave_S2M_R_RVALID_HardLink;
	wire axiSlave_S2M_W_WREADY_axiSlave_S2M_W_WREADY_HardLink;
	reg State_Written = 1'b0;
	wire State_WrittenDefault = 1'b0;
	wire AXI4RegisterModule_L61F28T40_Expr;
	wire AXI4RegisterModule_L61F28T40_Expr_1;
	wire AXI4RegisterModule_L67F9L82T10_AXI4RegisterModule_L68F33T76_Expr;
	wire AXI4RegisterModule_L67F9L82T10_AXI4RegisterModule_L68F33T76_Expr_1;
	wire AXI4RegisterModule_L67F9L82T10_AXI4RegisterModule_L68F33T76_Expr_2;
	wire [7 : 0] Inputs_inWDATA [0 : 3];
	wire [7 : 0] Inputs_M2S_W_WDATA [0 : 3];
	integer State_bytes_Iterator;
	reg [7 : 0] State_bytes [0 : 3];
	initial
	begin : Init_State_bytes
		for (State_bytes_Iterator = 0; State_bytes_Iterator < 4; State_bytes_Iterator = State_bytes_Iterator + 1)
			State_bytes[State_bytes_Iterator] = 0;
	end
	integer NextState_bytes_Iterator;
	reg [7 : 0] NextState_bytes [0 : 3];
	initial
	begin : Init_NextState_bytes
		for (NextState_bytes_Iterator = 0; NextState_bytes_Iterator < 4; NextState_bytes_Iterator = NextState_bytes_Iterator + 1)
			NextState_bytes[NextState_bytes_Iterator] = 0;
	end
	wire [7 : 0] axiSlave_inRDATA [0 : 3];
	wire [7 : 0] axiSlave_M2S_W_WDATA [0 : 3];
	wire [7 : 0] axiSlave_outWDATA [0 : 3];
	wire [7 : 0] axiSlave_S2M_R_RDATA [0 : 3];
	always @ (posedge BoardSignals_Clock)
	begin
		if ((BoardSignals_Reset == 1))
		begin
			State_Written <= State_WrittenDefault;
		end
		else
		begin
			State_Written <= NextState_Written;
		end
	end
	always @ (posedge BoardSignals_Clock)
	begin
		if ((BoardSignals_Reset == 1))
		begin
			for (State_bytes_Iterator = 0; (State_bytes_Iterator < 4); State_bytes_Iterator = (State_bytes_Iterator + 1))
			begin
				State_bytes[State_bytes_Iterator] <= State_bytesDefault;
			end
		end
		else
		begin
			for (State_bytes_Iterator = 0; (State_bytes_Iterator < 4); State_bytes_Iterator = (State_bytes_Iterator + 1))
			begin
				State_bytes[State_bytes_Iterator] <= NextState_bytes[State_bytes_Iterator];
			end
		end
	end
	assign AXI4RegisterModule_L61F28T40_Expr = ~AXI4RegisterModule_L61F28T40_Expr_1;
	assign AXI4RegisterModule_L67F9L82T10_AXI4RegisterModule_L68F33T76_Expr = AXI4RegisterModule_L67F9L82T10_AXI4RegisterModule_L68F33T76_Expr_1 | AXI4RegisterModule_L67F9L82T10_AXI4RegisterModule_L68F33T76_Expr_2;
	AXI4MasterSlaveTestModule_TopLevel_reg_axiSlave
	AXI4MasterSlaveTestModule_TopLevel_reg_axiSlave
	(
		// [BEGIN USER MAP FOR axiSlave]
		// [END USER MAP FOR axiSlave]
		.BoardSignals_Clock (BoardSignals_Clock),
		.BoardSignals_Reset (BoardSignals_Reset),
		.BoardSignals_Running (BoardSignals_Running),
		.BoardSignals_Starting (BoardSignals_Starting),
		.BoardSignals_Started (BoardSignals_Started),
		.inARREADY (axiSlave_inARREADY_axiSlave_inARREADY_HardLink),
		.inAWREADY (axiSlave_inAWREADY_axiSlave_inAWREADY_HardLink),
		.inBVALID (axiSlave_inBVALID_axiSlave_inBVALID_HardLink),
		.inRDATA0 (axiSlave_inRDATA0_axiSlave_inRDATA_HardLink),
		.inRDATA1 (axiSlave_inRDATA1_axiSlave_inRDATA_HardLink),
		.inRDATA2 (axiSlave_inRDATA2_axiSlave_inRDATA_HardLink),
		.inRDATA3 (axiSlave_inRDATA3_axiSlave_inRDATA_HardLink),
		.inRVALID (axiSlave_inRVALID_axiSlave_inRVALID_HardLink),
		.inWREADY (axiSlave_inWREADY_axiSlave_inWREADY_HardLink),
		.M2S_AR_ARADDR (axiSlave_M2S_AR_ARADDR_axiSlave_M2S_AR_ARADDR_HardLink),
		.M2S_AR_ARBURST (axiSlave_M2S_AR_ARBURST_axiSlave_M2S_AR_ARBURST_HardLink),
		.M2S_AR_ARCACHE (axiSlave_M2S_AR_ARCACHE_axiSlave_M2S_AR_ARCACHE_HardLink),
		.M2S_AR_ARID (axiSlave_M2S_AR_ARID_axiSlave_M2S_AR_ARID_HardLink),
		.M2S_AR_ARLEN (axiSlave_M2S_AR_ARLEN_axiSlave_M2S_AR_ARLEN_HardLink),
		.M2S_AR_ARLOCK (axiSlave_M2S_AR_ARLOCK_axiSlave_M2S_AR_ARLOCK_HardLink),
		.M2S_AR_ARPROT (axiSlave_M2S_AR_ARPROT_axiSlave_M2S_AR_ARPROT_HardLink),
		.M2S_AR_ARQOS (axiSlave_M2S_AR_ARQOS_axiSlave_M2S_AR_ARQOS_HardLink),
		.M2S_AR_ARREGION (axiSlave_M2S_AR_ARREGION_axiSlave_M2S_AR_ARREGION_HardLink),
		.M2S_AR_ARSIZE (axiSlave_M2S_AR_ARSIZE_axiSlave_M2S_AR_ARSIZE_HardLink),
		.M2S_AR_ARUSER (axiSlave_M2S_AR_ARUSER_axiSlave_M2S_AR_ARUSER_HardLink),
		.M2S_AR_ARVALID (axiSlave_M2S_AR_ARVALID_axiSlave_M2S_AR_ARVALID_HardLink),
		.M2S_AW_AWADDR (axiSlave_M2S_AW_AWADDR_axiSlave_M2S_AW_AWADDR_HardLink),
		.M2S_AW_AWBURST (axiSlave_M2S_AW_AWBURST_axiSlave_M2S_AW_AWBURST_HardLink),
		.M2S_AW_AWCACHE (axiSlave_M2S_AW_AWCACHE_axiSlave_M2S_AW_AWCACHE_HardLink),
		.M2S_AW_AWID (axiSlave_M2S_AW_AWID_axiSlave_M2S_AW_AWID_HardLink),
		.M2S_AW_AWLEN (axiSlave_M2S_AW_AWLEN_axiSlave_M2S_AW_AWLEN_HardLink),
		.M2S_AW_AWLOCK (axiSlave_M2S_AW_AWLOCK_axiSlave_M2S_AW_AWLOCK_HardLink),
		.M2S_AW_AWPROT (axiSlave_M2S_AW_AWPROT_axiSlave_M2S_AW_AWPROT_HardLink),
		.M2S_AW_AWQOS (axiSlave_M2S_AW_AWQOS_axiSlave_M2S_AW_AWQOS_HardLink),
		.M2S_AW_AWREGION (axiSlave_M2S_AW_AWREGION_axiSlave_M2S_AW_AWREGION_HardLink),
		.M2S_AW_AWSIZE (axiSlave_M2S_AW_AWSIZE_axiSlave_M2S_AW_AWSIZE_HardLink),
		.M2S_AW_AWUSER (axiSlave_M2S_AW_AWUSER_axiSlave_M2S_AW_AWUSER_HardLink),
		.M2S_AW_AWVALID (axiSlave_M2S_AW_AWVALID_axiSlave_M2S_AW_AWVALID_HardLink),
		.M2S_B_BREADY (axiSlave_M2S_B_BREADY_axiSlave_M2S_B_BREADY_HardLink),
		.M2S_R_RREADY (axiSlave_M2S_R_RREADY_axiSlave_M2S_R_RREADY_HardLink),
		.M2S_W_WDATA0 (axiSlave_M2S_W_WDATA0_axiSlave_M2S_W_WDATA_HardLink),
		.M2S_W_WDATA1 (axiSlave_M2S_W_WDATA1_axiSlave_M2S_W_WDATA_HardLink),
		.M2S_W_WDATA2 (axiSlave_M2S_W_WDATA2_axiSlave_M2S_W_WDATA_HardLink),
		.M2S_W_WDATA3 (axiSlave_M2S_W_WDATA3_axiSlave_M2S_W_WDATA_HardLink),
		.M2S_W_WID (axiSlave_M2S_W_WID_axiSlave_M2S_W_WID_HardLink),
		.M2S_W_WLAST (axiSlave_M2S_W_WLAST_axiSlave_M2S_W_WLAST_HardLink),
		.M2S_W_WSTRB (axiSlave_M2S_W_WSTRB_axiSlave_M2S_W_WSTRB_HardLink),
		.M2S_W_WUSER (axiSlave_M2S_W_WUSER_axiSlave_M2S_W_WUSER_HardLink),
		.M2S_W_WVALID (axiSlave_M2S_W_WVALID_axiSlave_M2S_W_WVALID_HardLink),
		.outARADDR (axiSlave_outARADDR_axiSlave_outARADDR_HardLink),
		.outARREADYConfirming (axiSlave_outARREADYConfirming_axiSlave_outARREADYConfirming_HardLink),
		.outARVALID (axiSlave_outARVALID_axiSlave_outARVALID_HardLink),
		.outAWADDR (axiSlave_outAWADDR_axiSlave_outAWADDR_HardLink),
		.outAWREADYConfirming (axiSlave_outAWREADYConfirming_axiSlave_outAWREADYConfirming_HardLink),
		.outAWVALID (axiSlave_outAWVALID_axiSlave_outAWVALID_HardLink),
		.outReadTXCompleting (axiSlave_outReadTXCompleting_axiSlave_outReadTXCompleting_HardLink),
		.outWDATA0 (axiSlave_outWDATA0_axiSlave_outWDATA_HardLink),
		.outWDATA1 (axiSlave_outWDATA1_axiSlave_outWDATA_HardLink),
		.outWDATA2 (axiSlave_outWDATA2_axiSlave_outWDATA_HardLink),
		.outWDATA3 (axiSlave_outWDATA3_axiSlave_outWDATA_HardLink),
		.outWREADYConfirming (axiSlave_outWREADYConfirming_axiSlave_outWREADYConfirming_HardLink),
		.outWriteTXCompleting (axiSlave_outWriteTXCompleting_axiSlave_outWriteTXCompleting_HardLink),
		.outWSTRB (axiSlave_outWSTRB_axiSlave_outWSTRB_HardLink),
		.outWVALID (axiSlave_outWVALID_axiSlave_outWVALID_HardLink),
		.S2M_AR_ARREADY (axiSlave_S2M_AR_ARREADY_axiSlave_S2M_AR_ARREADY_HardLink),
		.S2M_AW_AWREADY (axiSlave_S2M_AW_AWREADY_axiSlave_S2M_AW_AWREADY_HardLink),
		.S2M_B_BID (axiSlave_S2M_B_BID_axiSlave_S2M_B_BID_HardLink),
		.S2M_B_BRESP (axiSlave_S2M_B_BRESP_axiSlave_S2M_B_BRESP_HardLink),
		.S2M_B_BUSER (axiSlave_S2M_B_BUSER_axiSlave_S2M_B_BUSER_HardLink),
		.S2M_B_BVALID (axiSlave_S2M_B_BVALID_axiSlave_S2M_B_BVALID_HardLink),
		.S2M_R_RDATA0 (axiSlave_S2M_R_RDATA0_axiSlave_S2M_R_RDATA_HardLink),
		.S2M_R_RDATA1 (axiSlave_S2M_R_RDATA1_axiSlave_S2M_R_RDATA_HardLink),
		.S2M_R_RDATA2 (axiSlave_S2M_R_RDATA2_axiSlave_S2M_R_RDATA_HardLink),
		.S2M_R_RDATA3 (axiSlave_S2M_R_RDATA3_axiSlave_S2M_R_RDATA_HardLink),
		.S2M_R_RID (axiSlave_S2M_R_RID_axiSlave_S2M_R_RID_HardLink),
		.S2M_R_RLAST (axiSlave_S2M_R_RLAST_axiSlave_S2M_R_RLAST_HardLink),
		.S2M_R_RRESP (axiSlave_S2M_R_RRESP_axiSlave_S2M_R_RRESP_HardLink),
		.S2M_R_RUSER (axiSlave_S2M_R_RUSER_axiSlave_S2M_R_RUSER_HardLink),
		.S2M_R_RVALID (axiSlave_S2M_R_RVALID_axiSlave_S2M_R_RVALID_HardLink),
		.S2M_W_WREADY (axiSlave_S2M_W_WREADY_axiSlave_S2M_W_WREADY_HardLink)
	);
	always @ (*)
	begin
		NextState_bytes_Iterator = 0;
		for (NextState_bytes_Iterator = 0; (NextState_bytes_Iterator < 4); NextState_bytes_Iterator = (NextState_bytes_Iterator + 1))
		begin
			NextState_bytes[NextState_bytes_Iterator] = State_bytes[NextState_bytes_Iterator];
		end
		NextState_Written = State_Written;
		NextState_Written = AXI4RegisterModule_L67F9L82T10_AXI4RegisterModule_L68F33T76_Expr;
		if ((Inputs_inWE == 1))
		begin
			NextState_bytes[0] = Inputs_inWDATA[0];
			NextState_bytes[1] = Inputs_inWDATA[1];
			NextState_bytes[2] = Inputs_inWDATA[2];
			NextState_bytes[3] = Inputs_inWDATA[3];
		end
		else if ((axiSlave_outWREADYConfirming == 1))
		begin
			if ((axiSlave_outWSTRB[0] == 1))
			begin
				NextState_bytes[0] = axiSlave_outWDATA[0];
			end
			if ((axiSlave_outWSTRB[1] == 1))
			begin
				NextState_bytes[1] = axiSlave_outWDATA[1];
			end
			if ((axiSlave_outWSTRB[2] == 1))
			begin
				NextState_bytes[2] = axiSlave_outWDATA[2];
			end
			if ((axiSlave_outWSTRB[3] == 1))
			begin
				NextState_bytes[3] = axiSlave_outWDATA[3];
			end
		end
	end
	assign AXI4RegisterModule_L61F28T40_Expr_1 = Inputs_inWE;
	assign AXI4RegisterModule_L67F9L82T10_AXI4RegisterModule_L68F33T76_Expr_1 = Inputs_inWE;
	assign AXI4RegisterModule_L67F9L82T10_AXI4RegisterModule_L68F33T76_Expr_2 = axiSlave_outWREADYConfirming;
	assign Inputs_inWDATA[0] = inWDATA0;
	assign Inputs_inWDATA[1] = inWDATA1;
	assign Inputs_inWDATA[2] = inWDATA2;
	assign Inputs_inWDATA[3] = inWDATA3;
	assign Inputs_inWE = inWE;
	assign Inputs_M2S_AR_ARADDR = M2S_AR_ARADDR;
	assign Inputs_M2S_AR_ARBURST = M2S_AR_ARBURST;
	assign Inputs_M2S_AR_ARCACHE = M2S_AR_ARCACHE;
	assign Inputs_M2S_AR_ARID = M2S_AR_ARID;
	assign Inputs_M2S_AR_ARLEN = M2S_AR_ARLEN;
	assign Inputs_M2S_AR_ARLOCK = M2S_AR_ARLOCK;
	assign Inputs_M2S_AR_ARPROT = M2S_AR_ARPROT;
	assign Inputs_M2S_AR_ARQOS = M2S_AR_ARQOS;
	assign Inputs_M2S_AR_ARREGION = M2S_AR_ARREGION;
	assign Inputs_M2S_AR_ARSIZE = M2S_AR_ARSIZE;
	assign Inputs_M2S_AR_ARUSER = M2S_AR_ARUSER;
	assign Inputs_M2S_AR_ARVALID = M2S_AR_ARVALID;
	assign Inputs_M2S_AW_AWADDR = M2S_AW_AWADDR;
	assign Inputs_M2S_AW_AWBURST = M2S_AW_AWBURST;
	assign Inputs_M2S_AW_AWCACHE = M2S_AW_AWCACHE;
	assign Inputs_M2S_AW_AWID = M2S_AW_AWID;
	assign Inputs_M2S_AW_AWLEN = M2S_AW_AWLEN;
	assign Inputs_M2S_AW_AWLOCK = M2S_AW_AWLOCK;
	assign Inputs_M2S_AW_AWPROT = M2S_AW_AWPROT;
	assign Inputs_M2S_AW_AWQOS = M2S_AW_AWQOS;
	assign Inputs_M2S_AW_AWREGION = M2S_AW_AWREGION;
	assign Inputs_M2S_AW_AWSIZE = M2S_AW_AWSIZE;
	assign Inputs_M2S_AW_AWUSER = M2S_AW_AWUSER;
	assign Inputs_M2S_AW_AWVALID = M2S_AW_AWVALID;
	assign Inputs_M2S_B_BREADY = M2S_B_BREADY;
	assign Inputs_M2S_R_RREADY = M2S_R_RREADY;
	assign Inputs_M2S_W_WDATA[0] = M2S_W_WDATA0;
	assign Inputs_M2S_W_WDATA[1] = M2S_W_WDATA1;
	assign Inputs_M2S_W_WDATA[2] = M2S_W_WDATA2;
	assign Inputs_M2S_W_WDATA[3] = M2S_W_WDATA3;
	assign Inputs_M2S_W_WID = M2S_W_WID;
	assign Inputs_M2S_W_WLAST = M2S_W_WLAST;
	assign Inputs_M2S_W_WSTRB = M2S_W_WSTRB;
	assign Inputs_M2S_W_WUSER = M2S_W_WUSER;
	assign Inputs_M2S_W_WVALID = M2S_W_WVALID;
	assign axiSlave_inARREADY = AXI4RegisterModule_L58F29T33_Expr;
	assign axiSlave_inAWREADY = AXI4RegisterModule_L60F29T33_Expr;
	assign axiSlave_inBVALID = AXI4RegisterModule_L62F28T32_Expr;
	assign axiSlave_inRDATA[0] = State_bytes[0];
	assign axiSlave_inRDATA[1] = State_bytes[1];
	assign axiSlave_inRDATA[2] = State_bytes[2];
	assign axiSlave_inRDATA[3] = State_bytes[3];
	assign axiSlave_inRVALID = AXI4RegisterModule_L59F28T32_Expr;
	assign axiSlave_inWREADY = AXI4RegisterModule_L61F28T40_Expr;
	assign axiSlave_M2S_AR_ARADDR = Inputs_M2S_AR_ARADDR;
	assign axiSlave_M2S_AR_ARBURST = Inputs_M2S_AR_ARBURST;
	assign axiSlave_M2S_AR_ARCACHE = Inputs_M2S_AR_ARCACHE;
	assign axiSlave_M2S_AR_ARID = Inputs_M2S_AR_ARID;
	assign axiSlave_M2S_AR_ARLEN = Inputs_M2S_AR_ARLEN;
	assign axiSlave_M2S_AR_ARLOCK = Inputs_M2S_AR_ARLOCK;
	assign axiSlave_M2S_AR_ARPROT = Inputs_M2S_AR_ARPROT;
	assign axiSlave_M2S_AR_ARQOS = Inputs_M2S_AR_ARQOS;
	assign axiSlave_M2S_AR_ARREGION = Inputs_M2S_AR_ARREGION;
	assign axiSlave_M2S_AR_ARSIZE = Inputs_M2S_AR_ARSIZE;
	assign axiSlave_M2S_AR_ARUSER = Inputs_M2S_AR_ARUSER;
	assign axiSlave_M2S_AR_ARVALID = Inputs_M2S_AR_ARVALID;
	assign axiSlave_M2S_AW_AWADDR = Inputs_M2S_AW_AWADDR;
	assign axiSlave_M2S_AW_AWBURST = Inputs_M2S_AW_AWBURST;
	assign axiSlave_M2S_AW_AWCACHE = Inputs_M2S_AW_AWCACHE;
	assign axiSlave_M2S_AW_AWID = Inputs_M2S_AW_AWID;
	assign axiSlave_M2S_AW_AWLEN = Inputs_M2S_AW_AWLEN;
	assign axiSlave_M2S_AW_AWLOCK = Inputs_M2S_AW_AWLOCK;
	assign axiSlave_M2S_AW_AWPROT = Inputs_M2S_AW_AWPROT;
	assign axiSlave_M2S_AW_AWQOS = Inputs_M2S_AW_AWQOS;
	assign axiSlave_M2S_AW_AWREGION = Inputs_M2S_AW_AWREGION;
	assign axiSlave_M2S_AW_AWSIZE = Inputs_M2S_AW_AWSIZE;
	assign axiSlave_M2S_AW_AWUSER = Inputs_M2S_AW_AWUSER;
	assign axiSlave_M2S_AW_AWVALID = Inputs_M2S_AW_AWVALID;
	assign axiSlave_M2S_B_BREADY = Inputs_M2S_B_BREADY;
	assign axiSlave_M2S_R_RREADY = Inputs_M2S_R_RREADY;
	assign axiSlave_M2S_W_WDATA[0] = Inputs_M2S_W_WDATA[0];
	assign axiSlave_M2S_W_WDATA[1] = Inputs_M2S_W_WDATA[1];
	assign axiSlave_M2S_W_WDATA[2] = Inputs_M2S_W_WDATA[2];
	assign axiSlave_M2S_W_WDATA[3] = Inputs_M2S_W_WDATA[3];
	assign axiSlave_M2S_W_WID = Inputs_M2S_W_WID;
	assign axiSlave_M2S_W_WLAST = Inputs_M2S_W_WLAST;
	assign axiSlave_M2S_W_WSTRB = Inputs_M2S_W_WSTRB;
	assign axiSlave_M2S_W_WUSER = Inputs_M2S_W_WUSER;
	assign axiSlave_M2S_W_WVALID = Inputs_M2S_W_WVALID;
	assign outACK = Inputs_inWE;
	assign outData0 = State_bytes[0];
	assign outData1 = State_bytes[1];
	assign outData2 = State_bytes[2];
	assign outData3 = State_bytes[3];
	assign outWritten = State_Written;
	assign S2M_AR_ARREADY = axiSlave_S2M_AR_ARREADY;
	assign S2M_AW_AWREADY = axiSlave_S2M_AW_AWREADY;
	assign S2M_B_BID = axiSlave_S2M_B_BID;
	assign S2M_B_BRESP = axiSlave_S2M_B_BRESP;
	assign S2M_B_BUSER = axiSlave_S2M_B_BUSER;
	assign S2M_B_BVALID = axiSlave_S2M_B_BVALID;
	assign S2M_R_RDATA0 = axiSlave_S2M_R_RDATA[0];
	assign S2M_R_RDATA1 = axiSlave_S2M_R_RDATA[1];
	assign S2M_R_RDATA2 = axiSlave_S2M_R_RDATA[2];
	assign S2M_R_RDATA3 = axiSlave_S2M_R_RDATA[3];
	assign S2M_R_RID = axiSlave_S2M_R_RID;
	assign S2M_R_RLAST = axiSlave_S2M_R_RLAST;
	assign S2M_R_RRESP = axiSlave_S2M_R_RRESP;
	assign S2M_R_RUSER = axiSlave_S2M_R_RUSER;
	assign S2M_R_RVALID = axiSlave_S2M_R_RVALID;
	assign S2M_W_WREADY = axiSlave_S2M_W_WREADY;
	assign axiSlave_inARREADY_axiSlave_inARREADY_HardLink = axiSlave_inARREADY;
	assign axiSlave_inAWREADY_axiSlave_inAWREADY_HardLink = axiSlave_inAWREADY;
	assign axiSlave_inBVALID_axiSlave_inBVALID_HardLink = axiSlave_inBVALID;
	assign axiSlave_inRDATA0_axiSlave_inRDATA_HardLink = axiSlave_inRDATA[0];
	assign axiSlave_inRDATA1_axiSlave_inRDATA_HardLink = axiSlave_inRDATA[1];
	assign axiSlave_inRDATA2_axiSlave_inRDATA_HardLink = axiSlave_inRDATA[2];
	assign axiSlave_inRDATA3_axiSlave_inRDATA_HardLink = axiSlave_inRDATA[3];
	assign axiSlave_inRVALID_axiSlave_inRVALID_HardLink = axiSlave_inRVALID;
	assign axiSlave_inWREADY_axiSlave_inWREADY_HardLink = axiSlave_inWREADY;
	assign axiSlave_M2S_AR_ARADDR_axiSlave_M2S_AR_ARADDR_HardLink = axiSlave_M2S_AR_ARADDR;
	assign axiSlave_M2S_AR_ARBURST_axiSlave_M2S_AR_ARBURST_HardLink = axiSlave_M2S_AR_ARBURST;
	assign axiSlave_M2S_AR_ARCACHE_axiSlave_M2S_AR_ARCACHE_HardLink = axiSlave_M2S_AR_ARCACHE;
	assign axiSlave_M2S_AR_ARID_axiSlave_M2S_AR_ARID_HardLink = axiSlave_M2S_AR_ARID;
	assign axiSlave_M2S_AR_ARLEN_axiSlave_M2S_AR_ARLEN_HardLink = axiSlave_M2S_AR_ARLEN;
	assign axiSlave_M2S_AR_ARLOCK_axiSlave_M2S_AR_ARLOCK_HardLink = axiSlave_M2S_AR_ARLOCK;
	assign axiSlave_M2S_AR_ARPROT_axiSlave_M2S_AR_ARPROT_HardLink = axiSlave_M2S_AR_ARPROT;
	assign axiSlave_M2S_AR_ARQOS_axiSlave_M2S_AR_ARQOS_HardLink = axiSlave_M2S_AR_ARQOS;
	assign axiSlave_M2S_AR_ARREGION_axiSlave_M2S_AR_ARREGION_HardLink = axiSlave_M2S_AR_ARREGION;
	assign axiSlave_M2S_AR_ARSIZE_axiSlave_M2S_AR_ARSIZE_HardLink = axiSlave_M2S_AR_ARSIZE;
	assign axiSlave_M2S_AR_ARUSER_axiSlave_M2S_AR_ARUSER_HardLink = axiSlave_M2S_AR_ARUSER;
	assign axiSlave_M2S_AR_ARVALID_axiSlave_M2S_AR_ARVALID_HardLink = axiSlave_M2S_AR_ARVALID;
	assign axiSlave_M2S_AW_AWADDR_axiSlave_M2S_AW_AWADDR_HardLink = axiSlave_M2S_AW_AWADDR;
	assign axiSlave_M2S_AW_AWBURST_axiSlave_M2S_AW_AWBURST_HardLink = axiSlave_M2S_AW_AWBURST;
	assign axiSlave_M2S_AW_AWCACHE_axiSlave_M2S_AW_AWCACHE_HardLink = axiSlave_M2S_AW_AWCACHE;
	assign axiSlave_M2S_AW_AWID_axiSlave_M2S_AW_AWID_HardLink = axiSlave_M2S_AW_AWID;
	assign axiSlave_M2S_AW_AWLEN_axiSlave_M2S_AW_AWLEN_HardLink = axiSlave_M2S_AW_AWLEN;
	assign axiSlave_M2S_AW_AWLOCK_axiSlave_M2S_AW_AWLOCK_HardLink = axiSlave_M2S_AW_AWLOCK;
	assign axiSlave_M2S_AW_AWPROT_axiSlave_M2S_AW_AWPROT_HardLink = axiSlave_M2S_AW_AWPROT;
	assign axiSlave_M2S_AW_AWQOS_axiSlave_M2S_AW_AWQOS_HardLink = axiSlave_M2S_AW_AWQOS;
	assign axiSlave_M2S_AW_AWREGION_axiSlave_M2S_AW_AWREGION_HardLink = axiSlave_M2S_AW_AWREGION;
	assign axiSlave_M2S_AW_AWSIZE_axiSlave_M2S_AW_AWSIZE_HardLink = axiSlave_M2S_AW_AWSIZE;
	assign axiSlave_M2S_AW_AWUSER_axiSlave_M2S_AW_AWUSER_HardLink = axiSlave_M2S_AW_AWUSER;
	assign axiSlave_M2S_AW_AWVALID_axiSlave_M2S_AW_AWVALID_HardLink = axiSlave_M2S_AW_AWVALID;
	assign axiSlave_M2S_B_BREADY_axiSlave_M2S_B_BREADY_HardLink = axiSlave_M2S_B_BREADY;
	assign axiSlave_M2S_R_RREADY_axiSlave_M2S_R_RREADY_HardLink = axiSlave_M2S_R_RREADY;
	assign axiSlave_M2S_W_WDATA0_axiSlave_M2S_W_WDATA_HardLink = axiSlave_M2S_W_WDATA[0];
	assign axiSlave_M2S_W_WDATA1_axiSlave_M2S_W_WDATA_HardLink = axiSlave_M2S_W_WDATA[1];
	assign axiSlave_M2S_W_WDATA2_axiSlave_M2S_W_WDATA_HardLink = axiSlave_M2S_W_WDATA[2];
	assign axiSlave_M2S_W_WDATA3_axiSlave_M2S_W_WDATA_HardLink = axiSlave_M2S_W_WDATA[3];
	assign axiSlave_M2S_W_WID_axiSlave_M2S_W_WID_HardLink = axiSlave_M2S_W_WID;
	assign axiSlave_M2S_W_WLAST_axiSlave_M2S_W_WLAST_HardLink = axiSlave_M2S_W_WLAST;
	assign axiSlave_M2S_W_WSTRB_axiSlave_M2S_W_WSTRB_HardLink = axiSlave_M2S_W_WSTRB;
	assign axiSlave_M2S_W_WUSER_axiSlave_M2S_W_WUSER_HardLink = axiSlave_M2S_W_WUSER;
	assign axiSlave_M2S_W_WVALID_axiSlave_M2S_W_WVALID_HardLink = axiSlave_M2S_W_WVALID;
	assign axiSlave_outARADDR = axiSlave_outARADDR_axiSlave_outARADDR_HardLink;
	assign axiSlave_outARREADYConfirming = axiSlave_outARREADYConfirming_axiSlave_outARREADYConfirming_HardLink;
	assign axiSlave_outARVALID = axiSlave_outARVALID_axiSlave_outARVALID_HardLink;
	assign axiSlave_outAWADDR = axiSlave_outAWADDR_axiSlave_outAWADDR_HardLink;
	assign axiSlave_outAWREADYConfirming = axiSlave_outAWREADYConfirming_axiSlave_outAWREADYConfirming_HardLink;
	assign axiSlave_outAWVALID = axiSlave_outAWVALID_axiSlave_outAWVALID_HardLink;
	assign axiSlave_outReadTXCompleting = axiSlave_outReadTXCompleting_axiSlave_outReadTXCompleting_HardLink;
	assign axiSlave_outWDATA[0] = axiSlave_outWDATA0_axiSlave_outWDATA_HardLink;
	assign axiSlave_outWDATA[1] = axiSlave_outWDATA1_axiSlave_outWDATA_HardLink;
	assign axiSlave_outWDATA[2] = axiSlave_outWDATA2_axiSlave_outWDATA_HardLink;
	assign axiSlave_outWDATA[3] = axiSlave_outWDATA3_axiSlave_outWDATA_HardLink;
	assign axiSlave_outWREADYConfirming = axiSlave_outWREADYConfirming_axiSlave_outWREADYConfirming_HardLink;
	assign axiSlave_outWriteTXCompleting = axiSlave_outWriteTXCompleting_axiSlave_outWriteTXCompleting_HardLink;
	assign axiSlave_outWSTRB = axiSlave_outWSTRB_axiSlave_outWSTRB_HardLink;
	assign axiSlave_outWVALID = axiSlave_outWVALID_axiSlave_outWVALID_HardLink;
	assign axiSlave_S2M_AR_ARREADY = axiSlave_S2M_AR_ARREADY_axiSlave_S2M_AR_ARREADY_HardLink;
	assign axiSlave_S2M_AW_AWREADY = axiSlave_S2M_AW_AWREADY_axiSlave_S2M_AW_AWREADY_HardLink;
	assign axiSlave_S2M_B_BID = axiSlave_S2M_B_BID_axiSlave_S2M_B_BID_HardLink;
	assign axiSlave_S2M_B_BRESP = axiSlave_S2M_B_BRESP_axiSlave_S2M_B_BRESP_HardLink;
	assign axiSlave_S2M_B_BUSER = axiSlave_S2M_B_BUSER_axiSlave_S2M_B_BUSER_HardLink;
	assign axiSlave_S2M_B_BVALID = axiSlave_S2M_B_BVALID_axiSlave_S2M_B_BVALID_HardLink;
	assign axiSlave_S2M_R_RDATA[0] = axiSlave_S2M_R_RDATA0_axiSlave_S2M_R_RDATA_HardLink;
	assign axiSlave_S2M_R_RDATA[1] = axiSlave_S2M_R_RDATA1_axiSlave_S2M_R_RDATA_HardLink;
	assign axiSlave_S2M_R_RDATA[2] = axiSlave_S2M_R_RDATA2_axiSlave_S2M_R_RDATA_HardLink;
	assign axiSlave_S2M_R_RDATA[3] = axiSlave_S2M_R_RDATA3_axiSlave_S2M_R_RDATA_HardLink;
	assign axiSlave_S2M_R_RID = axiSlave_S2M_R_RID_axiSlave_S2M_R_RID_HardLink;
	assign axiSlave_S2M_R_RLAST = axiSlave_S2M_R_RLAST_axiSlave_S2M_R_RLAST_HardLink;
	assign axiSlave_S2M_R_RRESP = axiSlave_S2M_R_RRESP_axiSlave_S2M_R_RRESP_HardLink;
	assign axiSlave_S2M_R_RUSER = axiSlave_S2M_R_RUSER_axiSlave_S2M_R_RUSER_HardLink;
	assign axiSlave_S2M_R_RVALID = axiSlave_S2M_R_RVALID_axiSlave_S2M_R_RVALID_HardLink;
	assign axiSlave_S2M_W_WREADY = axiSlave_S2M_W_WREADY_axiSlave_S2M_W_WREADY_HardLink;
	// [BEGIN USER ARCHITECTURE]
	// [END USER ARCHITECTURE]
endmodule
