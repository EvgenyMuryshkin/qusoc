`timescale 1ns/1ps
`default_nettype none
// PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
// * This file was generated by Quokka FPGA Toolkit.
// * Generated code is your property, do whatever you want with it
// * Place custom code between [BEGIN USER ***] and [END USER ***].
// * CAUTION: All code outside of [USER] scope is subject to regeneration.
// * Bad things happen sometimes in developer's life,
//   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
// * Internal structure of code is subject to change.
//   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
// * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
// * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
//
// DISCLAIMER:
//   Code comes AS-IS, it is your responsibility to make sure it is working as expected
//   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
//
// System configuration name is AXI4FullDuplexMuxModule_TopLevel, clock frequency is 1Hz, Top-level
// FSM summary
// -- Packages
module AXI4FullDuplexMuxModule_TopLevel
(
	// [BEGIN USER PORTS]
	// [END USER PORTS]
	input wire [7:0] iLeft0_AR_ARID,
	input wire [31:0] iLeft0_AR_ARADDR,
	input wire [7:0] iLeft0_AR_ARLEN,
	input wire [2:0] iLeft0_AR_ARSIZE,
	input wire [1:0] iLeft0_AR_ARBURST,
	input wire [1:0] iLeft0_AR_ARLOCK,
	input wire [3:0] iLeft0_AR_ARCACHE,
	input wire [2:0] iLeft0_AR_ARPROT,
	input wire [3:0] iLeft0_AR_ARQOS,
	input wire [7:0] iLeft0_AR_ARREGION,
	input wire [7:0] iLeft0_AR_ARUSER,
	input wire iLeft0_AR_ARVALID,
	input wire iLeft0_R_RREADY,
	input wire [7:0] iLeft0_AW_AWID,
	input wire [31:0] iLeft0_AW_AWADDR,
	input wire [7:0] iLeft0_AW_AWLEN,
	input wire [2:0] iLeft0_AW_AWSIZE,
	input wire [1:0] iLeft0_AW_AWBURST,
	input wire [1:0] iLeft0_AW_AWLOCK,
	input wire [3:0] iLeft0_AW_AWCACHE,
	input wire [2:0] iLeft0_AW_AWPROT,
	input wire [3:0] iLeft0_AW_AWQOS,
	input wire [7:0] iLeft0_AW_AWREGION,
	input wire [7:0] iLeft0_AW_AWUSER,
	input wire iLeft0_AW_AWVALID,
	input wire [7:0] iLeft0_W_WID,
	input wire [7:0] iLeft0_W_WDATA0,
	input wire [7:0] iLeft0_W_WDATA1,
	input wire [7:0] iLeft0_W_WDATA2,
	input wire [7:0] iLeft0_W_WDATA3,
	input wire [3:0] iLeft0_W_WSTRB,
	input wire iLeft0_W_WLAST,
	input wire [7:0] iLeft0_W_WUSER,
	input wire iLeft0_W_WVALID,
	input wire iLeft0_B_BREADY,
	input wire [7:0] iLeft1_AR_ARID,
	input wire [31:0] iLeft1_AR_ARADDR,
	input wire [7:0] iLeft1_AR_ARLEN,
	input wire [2:0] iLeft1_AR_ARSIZE,
	input wire [1:0] iLeft1_AR_ARBURST,
	input wire [1:0] iLeft1_AR_ARLOCK,
	input wire [3:0] iLeft1_AR_ARCACHE,
	input wire [2:0] iLeft1_AR_ARPROT,
	input wire [3:0] iLeft1_AR_ARQOS,
	input wire [7:0] iLeft1_AR_ARREGION,
	input wire [7:0] iLeft1_AR_ARUSER,
	input wire iLeft1_AR_ARVALID,
	input wire iLeft1_R_RREADY,
	input wire [7:0] iLeft1_AW_AWID,
	input wire [31:0] iLeft1_AW_AWADDR,
	input wire [7:0] iLeft1_AW_AWLEN,
	input wire [2:0] iLeft1_AW_AWSIZE,
	input wire [1:0] iLeft1_AW_AWBURST,
	input wire [1:0] iLeft1_AW_AWLOCK,
	input wire [3:0] iLeft1_AW_AWCACHE,
	input wire [2:0] iLeft1_AW_AWPROT,
	input wire [3:0] iLeft1_AW_AWQOS,
	input wire [7:0] iLeft1_AW_AWREGION,
	input wire [7:0] iLeft1_AW_AWUSER,
	input wire iLeft1_AW_AWVALID,
	input wire [7:0] iLeft1_W_WID,
	input wire [7:0] iLeft1_W_WDATA0,
	input wire [7:0] iLeft1_W_WDATA1,
	input wire [7:0] iLeft1_W_WDATA2,
	input wire [7:0] iLeft1_W_WDATA3,
	input wire [3:0] iLeft1_W_WSTRB,
	input wire iLeft1_W_WLAST,
	input wire [7:0] iLeft1_W_WUSER,
	input wire iLeft1_W_WVALID,
	input wire iLeft1_B_BREADY,
	input wire [7:0] iLeft2_AR_ARID,
	input wire [31:0] iLeft2_AR_ARADDR,
	input wire [7:0] iLeft2_AR_ARLEN,
	input wire [2:0] iLeft2_AR_ARSIZE,
	input wire [1:0] iLeft2_AR_ARBURST,
	input wire [1:0] iLeft2_AR_ARLOCK,
	input wire [3:0] iLeft2_AR_ARCACHE,
	input wire [2:0] iLeft2_AR_ARPROT,
	input wire [3:0] iLeft2_AR_ARQOS,
	input wire [7:0] iLeft2_AR_ARREGION,
	input wire [7:0] iLeft2_AR_ARUSER,
	input wire iLeft2_AR_ARVALID,
	input wire iLeft2_R_RREADY,
	input wire [7:0] iLeft2_AW_AWID,
	input wire [31:0] iLeft2_AW_AWADDR,
	input wire [7:0] iLeft2_AW_AWLEN,
	input wire [2:0] iLeft2_AW_AWSIZE,
	input wire [1:0] iLeft2_AW_AWBURST,
	input wire [1:0] iLeft2_AW_AWLOCK,
	input wire [3:0] iLeft2_AW_AWCACHE,
	input wire [2:0] iLeft2_AW_AWPROT,
	input wire [3:0] iLeft2_AW_AWQOS,
	input wire [7:0] iLeft2_AW_AWREGION,
	input wire [7:0] iLeft2_AW_AWUSER,
	input wire iLeft2_AW_AWVALID,
	input wire [7:0] iLeft2_W_WID,
	input wire [7:0] iLeft2_W_WDATA0,
	input wire [7:0] iLeft2_W_WDATA1,
	input wire [7:0] iLeft2_W_WDATA2,
	input wire [7:0] iLeft2_W_WDATA3,
	input wire [3:0] iLeft2_W_WSTRB,
	input wire iLeft2_W_WLAST,
	input wire [7:0] iLeft2_W_WUSER,
	input wire iLeft2_W_WVALID,
	input wire iLeft2_B_BREADY,
	input wire [7:0] iLeft3_AR_ARID,
	input wire [31:0] iLeft3_AR_ARADDR,
	input wire [7:0] iLeft3_AR_ARLEN,
	input wire [2:0] iLeft3_AR_ARSIZE,
	input wire [1:0] iLeft3_AR_ARBURST,
	input wire [1:0] iLeft3_AR_ARLOCK,
	input wire [3:0] iLeft3_AR_ARCACHE,
	input wire [2:0] iLeft3_AR_ARPROT,
	input wire [3:0] iLeft3_AR_ARQOS,
	input wire [7:0] iLeft3_AR_ARREGION,
	input wire [7:0] iLeft3_AR_ARUSER,
	input wire iLeft3_AR_ARVALID,
	input wire iLeft3_R_RREADY,
	input wire [7:0] iLeft3_AW_AWID,
	input wire [31:0] iLeft3_AW_AWADDR,
	input wire [7:0] iLeft3_AW_AWLEN,
	input wire [2:0] iLeft3_AW_AWSIZE,
	input wire [1:0] iLeft3_AW_AWBURST,
	input wire [1:0] iLeft3_AW_AWLOCK,
	input wire [3:0] iLeft3_AW_AWCACHE,
	input wire [2:0] iLeft3_AW_AWPROT,
	input wire [3:0] iLeft3_AW_AWQOS,
	input wire [7:0] iLeft3_AW_AWREGION,
	input wire [7:0] iLeft3_AW_AWUSER,
	input wire iLeft3_AW_AWVALID,
	input wire [7:0] iLeft3_W_WID,
	input wire [7:0] iLeft3_W_WDATA0,
	input wire [7:0] iLeft3_W_WDATA1,
	input wire [7:0] iLeft3_W_WDATA2,
	input wire [7:0] iLeft3_W_WDATA3,
	input wire [3:0] iLeft3_W_WSTRB,
	input wire iLeft3_W_WLAST,
	input wire [7:0] iLeft3_W_WUSER,
	input wire iLeft3_W_WVALID,
	input wire iLeft3_B_BREADY,
	input wire [7:0] iLeft4_AR_ARID,
	input wire [31:0] iLeft4_AR_ARADDR,
	input wire [7:0] iLeft4_AR_ARLEN,
	input wire [2:0] iLeft4_AR_ARSIZE,
	input wire [1:0] iLeft4_AR_ARBURST,
	input wire [1:0] iLeft4_AR_ARLOCK,
	input wire [3:0] iLeft4_AR_ARCACHE,
	input wire [2:0] iLeft4_AR_ARPROT,
	input wire [3:0] iLeft4_AR_ARQOS,
	input wire [7:0] iLeft4_AR_ARREGION,
	input wire [7:0] iLeft4_AR_ARUSER,
	input wire iLeft4_AR_ARVALID,
	input wire iLeft4_R_RREADY,
	input wire [7:0] iLeft4_AW_AWID,
	input wire [31:0] iLeft4_AW_AWADDR,
	input wire [7:0] iLeft4_AW_AWLEN,
	input wire [2:0] iLeft4_AW_AWSIZE,
	input wire [1:0] iLeft4_AW_AWBURST,
	input wire [1:0] iLeft4_AW_AWLOCK,
	input wire [3:0] iLeft4_AW_AWCACHE,
	input wire [2:0] iLeft4_AW_AWPROT,
	input wire [3:0] iLeft4_AW_AWQOS,
	input wire [7:0] iLeft4_AW_AWREGION,
	input wire [7:0] iLeft4_AW_AWUSER,
	input wire iLeft4_AW_AWVALID,
	input wire [7:0] iLeft4_W_WID,
	input wire [7:0] iLeft4_W_WDATA0,
	input wire [7:0] iLeft4_W_WDATA1,
	input wire [7:0] iLeft4_W_WDATA2,
	input wire [7:0] iLeft4_W_WDATA3,
	input wire [3:0] iLeft4_W_WSTRB,
	input wire iLeft4_W_WLAST,
	input wire [7:0] iLeft4_W_WUSER,
	input wire iLeft4_W_WVALID,
	input wire iLeft4_B_BREADY,
	input wire [7:0] iLeft5_AR_ARID,
	input wire [31:0] iLeft5_AR_ARADDR,
	input wire [7:0] iLeft5_AR_ARLEN,
	input wire [2:0] iLeft5_AR_ARSIZE,
	input wire [1:0] iLeft5_AR_ARBURST,
	input wire [1:0] iLeft5_AR_ARLOCK,
	input wire [3:0] iLeft5_AR_ARCACHE,
	input wire [2:0] iLeft5_AR_ARPROT,
	input wire [3:0] iLeft5_AR_ARQOS,
	input wire [7:0] iLeft5_AR_ARREGION,
	input wire [7:0] iLeft5_AR_ARUSER,
	input wire iLeft5_AR_ARVALID,
	input wire iLeft5_R_RREADY,
	input wire [7:0] iLeft5_AW_AWID,
	input wire [31:0] iLeft5_AW_AWADDR,
	input wire [7:0] iLeft5_AW_AWLEN,
	input wire [2:0] iLeft5_AW_AWSIZE,
	input wire [1:0] iLeft5_AW_AWBURST,
	input wire [1:0] iLeft5_AW_AWLOCK,
	input wire [3:0] iLeft5_AW_AWCACHE,
	input wire [2:0] iLeft5_AW_AWPROT,
	input wire [3:0] iLeft5_AW_AWQOS,
	input wire [7:0] iLeft5_AW_AWREGION,
	input wire [7:0] iLeft5_AW_AWUSER,
	input wire iLeft5_AW_AWVALID,
	input wire [7:0] iLeft5_W_WID,
	input wire [7:0] iLeft5_W_WDATA0,
	input wire [7:0] iLeft5_W_WDATA1,
	input wire [7:0] iLeft5_W_WDATA2,
	input wire [7:0] iLeft5_W_WDATA3,
	input wire [3:0] iLeft5_W_WSTRB,
	input wire iLeft5_W_WLAST,
	input wire [7:0] iLeft5_W_WUSER,
	input wire iLeft5_W_WVALID,
	input wire iLeft5_B_BREADY,
	input wire [7:0] iLeft6_AR_ARID,
	input wire [31:0] iLeft6_AR_ARADDR,
	input wire [7:0] iLeft6_AR_ARLEN,
	input wire [2:0] iLeft6_AR_ARSIZE,
	input wire [1:0] iLeft6_AR_ARBURST,
	input wire [1:0] iLeft6_AR_ARLOCK,
	input wire [3:0] iLeft6_AR_ARCACHE,
	input wire [2:0] iLeft6_AR_ARPROT,
	input wire [3:0] iLeft6_AR_ARQOS,
	input wire [7:0] iLeft6_AR_ARREGION,
	input wire [7:0] iLeft6_AR_ARUSER,
	input wire iLeft6_AR_ARVALID,
	input wire iLeft6_R_RREADY,
	input wire [7:0] iLeft6_AW_AWID,
	input wire [31:0] iLeft6_AW_AWADDR,
	input wire [7:0] iLeft6_AW_AWLEN,
	input wire [2:0] iLeft6_AW_AWSIZE,
	input wire [1:0] iLeft6_AW_AWBURST,
	input wire [1:0] iLeft6_AW_AWLOCK,
	input wire [3:0] iLeft6_AW_AWCACHE,
	input wire [2:0] iLeft6_AW_AWPROT,
	input wire [3:0] iLeft6_AW_AWQOS,
	input wire [7:0] iLeft6_AW_AWREGION,
	input wire [7:0] iLeft6_AW_AWUSER,
	input wire iLeft6_AW_AWVALID,
	input wire [7:0] iLeft6_W_WID,
	input wire [7:0] iLeft6_W_WDATA0,
	input wire [7:0] iLeft6_W_WDATA1,
	input wire [7:0] iLeft6_W_WDATA2,
	input wire [7:0] iLeft6_W_WDATA3,
	input wire [3:0] iLeft6_W_WSTRB,
	input wire iLeft6_W_WLAST,
	input wire [7:0] iLeft6_W_WUSER,
	input wire iLeft6_W_WVALID,
	input wire iLeft6_B_BREADY,
	input wire [7:0] iLeft7_AR_ARID,
	input wire [31:0] iLeft7_AR_ARADDR,
	input wire [7:0] iLeft7_AR_ARLEN,
	input wire [2:0] iLeft7_AR_ARSIZE,
	input wire [1:0] iLeft7_AR_ARBURST,
	input wire [1:0] iLeft7_AR_ARLOCK,
	input wire [3:0] iLeft7_AR_ARCACHE,
	input wire [2:0] iLeft7_AR_ARPROT,
	input wire [3:0] iLeft7_AR_ARQOS,
	input wire [7:0] iLeft7_AR_ARREGION,
	input wire [7:0] iLeft7_AR_ARUSER,
	input wire iLeft7_AR_ARVALID,
	input wire iLeft7_R_RREADY,
	input wire [7:0] iLeft7_AW_AWID,
	input wire [31:0] iLeft7_AW_AWADDR,
	input wire [7:0] iLeft7_AW_AWLEN,
	input wire [2:0] iLeft7_AW_AWSIZE,
	input wire [1:0] iLeft7_AW_AWBURST,
	input wire [1:0] iLeft7_AW_AWLOCK,
	input wire [3:0] iLeft7_AW_AWCACHE,
	input wire [2:0] iLeft7_AW_AWPROT,
	input wire [3:0] iLeft7_AW_AWQOS,
	input wire [7:0] iLeft7_AW_AWREGION,
	input wire [7:0] iLeft7_AW_AWUSER,
	input wire iLeft7_AW_AWVALID,
	input wire [7:0] iLeft7_W_WID,
	input wire [7:0] iLeft7_W_WDATA0,
	input wire [7:0] iLeft7_W_WDATA1,
	input wire [7:0] iLeft7_W_WDATA2,
	input wire [7:0] iLeft7_W_WDATA3,
	input wire [3:0] iLeft7_W_WSTRB,
	input wire iLeft7_W_WLAST,
	input wire [7:0] iLeft7_W_WUSER,
	input wire iLeft7_W_WVALID,
	input wire iLeft7_B_BREADY,
	input wire [2:0] iLeftAddr,
	input wire iLeftAddrValid,
	input wire iRight0_AR_ARREADY,
	input wire [7:0] iRight0_R_RID,
	input wire [7:0] iRight0_R_RDATA0,
	input wire [7:0] iRight0_R_RDATA1,
	input wire [7:0] iRight0_R_RDATA2,
	input wire [7:0] iRight0_R_RDATA3,
	input wire [1:0] iRight0_R_RRESP,
	input wire iRight0_R_RLAST,
	input wire [7:0] iRight0_R_RUSER,
	input wire iRight0_R_RVALID,
	input wire iRight0_AW_AWREADY,
	input wire [7:0] iRight0_B_BID,
	input wire [1:0] iRight0_B_BRESP,
	input wire [7:0] iRight0_B_BUSER,
	input wire iRight0_B_BVALID,
	input wire iRight0_W_WREADY,
	input wire iRight1_AR_ARREADY,
	input wire [7:0] iRight1_R_RID,
	input wire [7:0] iRight1_R_RDATA0,
	input wire [7:0] iRight1_R_RDATA1,
	input wire [7:0] iRight1_R_RDATA2,
	input wire [7:0] iRight1_R_RDATA3,
	input wire [1:0] iRight1_R_RRESP,
	input wire iRight1_R_RLAST,
	input wire [7:0] iRight1_R_RUSER,
	input wire iRight1_R_RVALID,
	input wire iRight1_AW_AWREADY,
	input wire [7:0] iRight1_B_BID,
	input wire [1:0] iRight1_B_BRESP,
	input wire [7:0] iRight1_B_BUSER,
	input wire iRight1_B_BVALID,
	input wire iRight1_W_WREADY,
	input wire iRight2_AR_ARREADY,
	input wire [7:0] iRight2_R_RID,
	input wire [7:0] iRight2_R_RDATA0,
	input wire [7:0] iRight2_R_RDATA1,
	input wire [7:0] iRight2_R_RDATA2,
	input wire [7:0] iRight2_R_RDATA3,
	input wire [1:0] iRight2_R_RRESP,
	input wire iRight2_R_RLAST,
	input wire [7:0] iRight2_R_RUSER,
	input wire iRight2_R_RVALID,
	input wire iRight2_AW_AWREADY,
	input wire [7:0] iRight2_B_BID,
	input wire [1:0] iRight2_B_BRESP,
	input wire [7:0] iRight2_B_BUSER,
	input wire iRight2_B_BVALID,
	input wire iRight2_W_WREADY,
	input wire iRight3_AR_ARREADY,
	input wire [7:0] iRight3_R_RID,
	input wire [7:0] iRight3_R_RDATA0,
	input wire [7:0] iRight3_R_RDATA1,
	input wire [7:0] iRight3_R_RDATA2,
	input wire [7:0] iRight3_R_RDATA3,
	input wire [1:0] iRight3_R_RRESP,
	input wire iRight3_R_RLAST,
	input wire [7:0] iRight3_R_RUSER,
	input wire iRight3_R_RVALID,
	input wire iRight3_AW_AWREADY,
	input wire [7:0] iRight3_B_BID,
	input wire [1:0] iRight3_B_BRESP,
	input wire [7:0] iRight3_B_BUSER,
	input wire iRight3_B_BVALID,
	input wire iRight3_W_WREADY,
	input wire [1:0] iRightAddr,
	input wire iRightAddrValid,
	output wire [7:0] oLeft0_AR_ARID,
	output wire [31:0] oLeft0_AR_ARADDR,
	output wire [7:0] oLeft0_AR_ARLEN,
	output wire [2:0] oLeft0_AR_ARSIZE,
	output wire [1:0] oLeft0_AR_ARBURST,
	output wire [1:0] oLeft0_AR_ARLOCK,
	output wire [3:0] oLeft0_AR_ARCACHE,
	output wire [2:0] oLeft0_AR_ARPROT,
	output wire [3:0] oLeft0_AR_ARQOS,
	output wire [7:0] oLeft0_AR_ARREGION,
	output wire [7:0] oLeft0_AR_ARUSER,
	output wire oLeft0_AR_ARVALID,
	output wire oLeft0_R_RREADY,
	output wire [7:0] oLeft0_AW_AWID,
	output wire [31:0] oLeft0_AW_AWADDR,
	output wire [7:0] oLeft0_AW_AWLEN,
	output wire [2:0] oLeft0_AW_AWSIZE,
	output wire [1:0] oLeft0_AW_AWBURST,
	output wire [1:0] oLeft0_AW_AWLOCK,
	output wire [3:0] oLeft0_AW_AWCACHE,
	output wire [2:0] oLeft0_AW_AWPROT,
	output wire [3:0] oLeft0_AW_AWQOS,
	output wire [7:0] oLeft0_AW_AWREGION,
	output wire [7:0] oLeft0_AW_AWUSER,
	output wire oLeft0_AW_AWVALID,
	output wire [7:0] oLeft0_W_WID,
	output wire [7:0] oLeft0_W_WDATA0,
	output wire [7:0] oLeft0_W_WDATA1,
	output wire [7:0] oLeft0_W_WDATA2,
	output wire [7:0] oLeft0_W_WDATA3,
	output wire [3:0] oLeft0_W_WSTRB,
	output wire oLeft0_W_WLAST,
	output wire [7:0] oLeft0_W_WUSER,
	output wire oLeft0_W_WVALID,
	output wire oLeft0_B_BREADY,
	output wire [7:0] oLeft1_AR_ARID,
	output wire [31:0] oLeft1_AR_ARADDR,
	output wire [7:0] oLeft1_AR_ARLEN,
	output wire [2:0] oLeft1_AR_ARSIZE,
	output wire [1:0] oLeft1_AR_ARBURST,
	output wire [1:0] oLeft1_AR_ARLOCK,
	output wire [3:0] oLeft1_AR_ARCACHE,
	output wire [2:0] oLeft1_AR_ARPROT,
	output wire [3:0] oLeft1_AR_ARQOS,
	output wire [7:0] oLeft1_AR_ARREGION,
	output wire [7:0] oLeft1_AR_ARUSER,
	output wire oLeft1_AR_ARVALID,
	output wire oLeft1_R_RREADY,
	output wire [7:0] oLeft1_AW_AWID,
	output wire [31:0] oLeft1_AW_AWADDR,
	output wire [7:0] oLeft1_AW_AWLEN,
	output wire [2:0] oLeft1_AW_AWSIZE,
	output wire [1:0] oLeft1_AW_AWBURST,
	output wire [1:0] oLeft1_AW_AWLOCK,
	output wire [3:0] oLeft1_AW_AWCACHE,
	output wire [2:0] oLeft1_AW_AWPROT,
	output wire [3:0] oLeft1_AW_AWQOS,
	output wire [7:0] oLeft1_AW_AWREGION,
	output wire [7:0] oLeft1_AW_AWUSER,
	output wire oLeft1_AW_AWVALID,
	output wire [7:0] oLeft1_W_WID,
	output wire [7:0] oLeft1_W_WDATA0,
	output wire [7:0] oLeft1_W_WDATA1,
	output wire [7:0] oLeft1_W_WDATA2,
	output wire [7:0] oLeft1_W_WDATA3,
	output wire [3:0] oLeft1_W_WSTRB,
	output wire oLeft1_W_WLAST,
	output wire [7:0] oLeft1_W_WUSER,
	output wire oLeft1_W_WVALID,
	output wire oLeft1_B_BREADY,
	output wire [7:0] oLeft2_AR_ARID,
	output wire [31:0] oLeft2_AR_ARADDR,
	output wire [7:0] oLeft2_AR_ARLEN,
	output wire [2:0] oLeft2_AR_ARSIZE,
	output wire [1:0] oLeft2_AR_ARBURST,
	output wire [1:0] oLeft2_AR_ARLOCK,
	output wire [3:0] oLeft2_AR_ARCACHE,
	output wire [2:0] oLeft2_AR_ARPROT,
	output wire [3:0] oLeft2_AR_ARQOS,
	output wire [7:0] oLeft2_AR_ARREGION,
	output wire [7:0] oLeft2_AR_ARUSER,
	output wire oLeft2_AR_ARVALID,
	output wire oLeft2_R_RREADY,
	output wire [7:0] oLeft2_AW_AWID,
	output wire [31:0] oLeft2_AW_AWADDR,
	output wire [7:0] oLeft2_AW_AWLEN,
	output wire [2:0] oLeft2_AW_AWSIZE,
	output wire [1:0] oLeft2_AW_AWBURST,
	output wire [1:0] oLeft2_AW_AWLOCK,
	output wire [3:0] oLeft2_AW_AWCACHE,
	output wire [2:0] oLeft2_AW_AWPROT,
	output wire [3:0] oLeft2_AW_AWQOS,
	output wire [7:0] oLeft2_AW_AWREGION,
	output wire [7:0] oLeft2_AW_AWUSER,
	output wire oLeft2_AW_AWVALID,
	output wire [7:0] oLeft2_W_WID,
	output wire [7:0] oLeft2_W_WDATA0,
	output wire [7:0] oLeft2_W_WDATA1,
	output wire [7:0] oLeft2_W_WDATA2,
	output wire [7:0] oLeft2_W_WDATA3,
	output wire [3:0] oLeft2_W_WSTRB,
	output wire oLeft2_W_WLAST,
	output wire [7:0] oLeft2_W_WUSER,
	output wire oLeft2_W_WVALID,
	output wire oLeft2_B_BREADY,
	output wire [7:0] oLeft3_AR_ARID,
	output wire [31:0] oLeft3_AR_ARADDR,
	output wire [7:0] oLeft3_AR_ARLEN,
	output wire [2:0] oLeft3_AR_ARSIZE,
	output wire [1:0] oLeft3_AR_ARBURST,
	output wire [1:0] oLeft3_AR_ARLOCK,
	output wire [3:0] oLeft3_AR_ARCACHE,
	output wire [2:0] oLeft3_AR_ARPROT,
	output wire [3:0] oLeft3_AR_ARQOS,
	output wire [7:0] oLeft3_AR_ARREGION,
	output wire [7:0] oLeft3_AR_ARUSER,
	output wire oLeft3_AR_ARVALID,
	output wire oLeft3_R_RREADY,
	output wire [7:0] oLeft3_AW_AWID,
	output wire [31:0] oLeft3_AW_AWADDR,
	output wire [7:0] oLeft3_AW_AWLEN,
	output wire [2:0] oLeft3_AW_AWSIZE,
	output wire [1:0] oLeft3_AW_AWBURST,
	output wire [1:0] oLeft3_AW_AWLOCK,
	output wire [3:0] oLeft3_AW_AWCACHE,
	output wire [2:0] oLeft3_AW_AWPROT,
	output wire [3:0] oLeft3_AW_AWQOS,
	output wire [7:0] oLeft3_AW_AWREGION,
	output wire [7:0] oLeft3_AW_AWUSER,
	output wire oLeft3_AW_AWVALID,
	output wire [7:0] oLeft3_W_WID,
	output wire [7:0] oLeft3_W_WDATA0,
	output wire [7:0] oLeft3_W_WDATA1,
	output wire [7:0] oLeft3_W_WDATA2,
	output wire [7:0] oLeft3_W_WDATA3,
	output wire [3:0] oLeft3_W_WSTRB,
	output wire oLeft3_W_WLAST,
	output wire [7:0] oLeft3_W_WUSER,
	output wire oLeft3_W_WVALID,
	output wire oLeft3_B_BREADY,
	output wire [7:0] oMuxLeftData_AR_ARID,
	output wire [31:0] oMuxLeftData_AR_ARADDR,
	output wire [7:0] oMuxLeftData_AR_ARLEN,
	output wire [2:0] oMuxLeftData_AR_ARSIZE,
	output wire [1:0] oMuxLeftData_AR_ARBURST,
	output wire [1:0] oMuxLeftData_AR_ARLOCK,
	output wire [3:0] oMuxLeftData_AR_ARCACHE,
	output wire [2:0] oMuxLeftData_AR_ARPROT,
	output wire [3:0] oMuxLeftData_AR_ARQOS,
	output wire [7:0] oMuxLeftData_AR_ARREGION,
	output wire [7:0] oMuxLeftData_AR_ARUSER,
	output wire oMuxLeftData_AR_ARVALID,
	output wire oMuxLeftData_R_RREADY,
	output wire [7:0] oMuxLeftData_AW_AWID,
	output wire [31:0] oMuxLeftData_AW_AWADDR,
	output wire [7:0] oMuxLeftData_AW_AWLEN,
	output wire [2:0] oMuxLeftData_AW_AWSIZE,
	output wire [1:0] oMuxLeftData_AW_AWBURST,
	output wire [1:0] oMuxLeftData_AW_AWLOCK,
	output wire [3:0] oMuxLeftData_AW_AWCACHE,
	output wire [2:0] oMuxLeftData_AW_AWPROT,
	output wire [3:0] oMuxLeftData_AW_AWQOS,
	output wire [7:0] oMuxLeftData_AW_AWREGION,
	output wire [7:0] oMuxLeftData_AW_AWUSER,
	output wire oMuxLeftData_AW_AWVALID,
	output wire [7:0] oMuxLeftData_W_WID,
	output wire [7:0] oMuxLeftData_W_WDATA0,
	output wire [7:0] oMuxLeftData_W_WDATA1,
	output wire [7:0] oMuxLeftData_W_WDATA2,
	output wire [7:0] oMuxLeftData_W_WDATA3,
	output wire [3:0] oMuxLeftData_W_WSTRB,
	output wire oMuxLeftData_W_WLAST,
	output wire [7:0] oMuxLeftData_W_WUSER,
	output wire oMuxLeftData_W_WVALID,
	output wire oMuxLeftData_B_BREADY,
	output wire oMuxRightData_AR_ARREADY,
	output wire [7:0] oMuxRightData_R_RID,
	output wire [7:0] oMuxRightData_R_RDATA0,
	output wire [7:0] oMuxRightData_R_RDATA1,
	output wire [7:0] oMuxRightData_R_RDATA2,
	output wire [7:0] oMuxRightData_R_RDATA3,
	output wire [1:0] oMuxRightData_R_RRESP,
	output wire oMuxRightData_R_RLAST,
	output wire [7:0] oMuxRightData_R_RUSER,
	output wire oMuxRightData_R_RVALID,
	output wire oMuxRightData_AW_AWREADY,
	output wire [7:0] oMuxRightData_B_BID,
	output wire [1:0] oMuxRightData_B_BRESP,
	output wire [7:0] oMuxRightData_B_BUSER,
	output wire oMuxRightData_B_BVALID,
	output wire oMuxRightData_W_WREADY,
	output wire oRight0_AR_ARREADY,
	output wire [7:0] oRight0_R_RID,
	output wire [7:0] oRight0_R_RDATA0,
	output wire [7:0] oRight0_R_RDATA1,
	output wire [7:0] oRight0_R_RDATA2,
	output wire [7:0] oRight0_R_RDATA3,
	output wire [1:0] oRight0_R_RRESP,
	output wire oRight0_R_RLAST,
	output wire [7:0] oRight0_R_RUSER,
	output wire oRight0_R_RVALID,
	output wire oRight0_AW_AWREADY,
	output wire [7:0] oRight0_B_BID,
	output wire [1:0] oRight0_B_BRESP,
	output wire [7:0] oRight0_B_BUSER,
	output wire oRight0_B_BVALID,
	output wire oRight0_W_WREADY,
	output wire oRight1_AR_ARREADY,
	output wire [7:0] oRight1_R_RID,
	output wire [7:0] oRight1_R_RDATA0,
	output wire [7:0] oRight1_R_RDATA1,
	output wire [7:0] oRight1_R_RDATA2,
	output wire [7:0] oRight1_R_RDATA3,
	output wire [1:0] oRight1_R_RRESP,
	output wire oRight1_R_RLAST,
	output wire [7:0] oRight1_R_RUSER,
	output wire oRight1_R_RVALID,
	output wire oRight1_AW_AWREADY,
	output wire [7:0] oRight1_B_BID,
	output wire [1:0] oRight1_B_BRESP,
	output wire [7:0] oRight1_B_BUSER,
	output wire oRight1_B_BVALID,
	output wire oRight1_W_WREADY,
	output wire oRight2_AR_ARREADY,
	output wire [7:0] oRight2_R_RID,
	output wire [7:0] oRight2_R_RDATA0,
	output wire [7:0] oRight2_R_RDATA1,
	output wire [7:0] oRight2_R_RDATA2,
	output wire [7:0] oRight2_R_RDATA3,
	output wire [1:0] oRight2_R_RRESP,
	output wire oRight2_R_RLAST,
	output wire [7:0] oRight2_R_RUSER,
	output wire oRight2_R_RVALID,
	output wire oRight2_AW_AWREADY,
	output wire [7:0] oRight2_B_BID,
	output wire [1:0] oRight2_B_BRESP,
	output wire [7:0] oRight2_B_BUSER,
	output wire oRight2_B_BVALID,
	output wire oRight2_W_WREADY,
	output wire oRight3_AR_ARREADY,
	output wire [7:0] oRight3_R_RID,
	output wire [7:0] oRight3_R_RDATA0,
	output wire [7:0] oRight3_R_RDATA1,
	output wire [7:0] oRight3_R_RDATA2,
	output wire [7:0] oRight3_R_RDATA3,
	output wire [1:0] oRight3_R_RRESP,
	output wire oRight3_R_RLAST,
	output wire [7:0] oRight3_R_RUSER,
	output wire oRight3_R_RVALID,
	output wire oRight3_AW_AWREADY,
	output wire [7:0] oRight3_B_BID,
	output wire [1:0] oRight3_B_BRESP,
	output wire [7:0] oRight3_B_BUSER,
	output wire oRight3_B_BVALID,
	output wire oRight3_W_WREADY,
	output wire oRight4_AR_ARREADY,
	output wire [7:0] oRight4_R_RID,
	output wire [7:0] oRight4_R_RDATA0,
	output wire [7:0] oRight4_R_RDATA1,
	output wire [7:0] oRight4_R_RDATA2,
	output wire [7:0] oRight4_R_RDATA3,
	output wire [1:0] oRight4_R_RRESP,
	output wire oRight4_R_RLAST,
	output wire [7:0] oRight4_R_RUSER,
	output wire oRight4_R_RVALID,
	output wire oRight4_AW_AWREADY,
	output wire [7:0] oRight4_B_BID,
	output wire [1:0] oRight4_B_BRESP,
	output wire [7:0] oRight4_B_BUSER,
	output wire oRight4_B_BVALID,
	output wire oRight4_W_WREADY,
	output wire oRight5_AR_ARREADY,
	output wire [7:0] oRight5_R_RID,
	output wire [7:0] oRight5_R_RDATA0,
	output wire [7:0] oRight5_R_RDATA1,
	output wire [7:0] oRight5_R_RDATA2,
	output wire [7:0] oRight5_R_RDATA3,
	output wire [1:0] oRight5_R_RRESP,
	output wire oRight5_R_RLAST,
	output wire [7:0] oRight5_R_RUSER,
	output wire oRight5_R_RVALID,
	output wire oRight5_AW_AWREADY,
	output wire [7:0] oRight5_B_BID,
	output wire [1:0] oRight5_B_BRESP,
	output wire [7:0] oRight5_B_BUSER,
	output wire oRight5_B_BVALID,
	output wire oRight5_W_WREADY,
	output wire oRight6_AR_ARREADY,
	output wire [7:0] oRight6_R_RID,
	output wire [7:0] oRight6_R_RDATA0,
	output wire [7:0] oRight6_R_RDATA1,
	output wire [7:0] oRight6_R_RDATA2,
	output wire [7:0] oRight6_R_RDATA3,
	output wire [1:0] oRight6_R_RRESP,
	output wire oRight6_R_RLAST,
	output wire [7:0] oRight6_R_RUSER,
	output wire oRight6_R_RVALID,
	output wire oRight6_AW_AWREADY,
	output wire [7:0] oRight6_B_BID,
	output wire [1:0] oRight6_B_BRESP,
	output wire [7:0] oRight6_B_BUSER,
	output wire oRight6_B_BVALID,
	output wire oRight6_W_WREADY,
	output wire oRight7_AR_ARREADY,
	output wire [7:0] oRight7_R_RID,
	output wire [7:0] oRight7_R_RDATA0,
	output wire [7:0] oRight7_R_RDATA1,
	output wire [7:0] oRight7_R_RDATA2,
	output wire [7:0] oRight7_R_RDATA3,
	output wire [1:0] oRight7_R_RRESP,
	output wire oRight7_R_RLAST,
	output wire [7:0] oRight7_R_RUSER,
	output wire oRight7_R_RVALID,
	output wire oRight7_AW_AWREADY,
	output wire [7:0] oRight7_B_BID,
	output wire [1:0] oRight7_B_BRESP,
	output wire [7:0] oRight7_B_BUSER,
	output wire oRight7_B_BVALID,
	output wire oRight7_W_WREADY
);
	// [BEGIN USER SIGNALS]
	// [END USER SIGNALS]
	localparam HiSignal = 1'b1;
	localparam LoSignal = 1'b0;
	wire Zero = 1'b0;
	wire One = 1'b1;
	wire true = 1'b1;
	wire false = 1'b0;
	wire signed [4: 0] leftCount = 5'b01000;
	wire signed [3: 0] rightCount = 4'b0100;
	wire [0: 0] Prefilled0 = 1'b0;
	wire [0: 0] Prefilled1 = 1'b1;
	wire [1: 0] Prefilled2 = 2'b10;
	wire [1: 0] Prefilled3 = 2'b11;
	wire [2: 0] Prefilled4 = 3'b100;
	wire [2: 0] Prefilled5 = 3'b101;
	wire [2: 0] Prefilled6 = 3'b110;
	wire [2: 0] Prefilled7 = 3'b111;
	wire [2: 0] Inputs_iLeftAddr;
	wire Inputs_iLeftAddrValid;
	wire [1: 0] Inputs_iRightAddr;
	wire Inputs_iRightAddrValid;
	reg [7: 0] mEmptyLeftData_AR_ARID;
	reg [31: 0] mEmptyLeftData_AR_ARADDR;
	reg [7: 0] mEmptyLeftData_AR_ARLEN;
	reg [2: 0] mEmptyLeftData_AR_ARSIZE;
	reg [1: 0] mEmptyLeftData_AR_ARBURST;
	reg [1: 0] mEmptyLeftData_AR_ARLOCK;
	reg [3: 0] mEmptyLeftData_AR_ARCACHE;
	reg [2: 0] mEmptyLeftData_AR_ARPROT;
	reg [3: 0] mEmptyLeftData_AR_ARQOS;
	reg [7: 0] mEmptyLeftData_AR_ARREGION;
	reg [7: 0] mEmptyLeftData_AR_ARUSER;
	reg mEmptyLeftData_AR_ARVALID;
	reg mEmptyLeftData_R_RREADY;
	reg [7: 0] mEmptyLeftData_AW_AWID;
	reg [31: 0] mEmptyLeftData_AW_AWADDR;
	reg [7: 0] mEmptyLeftData_AW_AWLEN;
	reg [2: 0] mEmptyLeftData_AW_AWSIZE;
	reg [1: 0] mEmptyLeftData_AW_AWBURST;
	reg [1: 0] mEmptyLeftData_AW_AWLOCK;
	reg [3: 0] mEmptyLeftData_AW_AWCACHE;
	reg [2: 0] mEmptyLeftData_AW_AWPROT;
	reg [3: 0] mEmptyLeftData_AW_AWQOS;
	reg [7: 0] mEmptyLeftData_AW_AWREGION;
	reg [7: 0] mEmptyLeftData_AW_AWUSER;
	reg mEmptyLeftData_AW_AWVALID;
	reg [7: 0] mEmptyLeftData_W_WID;
	reg [3: 0] mEmptyLeftData_W_WSTRB;
	reg mEmptyLeftData_W_WLAST;
	reg [7: 0] mEmptyLeftData_W_WUSER;
	reg mEmptyLeftData_W_WVALID;
	reg mEmptyLeftData_B_BREADY;
	reg mEmptyRightData_AR_ARREADY;
	reg [7: 0] mEmptyRightData_R_RID;
	reg [1: 0] mEmptyRightData_R_RRESP;
	reg mEmptyRightData_R_RLAST;
	reg [7: 0] mEmptyRightData_R_RUSER;
	reg mEmptyRightData_R_RVALID;
	reg mEmptyRightData_AW_AWREADY;
	reg [7: 0] mEmptyRightData_B_BID;
	reg [1: 0] mEmptyRightData_B_BRESP;
	reg [7: 0] mEmptyRightData_B_BUSER;
	reg mEmptyRightData_B_BVALID;
	reg mEmptyRightData_W_WREADY;
	reg [7: 0] mMuxLeftData_AR_ARID;
	reg [31: 0] mMuxLeftData_AR_ARADDR;
	reg [7: 0] mMuxLeftData_AR_ARLEN;
	reg [2: 0] mMuxLeftData_AR_ARSIZE;
	reg [1: 0] mMuxLeftData_AR_ARBURST;
	reg [1: 0] mMuxLeftData_AR_ARLOCK;
	reg [3: 0] mMuxLeftData_AR_ARCACHE;
	reg [2: 0] mMuxLeftData_AR_ARPROT;
	reg [3: 0] mMuxLeftData_AR_ARQOS;
	reg [7: 0] mMuxLeftData_AR_ARREGION;
	reg [7: 0] mMuxLeftData_AR_ARUSER;
	reg mMuxLeftData_AR_ARVALID;
	reg mMuxLeftData_R_RREADY;
	reg [7: 0] mMuxLeftData_AW_AWID;
	reg [31: 0] mMuxLeftData_AW_AWADDR;
	reg [7: 0] mMuxLeftData_AW_AWLEN;
	reg [2: 0] mMuxLeftData_AW_AWSIZE;
	reg [1: 0] mMuxLeftData_AW_AWBURST;
	reg [1: 0] mMuxLeftData_AW_AWLOCK;
	reg [3: 0] mMuxLeftData_AW_AWCACHE;
	reg [2: 0] mMuxLeftData_AW_AWPROT;
	reg [3: 0] mMuxLeftData_AW_AWQOS;
	reg [7: 0] mMuxLeftData_AW_AWREGION;
	reg [7: 0] mMuxLeftData_AW_AWUSER;
	reg mMuxLeftData_AW_AWVALID;
	reg [7: 0] mMuxLeftData_W_WID;
	reg [3: 0] mMuxLeftData_W_WSTRB;
	reg mMuxLeftData_W_WLAST;
	reg [7: 0] mMuxLeftData_W_WUSER;
	reg mMuxLeftData_W_WVALID;
	reg mMuxLeftData_B_BREADY;
	reg mMuxRightData_AR_ARREADY;
	reg [7: 0] mMuxRightData_R_RID;
	reg [1: 0] mMuxRightData_R_RRESP;
	reg mMuxRightData_R_RLAST;
	reg [7: 0] mMuxRightData_R_RUSER;
	reg mMuxRightData_R_RVALID;
	reg mMuxRightData_AW_AWREADY;
	reg [7: 0] mMuxRightData_B_BID;
	reg [1: 0] mMuxRightData_B_BRESP;
	reg [7: 0] mMuxRightData_B_BUSER;
	reg mMuxRightData_B_BVALID;
	reg mMuxRightData_W_WREADY;
	wire FullDuplexMuxModule_L94F13L104T14_0_FullDuplexMuxModule_L96F21T78_Expr;
	wire FullDuplexMuxModule_L94F13L104T14_0_FullDuplexMuxModule_L96F21T78_Expr_1;
	wire FullDuplexMuxModule_L94F13L104T14_0_FullDuplexMuxModule_L96F21T78_Expr_2;
	wire FullDuplexMuxModule_L94F13L104T14_1_FullDuplexMuxModule_L96F21T78_Expr;
	wire FullDuplexMuxModule_L94F13L104T14_1_FullDuplexMuxModule_L96F21T78_Expr_1;
	wire FullDuplexMuxModule_L94F13L104T14_1_FullDuplexMuxModule_L96F21T78_Expr_2;
	wire FullDuplexMuxModule_L94F13L104T14_2_FullDuplexMuxModule_L96F21T78_Expr;
	wire FullDuplexMuxModule_L94F13L104T14_2_FullDuplexMuxModule_L96F21T78_Expr_1;
	wire FullDuplexMuxModule_L94F13L104T14_2_FullDuplexMuxModule_L96F21T78_Expr_2;
	wire FullDuplexMuxModule_L94F13L104T14_3_FullDuplexMuxModule_L96F21T78_Expr;
	wire FullDuplexMuxModule_L94F13L104T14_3_FullDuplexMuxModule_L96F21T78_Expr_1;
	wire FullDuplexMuxModule_L94F13L104T14_3_FullDuplexMuxModule_L96F21T78_Expr_2;
	wire FullDuplexMuxModule_L118F13L128T14_0_FullDuplexMuxModule_L120F21T75_Expr;
	wire FullDuplexMuxModule_L118F13L128T14_0_FullDuplexMuxModule_L120F21T75_Expr_1;
	wire FullDuplexMuxModule_L118F13L128T14_0_FullDuplexMuxModule_L120F21T75_Expr_2;
	wire FullDuplexMuxModule_L118F13L128T14_1_FullDuplexMuxModule_L120F21T75_Expr;
	wire FullDuplexMuxModule_L118F13L128T14_1_FullDuplexMuxModule_L120F21T75_Expr_1;
	wire FullDuplexMuxModule_L118F13L128T14_1_FullDuplexMuxModule_L120F21T75_Expr_2;
	wire FullDuplexMuxModule_L118F13L128T14_2_FullDuplexMuxModule_L120F21T75_Expr;
	wire FullDuplexMuxModule_L118F13L128T14_2_FullDuplexMuxModule_L120F21T75_Expr_1;
	wire FullDuplexMuxModule_L118F13L128T14_2_FullDuplexMuxModule_L120F21T75_Expr_2;
	wire FullDuplexMuxModule_L118F13L128T14_3_FullDuplexMuxModule_L120F21T75_Expr;
	wire FullDuplexMuxModule_L118F13L128T14_3_FullDuplexMuxModule_L120F21T75_Expr_1;
	wire FullDuplexMuxModule_L118F13L128T14_3_FullDuplexMuxModule_L120F21T75_Expr_2;
	wire FullDuplexMuxModule_L118F13L128T14_4_FullDuplexMuxModule_L120F21T75_Expr;
	wire FullDuplexMuxModule_L118F13L128T14_4_FullDuplexMuxModule_L120F21T75_Expr_1;
	wire FullDuplexMuxModule_L118F13L128T14_4_FullDuplexMuxModule_L120F21T75_Expr_2;
	wire FullDuplexMuxModule_L118F13L128T14_5_FullDuplexMuxModule_L120F21T75_Expr;
	wire FullDuplexMuxModule_L118F13L128T14_5_FullDuplexMuxModule_L120F21T75_Expr_1;
	wire FullDuplexMuxModule_L118F13L128T14_5_FullDuplexMuxModule_L120F21T75_Expr_2;
	wire FullDuplexMuxModule_L118F13L128T14_6_FullDuplexMuxModule_L120F21T75_Expr;
	wire FullDuplexMuxModule_L118F13L128T14_6_FullDuplexMuxModule_L120F21T75_Expr_1;
	wire FullDuplexMuxModule_L118F13L128T14_6_FullDuplexMuxModule_L120F21T75_Expr_2;
	wire FullDuplexMuxModule_L118F13L128T14_7_FullDuplexMuxModule_L120F21T75_Expr;
	wire FullDuplexMuxModule_L118F13L128T14_7_FullDuplexMuxModule_L120F21T75_Expr_1;
	wire FullDuplexMuxModule_L118F13L128T14_7_FullDuplexMuxModule_L120F21T75_Expr_2;
	wire FullDuplexMuxModule_L94F13L104T14_0_FullDuplexMuxModule_L96F47T78_Expr;
	wire signed [2: 0] FullDuplexMuxModule_L94F13L104T14_0_FullDuplexMuxModule_L96F47T78_ExprLhs;
	wire signed [2: 0] FullDuplexMuxModule_L94F13L104T14_0_FullDuplexMuxModule_L96F47T78_ExprRhs;
	wire FullDuplexMuxModule_L94F13L104T14_1_FullDuplexMuxModule_L96F47T78_Expr;
	wire signed [2: 0] FullDuplexMuxModule_L94F13L104T14_1_FullDuplexMuxModule_L96F47T78_ExprLhs;
	wire signed [2: 0] FullDuplexMuxModule_L94F13L104T14_1_FullDuplexMuxModule_L96F47T78_ExprRhs;
	wire FullDuplexMuxModule_L94F13L104T14_2_FullDuplexMuxModule_L96F47T78_Expr;
	wire signed [2: 0] FullDuplexMuxModule_L94F13L104T14_2_FullDuplexMuxModule_L96F47T78_ExprLhs;
	wire signed [2: 0] FullDuplexMuxModule_L94F13L104T14_2_FullDuplexMuxModule_L96F47T78_ExprRhs;
	wire FullDuplexMuxModule_L94F13L104T14_3_FullDuplexMuxModule_L96F47T78_Expr;
	wire signed [2: 0] FullDuplexMuxModule_L94F13L104T14_3_FullDuplexMuxModule_L96F47T78_ExprLhs;
	wire signed [2: 0] FullDuplexMuxModule_L94F13L104T14_3_FullDuplexMuxModule_L96F47T78_ExprRhs;
	wire FullDuplexMuxModule_L118F13L128T14_0_FullDuplexMuxModule_L120F46T75_Expr;
	wire signed [3: 0] FullDuplexMuxModule_L118F13L128T14_0_FullDuplexMuxModule_L120F46T75_ExprLhs;
	wire signed [3: 0] FullDuplexMuxModule_L118F13L128T14_0_FullDuplexMuxModule_L120F46T75_ExprRhs;
	wire FullDuplexMuxModule_L118F13L128T14_1_FullDuplexMuxModule_L120F46T75_Expr;
	wire signed [3: 0] FullDuplexMuxModule_L118F13L128T14_1_FullDuplexMuxModule_L120F46T75_ExprLhs;
	wire signed [3: 0] FullDuplexMuxModule_L118F13L128T14_1_FullDuplexMuxModule_L120F46T75_ExprRhs;
	wire FullDuplexMuxModule_L118F13L128T14_2_FullDuplexMuxModule_L120F46T75_Expr;
	wire signed [3: 0] FullDuplexMuxModule_L118F13L128T14_2_FullDuplexMuxModule_L120F46T75_ExprLhs;
	wire signed [3: 0] FullDuplexMuxModule_L118F13L128T14_2_FullDuplexMuxModule_L120F46T75_ExprRhs;
	wire FullDuplexMuxModule_L118F13L128T14_3_FullDuplexMuxModule_L120F46T75_Expr;
	wire signed [3: 0] FullDuplexMuxModule_L118F13L128T14_3_FullDuplexMuxModule_L120F46T75_ExprLhs;
	wire signed [3: 0] FullDuplexMuxModule_L118F13L128T14_3_FullDuplexMuxModule_L120F46T75_ExprRhs;
	wire FullDuplexMuxModule_L118F13L128T14_4_FullDuplexMuxModule_L120F46T75_Expr;
	wire signed [3: 0] FullDuplexMuxModule_L118F13L128T14_4_FullDuplexMuxModule_L120F46T75_ExprLhs;
	wire signed [3: 0] FullDuplexMuxModule_L118F13L128T14_4_FullDuplexMuxModule_L120F46T75_ExprRhs;
	wire FullDuplexMuxModule_L118F13L128T14_5_FullDuplexMuxModule_L120F46T75_Expr;
	wire signed [3: 0] FullDuplexMuxModule_L118F13L128T14_5_FullDuplexMuxModule_L120F46T75_ExprLhs;
	wire signed [3: 0] FullDuplexMuxModule_L118F13L128T14_5_FullDuplexMuxModule_L120F46T75_ExprRhs;
	wire FullDuplexMuxModule_L118F13L128T14_6_FullDuplexMuxModule_L120F46T75_Expr;
	wire signed [3: 0] FullDuplexMuxModule_L118F13L128T14_6_FullDuplexMuxModule_L120F46T75_ExprLhs;
	wire signed [3: 0] FullDuplexMuxModule_L118F13L128T14_6_FullDuplexMuxModule_L120F46T75_ExprRhs;
	wire FullDuplexMuxModule_L118F13L128T14_7_FullDuplexMuxModule_L120F46T75_Expr;
	wire signed [3: 0] FullDuplexMuxModule_L118F13L128T14_7_FullDuplexMuxModule_L120F46T75_ExprLhs;
	wire signed [3: 0] FullDuplexMuxModule_L118F13L128T14_7_FullDuplexMuxModule_L120F46T75_ExprRhs;
	wire [221 : 0] Inputs_iLeft [0 : 7];
	wire [73 : 0] Inputs_iRight [0 : 3];
	reg [7 : 0] mEmptyLeftData_W_WDATA [0 : 3];
	integer mEmptyLeftData_W_WDATA_i;
	initial
	begin : Init_mEmptyLeftData_W_WDATA
		for (mEmptyLeftData_W_WDATA_i = 0; mEmptyLeftData_W_WDATA_i < 4; mEmptyLeftData_W_WDATA_i = mEmptyLeftData_W_WDATA_i + 1)
			mEmptyLeftData_W_WDATA[mEmptyLeftData_W_WDATA_i] = 0;
	end
	reg [7 : 0] mEmptyRightData_R_RDATA [0 : 3];
	integer mEmptyRightData_R_RDATA_i;
	initial
	begin : Init_mEmptyRightData_R_RDATA
		for (mEmptyRightData_R_RDATA_i = 0; mEmptyRightData_R_RDATA_i < 4; mEmptyRightData_R_RDATA_i = mEmptyRightData_R_RDATA_i + 1)
			mEmptyRightData_R_RDATA[mEmptyRightData_R_RDATA_i] = 0;
	end
	reg [7 : 0] mMuxLeftData_W_WDATA [0 : 3];
	integer mMuxLeftData_W_WDATA_i;
	initial
	begin : Init_mMuxLeftData_W_WDATA
		for (mMuxLeftData_W_WDATA_i = 0; mMuxLeftData_W_WDATA_i < 4; mMuxLeftData_W_WDATA_i = mMuxLeftData_W_WDATA_i + 1)
			mMuxLeftData_W_WDATA[mMuxLeftData_W_WDATA_i] = 0;
	end
	reg [7 : 0] mMuxRightData_R_RDATA [0 : 3];
	integer mMuxRightData_R_RDATA_i;
	initial
	begin : Init_mMuxRightData_R_RDATA
		for (mMuxRightData_R_RDATA_i = 0; mMuxRightData_R_RDATA_i < 4; mMuxRightData_R_RDATA_i = mMuxRightData_R_RDATA_i + 1)
			mMuxRightData_R_RDATA[mMuxRightData_R_RDATA_i] = 0;
	end
	reg [221 : 0] mOutLeftData [0 : 3];
	integer mOutLeftData_i;
	initial
	begin : Init_mOutLeftData
		for (mOutLeftData_i = 0; mOutLeftData_i < 4; mOutLeftData_i = mOutLeftData_i + 1)
			mOutLeftData[mOutLeftData_i] = 0;
	end
	reg [73 : 0] mOutRightData [0 : 7];
	integer mOutRightData_i;
	initial
	begin : Init_mOutRightData
		for (mOutRightData_i = 0; mOutRightData_i < 8; mOutRightData_i = mOutRightData_i + 1)
			mOutRightData[mOutRightData_i] = 0;
	end
	assign FullDuplexMuxModule_L94F13L104T14_0_FullDuplexMuxModule_L96F47T78_Expr = FullDuplexMuxModule_L94F13L104T14_0_FullDuplexMuxModule_L96F47T78_ExprLhs == FullDuplexMuxModule_L94F13L104T14_0_FullDuplexMuxModule_L96F47T78_ExprRhs ? 1'b1 : 1'b0;
	assign FullDuplexMuxModule_L94F13L104T14_1_FullDuplexMuxModule_L96F47T78_Expr = FullDuplexMuxModule_L94F13L104T14_1_FullDuplexMuxModule_L96F47T78_ExprLhs == FullDuplexMuxModule_L94F13L104T14_1_FullDuplexMuxModule_L96F47T78_ExprRhs ? 1'b1 : 1'b0;
	assign FullDuplexMuxModule_L94F13L104T14_2_FullDuplexMuxModule_L96F47T78_Expr = FullDuplexMuxModule_L94F13L104T14_2_FullDuplexMuxModule_L96F47T78_ExprLhs == FullDuplexMuxModule_L94F13L104T14_2_FullDuplexMuxModule_L96F47T78_ExprRhs ? 1'b1 : 1'b0;
	assign FullDuplexMuxModule_L94F13L104T14_3_FullDuplexMuxModule_L96F47T78_Expr = FullDuplexMuxModule_L94F13L104T14_3_FullDuplexMuxModule_L96F47T78_ExprLhs == FullDuplexMuxModule_L94F13L104T14_3_FullDuplexMuxModule_L96F47T78_ExprRhs ? 1'b1 : 1'b0;
	assign FullDuplexMuxModule_L118F13L128T14_0_FullDuplexMuxModule_L120F46T75_Expr = FullDuplexMuxModule_L118F13L128T14_0_FullDuplexMuxModule_L120F46T75_ExprLhs == FullDuplexMuxModule_L118F13L128T14_0_FullDuplexMuxModule_L120F46T75_ExprRhs ? 1'b1 : 1'b0;
	assign FullDuplexMuxModule_L118F13L128T14_1_FullDuplexMuxModule_L120F46T75_Expr = FullDuplexMuxModule_L118F13L128T14_1_FullDuplexMuxModule_L120F46T75_ExprLhs == FullDuplexMuxModule_L118F13L128T14_1_FullDuplexMuxModule_L120F46T75_ExprRhs ? 1'b1 : 1'b0;
	assign FullDuplexMuxModule_L118F13L128T14_2_FullDuplexMuxModule_L120F46T75_Expr = FullDuplexMuxModule_L118F13L128T14_2_FullDuplexMuxModule_L120F46T75_ExprLhs == FullDuplexMuxModule_L118F13L128T14_2_FullDuplexMuxModule_L120F46T75_ExprRhs ? 1'b1 : 1'b0;
	assign FullDuplexMuxModule_L118F13L128T14_3_FullDuplexMuxModule_L120F46T75_Expr = FullDuplexMuxModule_L118F13L128T14_3_FullDuplexMuxModule_L120F46T75_ExprLhs == FullDuplexMuxModule_L118F13L128T14_3_FullDuplexMuxModule_L120F46T75_ExprRhs ? 1'b1 : 1'b0;
	assign FullDuplexMuxModule_L118F13L128T14_4_FullDuplexMuxModule_L120F46T75_Expr = FullDuplexMuxModule_L118F13L128T14_4_FullDuplexMuxModule_L120F46T75_ExprLhs == FullDuplexMuxModule_L118F13L128T14_4_FullDuplexMuxModule_L120F46T75_ExprRhs ? 1'b1 : 1'b0;
	assign FullDuplexMuxModule_L118F13L128T14_5_FullDuplexMuxModule_L120F46T75_Expr = FullDuplexMuxModule_L118F13L128T14_5_FullDuplexMuxModule_L120F46T75_ExprLhs == FullDuplexMuxModule_L118F13L128T14_5_FullDuplexMuxModule_L120F46T75_ExprRhs ? 1'b1 : 1'b0;
	assign FullDuplexMuxModule_L118F13L128T14_6_FullDuplexMuxModule_L120F46T75_Expr = FullDuplexMuxModule_L118F13L128T14_6_FullDuplexMuxModule_L120F46T75_ExprLhs == FullDuplexMuxModule_L118F13L128T14_6_FullDuplexMuxModule_L120F46T75_ExprRhs ? 1'b1 : 1'b0;
	assign FullDuplexMuxModule_L118F13L128T14_7_FullDuplexMuxModule_L120F46T75_Expr = FullDuplexMuxModule_L118F13L128T14_7_FullDuplexMuxModule_L120F46T75_ExprLhs == FullDuplexMuxModule_L118F13L128T14_7_FullDuplexMuxModule_L120F46T75_ExprRhs ? 1'b1 : 1'b0;
	assign FullDuplexMuxModule_L94F13L104T14_0_FullDuplexMuxModule_L96F21T78_Expr = FullDuplexMuxModule_L94F13L104T14_0_FullDuplexMuxModule_L96F21T78_Expr_1 & FullDuplexMuxModule_L94F13L104T14_0_FullDuplexMuxModule_L96F21T78_Expr_2;
	assign FullDuplexMuxModule_L94F13L104T14_1_FullDuplexMuxModule_L96F21T78_Expr = FullDuplexMuxModule_L94F13L104T14_1_FullDuplexMuxModule_L96F21T78_Expr_1 & FullDuplexMuxModule_L94F13L104T14_1_FullDuplexMuxModule_L96F21T78_Expr_2;
	assign FullDuplexMuxModule_L94F13L104T14_2_FullDuplexMuxModule_L96F21T78_Expr = FullDuplexMuxModule_L94F13L104T14_2_FullDuplexMuxModule_L96F21T78_Expr_1 & FullDuplexMuxModule_L94F13L104T14_2_FullDuplexMuxModule_L96F21T78_Expr_2;
	assign FullDuplexMuxModule_L94F13L104T14_3_FullDuplexMuxModule_L96F21T78_Expr = FullDuplexMuxModule_L94F13L104T14_3_FullDuplexMuxModule_L96F21T78_Expr_1 & FullDuplexMuxModule_L94F13L104T14_3_FullDuplexMuxModule_L96F21T78_Expr_2;
	assign FullDuplexMuxModule_L118F13L128T14_0_FullDuplexMuxModule_L120F21T75_Expr = FullDuplexMuxModule_L118F13L128T14_0_FullDuplexMuxModule_L120F21T75_Expr_1 & FullDuplexMuxModule_L118F13L128T14_0_FullDuplexMuxModule_L120F21T75_Expr_2;
	assign FullDuplexMuxModule_L118F13L128T14_1_FullDuplexMuxModule_L120F21T75_Expr = FullDuplexMuxModule_L118F13L128T14_1_FullDuplexMuxModule_L120F21T75_Expr_1 & FullDuplexMuxModule_L118F13L128T14_1_FullDuplexMuxModule_L120F21T75_Expr_2;
	assign FullDuplexMuxModule_L118F13L128T14_2_FullDuplexMuxModule_L120F21T75_Expr = FullDuplexMuxModule_L118F13L128T14_2_FullDuplexMuxModule_L120F21T75_Expr_1 & FullDuplexMuxModule_L118F13L128T14_2_FullDuplexMuxModule_L120F21T75_Expr_2;
	assign FullDuplexMuxModule_L118F13L128T14_3_FullDuplexMuxModule_L120F21T75_Expr = FullDuplexMuxModule_L118F13L128T14_3_FullDuplexMuxModule_L120F21T75_Expr_1 & FullDuplexMuxModule_L118F13L128T14_3_FullDuplexMuxModule_L120F21T75_Expr_2;
	assign FullDuplexMuxModule_L118F13L128T14_4_FullDuplexMuxModule_L120F21T75_Expr = FullDuplexMuxModule_L118F13L128T14_4_FullDuplexMuxModule_L120F21T75_Expr_1 & FullDuplexMuxModule_L118F13L128T14_4_FullDuplexMuxModule_L120F21T75_Expr_2;
	assign FullDuplexMuxModule_L118F13L128T14_5_FullDuplexMuxModule_L120F21T75_Expr = FullDuplexMuxModule_L118F13L128T14_5_FullDuplexMuxModule_L120F21T75_Expr_1 & FullDuplexMuxModule_L118F13L128T14_5_FullDuplexMuxModule_L120F21T75_Expr_2;
	assign FullDuplexMuxModule_L118F13L128T14_6_FullDuplexMuxModule_L120F21T75_Expr = FullDuplexMuxModule_L118F13L128T14_6_FullDuplexMuxModule_L120F21T75_Expr_1 & FullDuplexMuxModule_L118F13L128T14_6_FullDuplexMuxModule_L120F21T75_Expr_2;
	assign FullDuplexMuxModule_L118F13L128T14_7_FullDuplexMuxModule_L120F21T75_Expr = FullDuplexMuxModule_L118F13L128T14_7_FullDuplexMuxModule_L120F21T75_Expr_1 & FullDuplexMuxModule_L118F13L128T14_7_FullDuplexMuxModule_L120F21T75_Expr_2;
	always @ (*)
	begin
		if ((Inputs_iLeftAddrValid == 1))
		begin
			mMuxLeftData_B_BREADY = Inputs_iLeft[Inputs_iLeftAddr][221];
			mMuxLeftData_W_WVALID = Inputs_iLeft[Inputs_iLeftAddr][220];
			mMuxLeftData_W_WUSER = Inputs_iLeft[Inputs_iLeftAddr][219:212];
			mMuxLeftData_W_WLAST = Inputs_iLeft[Inputs_iLeftAddr][211];
			mMuxLeftData_W_WSTRB = Inputs_iLeft[Inputs_iLeftAddr][210:207];
			mMuxLeftData_W_WDATA[3] = Inputs_iLeft[Inputs_iLeftAddr][206:199];
			mMuxLeftData_W_WDATA[2] = Inputs_iLeft[Inputs_iLeftAddr][198:191];
			mMuxLeftData_W_WDATA[1] = Inputs_iLeft[Inputs_iLeftAddr][190:183];
			mMuxLeftData_W_WDATA[0] = Inputs_iLeft[Inputs_iLeftAddr][182:175];
			mMuxLeftData_W_WID = Inputs_iLeft[Inputs_iLeftAddr][174:167];
			mMuxLeftData_AW_AWVALID = Inputs_iLeft[Inputs_iLeftAddr][166];
			mMuxLeftData_AW_AWUSER = Inputs_iLeft[Inputs_iLeftAddr][165:158];
			mMuxLeftData_AW_AWREGION = Inputs_iLeft[Inputs_iLeftAddr][157:150];
			mMuxLeftData_AW_AWQOS = Inputs_iLeft[Inputs_iLeftAddr][149:146];
			mMuxLeftData_AW_AWPROT = Inputs_iLeft[Inputs_iLeftAddr][145:143];
			mMuxLeftData_AW_AWCACHE = Inputs_iLeft[Inputs_iLeftAddr][142:139];
			mMuxLeftData_AW_AWLOCK = Inputs_iLeft[Inputs_iLeftAddr][138:137];
			mMuxLeftData_AW_AWBURST = Inputs_iLeft[Inputs_iLeftAddr][136:135];
			mMuxLeftData_AW_AWSIZE = Inputs_iLeft[Inputs_iLeftAddr][134:132];
			mMuxLeftData_AW_AWLEN = Inputs_iLeft[Inputs_iLeftAddr][131:124];
			mMuxLeftData_AW_AWADDR = Inputs_iLeft[Inputs_iLeftAddr][123:92];
			mMuxLeftData_AW_AWID = Inputs_iLeft[Inputs_iLeftAddr][91:84];
			mMuxLeftData_R_RREADY = Inputs_iLeft[Inputs_iLeftAddr][83];
			mMuxLeftData_AR_ARVALID = Inputs_iLeft[Inputs_iLeftAddr][82];
			mMuxLeftData_AR_ARUSER = Inputs_iLeft[Inputs_iLeftAddr][81:74];
			mMuxLeftData_AR_ARREGION = Inputs_iLeft[Inputs_iLeftAddr][73:66];
			mMuxLeftData_AR_ARQOS = Inputs_iLeft[Inputs_iLeftAddr][65:62];
			mMuxLeftData_AR_ARPROT = Inputs_iLeft[Inputs_iLeftAddr][61:59];
			mMuxLeftData_AR_ARCACHE = Inputs_iLeft[Inputs_iLeftAddr][58:55];
			mMuxLeftData_AR_ARLOCK = Inputs_iLeft[Inputs_iLeftAddr][54:53];
			mMuxLeftData_AR_ARBURST = Inputs_iLeft[Inputs_iLeftAddr][52:51];
			mMuxLeftData_AR_ARSIZE = Inputs_iLeft[Inputs_iLeftAddr][50:48];
			mMuxLeftData_AR_ARLEN = Inputs_iLeft[Inputs_iLeftAddr][47:40];
			mMuxLeftData_AR_ARADDR = Inputs_iLeft[Inputs_iLeftAddr][39:8];
			mMuxLeftData_AR_ARID = Inputs_iLeft[Inputs_iLeftAddr][7:0];
		end
		else
		begin
			mMuxLeftData_AR_ARID = mEmptyLeftData_AR_ARID;
			mMuxLeftData_AR_ARADDR = mEmptyLeftData_AR_ARADDR;
			mMuxLeftData_AR_ARLEN = mEmptyLeftData_AR_ARLEN;
			mMuxLeftData_AR_ARSIZE = mEmptyLeftData_AR_ARSIZE;
			mMuxLeftData_AR_ARBURST = mEmptyLeftData_AR_ARBURST;
			mMuxLeftData_AR_ARLOCK = mEmptyLeftData_AR_ARLOCK;
			mMuxLeftData_AR_ARCACHE = mEmptyLeftData_AR_ARCACHE;
			mMuxLeftData_AR_ARPROT = mEmptyLeftData_AR_ARPROT;
			mMuxLeftData_AR_ARQOS = mEmptyLeftData_AR_ARQOS;
			mMuxLeftData_AR_ARREGION = mEmptyLeftData_AR_ARREGION;
			mMuxLeftData_AR_ARUSER = mEmptyLeftData_AR_ARUSER;
			mMuxLeftData_AR_ARVALID = mEmptyLeftData_AR_ARVALID;
			mMuxLeftData_R_RREADY = mEmptyLeftData_R_RREADY;
			mMuxLeftData_AW_AWID = mEmptyLeftData_AW_AWID;
			mMuxLeftData_AW_AWADDR = mEmptyLeftData_AW_AWADDR;
			mMuxLeftData_AW_AWLEN = mEmptyLeftData_AW_AWLEN;
			mMuxLeftData_AW_AWSIZE = mEmptyLeftData_AW_AWSIZE;
			mMuxLeftData_AW_AWBURST = mEmptyLeftData_AW_AWBURST;
			mMuxLeftData_AW_AWLOCK = mEmptyLeftData_AW_AWLOCK;
			mMuxLeftData_AW_AWCACHE = mEmptyLeftData_AW_AWCACHE;
			mMuxLeftData_AW_AWPROT = mEmptyLeftData_AW_AWPROT;
			mMuxLeftData_AW_AWQOS = mEmptyLeftData_AW_AWQOS;
			mMuxLeftData_AW_AWREGION = mEmptyLeftData_AW_AWREGION;
			mMuxLeftData_AW_AWUSER = mEmptyLeftData_AW_AWUSER;
			mMuxLeftData_AW_AWVALID = mEmptyLeftData_AW_AWVALID;
			mMuxLeftData_W_WID = mEmptyLeftData_W_WID;
			mMuxLeftData_W_WDATA[0] = mEmptyLeftData_W_WDATA[0];
			mMuxLeftData_W_WDATA[1] = mEmptyLeftData_W_WDATA[1];
			mMuxLeftData_W_WDATA[2] = mEmptyLeftData_W_WDATA[2];
			mMuxLeftData_W_WDATA[3] = mEmptyLeftData_W_WDATA[3];
			mMuxLeftData_W_WSTRB = mEmptyLeftData_W_WSTRB;
			mMuxLeftData_W_WLAST = mEmptyLeftData_W_WLAST;
			mMuxLeftData_W_WUSER = mEmptyLeftData_W_WUSER;
			mMuxLeftData_W_WVALID = mEmptyLeftData_W_WVALID;
			mMuxLeftData_B_BREADY = mEmptyLeftData_B_BREADY;
		end
	end
	always @ (*)
	begin
		if ((FullDuplexMuxModule_L94F13L104T14_0_FullDuplexMuxModule_L96F21T78_Expr == 1))
		begin
			mOutLeftData[0][221] = mMuxLeftData_B_BREADY;
			mOutLeftData[0][220] = mMuxLeftData_W_WVALID;
			mOutLeftData[0][219:212] = mMuxLeftData_W_WUSER;
			mOutLeftData[0][211] = mMuxLeftData_W_WLAST;
			mOutLeftData[0][210:207] = mMuxLeftData_W_WSTRB;
			mOutLeftData[0][206:175] = { mMuxLeftData_W_WDATA[3], mMuxLeftData_W_WDATA[2], mMuxLeftData_W_WDATA[1], mMuxLeftData_W_WDATA[0] };
			mOutLeftData[0][174:167] = mMuxLeftData_W_WID;
			mOutLeftData[0][166] = mMuxLeftData_AW_AWVALID;
			mOutLeftData[0][165:158] = mMuxLeftData_AW_AWUSER;
			mOutLeftData[0][157:150] = mMuxLeftData_AW_AWREGION;
			mOutLeftData[0][149:146] = mMuxLeftData_AW_AWQOS;
			mOutLeftData[0][145:143] = mMuxLeftData_AW_AWPROT;
			mOutLeftData[0][142:139] = mMuxLeftData_AW_AWCACHE;
			mOutLeftData[0][138:137] = mMuxLeftData_AW_AWLOCK;
			mOutLeftData[0][136:135] = mMuxLeftData_AW_AWBURST;
			mOutLeftData[0][134:132] = mMuxLeftData_AW_AWSIZE;
			mOutLeftData[0][131:124] = mMuxLeftData_AW_AWLEN;
			mOutLeftData[0][123:92] = mMuxLeftData_AW_AWADDR;
			mOutLeftData[0][91:84] = mMuxLeftData_AW_AWID;
			mOutLeftData[0][83] = mMuxLeftData_R_RREADY;
			mOutLeftData[0][82] = mMuxLeftData_AR_ARVALID;
			mOutLeftData[0][81:74] = mMuxLeftData_AR_ARUSER;
			mOutLeftData[0][73:66] = mMuxLeftData_AR_ARREGION;
			mOutLeftData[0][65:62] = mMuxLeftData_AR_ARQOS;
			mOutLeftData[0][61:59] = mMuxLeftData_AR_ARPROT;
			mOutLeftData[0][58:55] = mMuxLeftData_AR_ARCACHE;
			mOutLeftData[0][54:53] = mMuxLeftData_AR_ARLOCK;
			mOutLeftData[0][52:51] = mMuxLeftData_AR_ARBURST;
			mOutLeftData[0][50:48] = mMuxLeftData_AR_ARSIZE;
			mOutLeftData[0][47:40] = mMuxLeftData_AR_ARLEN;
			mOutLeftData[0][39:8] = mMuxLeftData_AR_ARADDR;
			mOutLeftData[0][7:0] = mMuxLeftData_AR_ARID;
		end
		else
		begin
			mOutLeftData[0][221] = mEmptyLeftData_B_BREADY;
			mOutLeftData[0][220] = mEmptyLeftData_W_WVALID;
			mOutLeftData[0][219:212] = mEmptyLeftData_W_WUSER;
			mOutLeftData[0][211] = mEmptyLeftData_W_WLAST;
			mOutLeftData[0][210:207] = mEmptyLeftData_W_WSTRB;
			mOutLeftData[0][206:175] = { mEmptyLeftData_W_WDATA[3], mEmptyLeftData_W_WDATA[2], mEmptyLeftData_W_WDATA[1], mEmptyLeftData_W_WDATA[0] };
			mOutLeftData[0][174:167] = mEmptyLeftData_W_WID;
			mOutLeftData[0][166] = mEmptyLeftData_AW_AWVALID;
			mOutLeftData[0][165:158] = mEmptyLeftData_AW_AWUSER;
			mOutLeftData[0][157:150] = mEmptyLeftData_AW_AWREGION;
			mOutLeftData[0][149:146] = mEmptyLeftData_AW_AWQOS;
			mOutLeftData[0][145:143] = mEmptyLeftData_AW_AWPROT;
			mOutLeftData[0][142:139] = mEmptyLeftData_AW_AWCACHE;
			mOutLeftData[0][138:137] = mEmptyLeftData_AW_AWLOCK;
			mOutLeftData[0][136:135] = mEmptyLeftData_AW_AWBURST;
			mOutLeftData[0][134:132] = mEmptyLeftData_AW_AWSIZE;
			mOutLeftData[0][131:124] = mEmptyLeftData_AW_AWLEN;
			mOutLeftData[0][123:92] = mEmptyLeftData_AW_AWADDR;
			mOutLeftData[0][91:84] = mEmptyLeftData_AW_AWID;
			mOutLeftData[0][83] = mEmptyLeftData_R_RREADY;
			mOutLeftData[0][82] = mEmptyLeftData_AR_ARVALID;
			mOutLeftData[0][81:74] = mEmptyLeftData_AR_ARUSER;
			mOutLeftData[0][73:66] = mEmptyLeftData_AR_ARREGION;
			mOutLeftData[0][65:62] = mEmptyLeftData_AR_ARQOS;
			mOutLeftData[0][61:59] = mEmptyLeftData_AR_ARPROT;
			mOutLeftData[0][58:55] = mEmptyLeftData_AR_ARCACHE;
			mOutLeftData[0][54:53] = mEmptyLeftData_AR_ARLOCK;
			mOutLeftData[0][52:51] = mEmptyLeftData_AR_ARBURST;
			mOutLeftData[0][50:48] = mEmptyLeftData_AR_ARSIZE;
			mOutLeftData[0][47:40] = mEmptyLeftData_AR_ARLEN;
			mOutLeftData[0][39:8] = mEmptyLeftData_AR_ARADDR;
			mOutLeftData[0][7:0] = mEmptyLeftData_AR_ARID;
		end
	end
	always @ (*)
	begin
		if ((FullDuplexMuxModule_L94F13L104T14_1_FullDuplexMuxModule_L96F21T78_Expr == 1))
		begin
			mOutLeftData[1][221] = mMuxLeftData_B_BREADY;
			mOutLeftData[1][220] = mMuxLeftData_W_WVALID;
			mOutLeftData[1][219:212] = mMuxLeftData_W_WUSER;
			mOutLeftData[1][211] = mMuxLeftData_W_WLAST;
			mOutLeftData[1][210:207] = mMuxLeftData_W_WSTRB;
			mOutLeftData[1][206:175] = { mMuxLeftData_W_WDATA[3], mMuxLeftData_W_WDATA[2], mMuxLeftData_W_WDATA[1], mMuxLeftData_W_WDATA[0] };
			mOutLeftData[1][174:167] = mMuxLeftData_W_WID;
			mOutLeftData[1][166] = mMuxLeftData_AW_AWVALID;
			mOutLeftData[1][165:158] = mMuxLeftData_AW_AWUSER;
			mOutLeftData[1][157:150] = mMuxLeftData_AW_AWREGION;
			mOutLeftData[1][149:146] = mMuxLeftData_AW_AWQOS;
			mOutLeftData[1][145:143] = mMuxLeftData_AW_AWPROT;
			mOutLeftData[1][142:139] = mMuxLeftData_AW_AWCACHE;
			mOutLeftData[1][138:137] = mMuxLeftData_AW_AWLOCK;
			mOutLeftData[1][136:135] = mMuxLeftData_AW_AWBURST;
			mOutLeftData[1][134:132] = mMuxLeftData_AW_AWSIZE;
			mOutLeftData[1][131:124] = mMuxLeftData_AW_AWLEN;
			mOutLeftData[1][123:92] = mMuxLeftData_AW_AWADDR;
			mOutLeftData[1][91:84] = mMuxLeftData_AW_AWID;
			mOutLeftData[1][83] = mMuxLeftData_R_RREADY;
			mOutLeftData[1][82] = mMuxLeftData_AR_ARVALID;
			mOutLeftData[1][81:74] = mMuxLeftData_AR_ARUSER;
			mOutLeftData[1][73:66] = mMuxLeftData_AR_ARREGION;
			mOutLeftData[1][65:62] = mMuxLeftData_AR_ARQOS;
			mOutLeftData[1][61:59] = mMuxLeftData_AR_ARPROT;
			mOutLeftData[1][58:55] = mMuxLeftData_AR_ARCACHE;
			mOutLeftData[1][54:53] = mMuxLeftData_AR_ARLOCK;
			mOutLeftData[1][52:51] = mMuxLeftData_AR_ARBURST;
			mOutLeftData[1][50:48] = mMuxLeftData_AR_ARSIZE;
			mOutLeftData[1][47:40] = mMuxLeftData_AR_ARLEN;
			mOutLeftData[1][39:8] = mMuxLeftData_AR_ARADDR;
			mOutLeftData[1][7:0] = mMuxLeftData_AR_ARID;
		end
		else
		begin
			mOutLeftData[1][221] = mEmptyLeftData_B_BREADY;
			mOutLeftData[1][220] = mEmptyLeftData_W_WVALID;
			mOutLeftData[1][219:212] = mEmptyLeftData_W_WUSER;
			mOutLeftData[1][211] = mEmptyLeftData_W_WLAST;
			mOutLeftData[1][210:207] = mEmptyLeftData_W_WSTRB;
			mOutLeftData[1][206:175] = { mEmptyLeftData_W_WDATA[3], mEmptyLeftData_W_WDATA[2], mEmptyLeftData_W_WDATA[1], mEmptyLeftData_W_WDATA[0] };
			mOutLeftData[1][174:167] = mEmptyLeftData_W_WID;
			mOutLeftData[1][166] = mEmptyLeftData_AW_AWVALID;
			mOutLeftData[1][165:158] = mEmptyLeftData_AW_AWUSER;
			mOutLeftData[1][157:150] = mEmptyLeftData_AW_AWREGION;
			mOutLeftData[1][149:146] = mEmptyLeftData_AW_AWQOS;
			mOutLeftData[1][145:143] = mEmptyLeftData_AW_AWPROT;
			mOutLeftData[1][142:139] = mEmptyLeftData_AW_AWCACHE;
			mOutLeftData[1][138:137] = mEmptyLeftData_AW_AWLOCK;
			mOutLeftData[1][136:135] = mEmptyLeftData_AW_AWBURST;
			mOutLeftData[1][134:132] = mEmptyLeftData_AW_AWSIZE;
			mOutLeftData[1][131:124] = mEmptyLeftData_AW_AWLEN;
			mOutLeftData[1][123:92] = mEmptyLeftData_AW_AWADDR;
			mOutLeftData[1][91:84] = mEmptyLeftData_AW_AWID;
			mOutLeftData[1][83] = mEmptyLeftData_R_RREADY;
			mOutLeftData[1][82] = mEmptyLeftData_AR_ARVALID;
			mOutLeftData[1][81:74] = mEmptyLeftData_AR_ARUSER;
			mOutLeftData[1][73:66] = mEmptyLeftData_AR_ARREGION;
			mOutLeftData[1][65:62] = mEmptyLeftData_AR_ARQOS;
			mOutLeftData[1][61:59] = mEmptyLeftData_AR_ARPROT;
			mOutLeftData[1][58:55] = mEmptyLeftData_AR_ARCACHE;
			mOutLeftData[1][54:53] = mEmptyLeftData_AR_ARLOCK;
			mOutLeftData[1][52:51] = mEmptyLeftData_AR_ARBURST;
			mOutLeftData[1][50:48] = mEmptyLeftData_AR_ARSIZE;
			mOutLeftData[1][47:40] = mEmptyLeftData_AR_ARLEN;
			mOutLeftData[1][39:8] = mEmptyLeftData_AR_ARADDR;
			mOutLeftData[1][7:0] = mEmptyLeftData_AR_ARID;
		end
	end
	always @ (*)
	begin
		if ((FullDuplexMuxModule_L94F13L104T14_2_FullDuplexMuxModule_L96F21T78_Expr == 1))
		begin
			mOutLeftData[2][221] = mMuxLeftData_B_BREADY;
			mOutLeftData[2][220] = mMuxLeftData_W_WVALID;
			mOutLeftData[2][219:212] = mMuxLeftData_W_WUSER;
			mOutLeftData[2][211] = mMuxLeftData_W_WLAST;
			mOutLeftData[2][210:207] = mMuxLeftData_W_WSTRB;
			mOutLeftData[2][206:175] = { mMuxLeftData_W_WDATA[3], mMuxLeftData_W_WDATA[2], mMuxLeftData_W_WDATA[1], mMuxLeftData_W_WDATA[0] };
			mOutLeftData[2][174:167] = mMuxLeftData_W_WID;
			mOutLeftData[2][166] = mMuxLeftData_AW_AWVALID;
			mOutLeftData[2][165:158] = mMuxLeftData_AW_AWUSER;
			mOutLeftData[2][157:150] = mMuxLeftData_AW_AWREGION;
			mOutLeftData[2][149:146] = mMuxLeftData_AW_AWQOS;
			mOutLeftData[2][145:143] = mMuxLeftData_AW_AWPROT;
			mOutLeftData[2][142:139] = mMuxLeftData_AW_AWCACHE;
			mOutLeftData[2][138:137] = mMuxLeftData_AW_AWLOCK;
			mOutLeftData[2][136:135] = mMuxLeftData_AW_AWBURST;
			mOutLeftData[2][134:132] = mMuxLeftData_AW_AWSIZE;
			mOutLeftData[2][131:124] = mMuxLeftData_AW_AWLEN;
			mOutLeftData[2][123:92] = mMuxLeftData_AW_AWADDR;
			mOutLeftData[2][91:84] = mMuxLeftData_AW_AWID;
			mOutLeftData[2][83] = mMuxLeftData_R_RREADY;
			mOutLeftData[2][82] = mMuxLeftData_AR_ARVALID;
			mOutLeftData[2][81:74] = mMuxLeftData_AR_ARUSER;
			mOutLeftData[2][73:66] = mMuxLeftData_AR_ARREGION;
			mOutLeftData[2][65:62] = mMuxLeftData_AR_ARQOS;
			mOutLeftData[2][61:59] = mMuxLeftData_AR_ARPROT;
			mOutLeftData[2][58:55] = mMuxLeftData_AR_ARCACHE;
			mOutLeftData[2][54:53] = mMuxLeftData_AR_ARLOCK;
			mOutLeftData[2][52:51] = mMuxLeftData_AR_ARBURST;
			mOutLeftData[2][50:48] = mMuxLeftData_AR_ARSIZE;
			mOutLeftData[2][47:40] = mMuxLeftData_AR_ARLEN;
			mOutLeftData[2][39:8] = mMuxLeftData_AR_ARADDR;
			mOutLeftData[2][7:0] = mMuxLeftData_AR_ARID;
		end
		else
		begin
			mOutLeftData[2][221] = mEmptyLeftData_B_BREADY;
			mOutLeftData[2][220] = mEmptyLeftData_W_WVALID;
			mOutLeftData[2][219:212] = mEmptyLeftData_W_WUSER;
			mOutLeftData[2][211] = mEmptyLeftData_W_WLAST;
			mOutLeftData[2][210:207] = mEmptyLeftData_W_WSTRB;
			mOutLeftData[2][206:175] = { mEmptyLeftData_W_WDATA[3], mEmptyLeftData_W_WDATA[2], mEmptyLeftData_W_WDATA[1], mEmptyLeftData_W_WDATA[0] };
			mOutLeftData[2][174:167] = mEmptyLeftData_W_WID;
			mOutLeftData[2][166] = mEmptyLeftData_AW_AWVALID;
			mOutLeftData[2][165:158] = mEmptyLeftData_AW_AWUSER;
			mOutLeftData[2][157:150] = mEmptyLeftData_AW_AWREGION;
			mOutLeftData[2][149:146] = mEmptyLeftData_AW_AWQOS;
			mOutLeftData[2][145:143] = mEmptyLeftData_AW_AWPROT;
			mOutLeftData[2][142:139] = mEmptyLeftData_AW_AWCACHE;
			mOutLeftData[2][138:137] = mEmptyLeftData_AW_AWLOCK;
			mOutLeftData[2][136:135] = mEmptyLeftData_AW_AWBURST;
			mOutLeftData[2][134:132] = mEmptyLeftData_AW_AWSIZE;
			mOutLeftData[2][131:124] = mEmptyLeftData_AW_AWLEN;
			mOutLeftData[2][123:92] = mEmptyLeftData_AW_AWADDR;
			mOutLeftData[2][91:84] = mEmptyLeftData_AW_AWID;
			mOutLeftData[2][83] = mEmptyLeftData_R_RREADY;
			mOutLeftData[2][82] = mEmptyLeftData_AR_ARVALID;
			mOutLeftData[2][81:74] = mEmptyLeftData_AR_ARUSER;
			mOutLeftData[2][73:66] = mEmptyLeftData_AR_ARREGION;
			mOutLeftData[2][65:62] = mEmptyLeftData_AR_ARQOS;
			mOutLeftData[2][61:59] = mEmptyLeftData_AR_ARPROT;
			mOutLeftData[2][58:55] = mEmptyLeftData_AR_ARCACHE;
			mOutLeftData[2][54:53] = mEmptyLeftData_AR_ARLOCK;
			mOutLeftData[2][52:51] = mEmptyLeftData_AR_ARBURST;
			mOutLeftData[2][50:48] = mEmptyLeftData_AR_ARSIZE;
			mOutLeftData[2][47:40] = mEmptyLeftData_AR_ARLEN;
			mOutLeftData[2][39:8] = mEmptyLeftData_AR_ARADDR;
			mOutLeftData[2][7:0] = mEmptyLeftData_AR_ARID;
		end
	end
	always @ (*)
	begin
		if ((FullDuplexMuxModule_L94F13L104T14_3_FullDuplexMuxModule_L96F21T78_Expr == 1))
		begin
			mOutLeftData[3][221] = mMuxLeftData_B_BREADY;
			mOutLeftData[3][220] = mMuxLeftData_W_WVALID;
			mOutLeftData[3][219:212] = mMuxLeftData_W_WUSER;
			mOutLeftData[3][211] = mMuxLeftData_W_WLAST;
			mOutLeftData[3][210:207] = mMuxLeftData_W_WSTRB;
			mOutLeftData[3][206:175] = { mMuxLeftData_W_WDATA[3], mMuxLeftData_W_WDATA[2], mMuxLeftData_W_WDATA[1], mMuxLeftData_W_WDATA[0] };
			mOutLeftData[3][174:167] = mMuxLeftData_W_WID;
			mOutLeftData[3][166] = mMuxLeftData_AW_AWVALID;
			mOutLeftData[3][165:158] = mMuxLeftData_AW_AWUSER;
			mOutLeftData[3][157:150] = mMuxLeftData_AW_AWREGION;
			mOutLeftData[3][149:146] = mMuxLeftData_AW_AWQOS;
			mOutLeftData[3][145:143] = mMuxLeftData_AW_AWPROT;
			mOutLeftData[3][142:139] = mMuxLeftData_AW_AWCACHE;
			mOutLeftData[3][138:137] = mMuxLeftData_AW_AWLOCK;
			mOutLeftData[3][136:135] = mMuxLeftData_AW_AWBURST;
			mOutLeftData[3][134:132] = mMuxLeftData_AW_AWSIZE;
			mOutLeftData[3][131:124] = mMuxLeftData_AW_AWLEN;
			mOutLeftData[3][123:92] = mMuxLeftData_AW_AWADDR;
			mOutLeftData[3][91:84] = mMuxLeftData_AW_AWID;
			mOutLeftData[3][83] = mMuxLeftData_R_RREADY;
			mOutLeftData[3][82] = mMuxLeftData_AR_ARVALID;
			mOutLeftData[3][81:74] = mMuxLeftData_AR_ARUSER;
			mOutLeftData[3][73:66] = mMuxLeftData_AR_ARREGION;
			mOutLeftData[3][65:62] = mMuxLeftData_AR_ARQOS;
			mOutLeftData[3][61:59] = mMuxLeftData_AR_ARPROT;
			mOutLeftData[3][58:55] = mMuxLeftData_AR_ARCACHE;
			mOutLeftData[3][54:53] = mMuxLeftData_AR_ARLOCK;
			mOutLeftData[3][52:51] = mMuxLeftData_AR_ARBURST;
			mOutLeftData[3][50:48] = mMuxLeftData_AR_ARSIZE;
			mOutLeftData[3][47:40] = mMuxLeftData_AR_ARLEN;
			mOutLeftData[3][39:8] = mMuxLeftData_AR_ARADDR;
			mOutLeftData[3][7:0] = mMuxLeftData_AR_ARID;
		end
		else
		begin
			mOutLeftData[3][221] = mEmptyLeftData_B_BREADY;
			mOutLeftData[3][220] = mEmptyLeftData_W_WVALID;
			mOutLeftData[3][219:212] = mEmptyLeftData_W_WUSER;
			mOutLeftData[3][211] = mEmptyLeftData_W_WLAST;
			mOutLeftData[3][210:207] = mEmptyLeftData_W_WSTRB;
			mOutLeftData[3][206:175] = { mEmptyLeftData_W_WDATA[3], mEmptyLeftData_W_WDATA[2], mEmptyLeftData_W_WDATA[1], mEmptyLeftData_W_WDATA[0] };
			mOutLeftData[3][174:167] = mEmptyLeftData_W_WID;
			mOutLeftData[3][166] = mEmptyLeftData_AW_AWVALID;
			mOutLeftData[3][165:158] = mEmptyLeftData_AW_AWUSER;
			mOutLeftData[3][157:150] = mEmptyLeftData_AW_AWREGION;
			mOutLeftData[3][149:146] = mEmptyLeftData_AW_AWQOS;
			mOutLeftData[3][145:143] = mEmptyLeftData_AW_AWPROT;
			mOutLeftData[3][142:139] = mEmptyLeftData_AW_AWCACHE;
			mOutLeftData[3][138:137] = mEmptyLeftData_AW_AWLOCK;
			mOutLeftData[3][136:135] = mEmptyLeftData_AW_AWBURST;
			mOutLeftData[3][134:132] = mEmptyLeftData_AW_AWSIZE;
			mOutLeftData[3][131:124] = mEmptyLeftData_AW_AWLEN;
			mOutLeftData[3][123:92] = mEmptyLeftData_AW_AWADDR;
			mOutLeftData[3][91:84] = mEmptyLeftData_AW_AWID;
			mOutLeftData[3][83] = mEmptyLeftData_R_RREADY;
			mOutLeftData[3][82] = mEmptyLeftData_AR_ARVALID;
			mOutLeftData[3][81:74] = mEmptyLeftData_AR_ARUSER;
			mOutLeftData[3][73:66] = mEmptyLeftData_AR_ARREGION;
			mOutLeftData[3][65:62] = mEmptyLeftData_AR_ARQOS;
			mOutLeftData[3][61:59] = mEmptyLeftData_AR_ARPROT;
			mOutLeftData[3][58:55] = mEmptyLeftData_AR_ARCACHE;
			mOutLeftData[3][54:53] = mEmptyLeftData_AR_ARLOCK;
			mOutLeftData[3][52:51] = mEmptyLeftData_AR_ARBURST;
			mOutLeftData[3][50:48] = mEmptyLeftData_AR_ARSIZE;
			mOutLeftData[3][47:40] = mEmptyLeftData_AR_ARLEN;
			mOutLeftData[3][39:8] = mEmptyLeftData_AR_ARADDR;
			mOutLeftData[3][7:0] = mEmptyLeftData_AR_ARID;
		end
	end
	always @ (*)
	begin
		if ((Inputs_iRightAddrValid == 1))
		begin
			mMuxRightData_W_WREADY = Inputs_iRight[Inputs_iRightAddr][73];
			mMuxRightData_B_BVALID = Inputs_iRight[Inputs_iRightAddr][72];
			mMuxRightData_B_BUSER = Inputs_iRight[Inputs_iRightAddr][71:64];
			mMuxRightData_B_BRESP = Inputs_iRight[Inputs_iRightAddr][63:62];
			mMuxRightData_B_BID = Inputs_iRight[Inputs_iRightAddr][61:54];
			mMuxRightData_AW_AWREADY = Inputs_iRight[Inputs_iRightAddr][53];
			mMuxRightData_R_RVALID = Inputs_iRight[Inputs_iRightAddr][52];
			mMuxRightData_R_RUSER = Inputs_iRight[Inputs_iRightAddr][51:44];
			mMuxRightData_R_RLAST = Inputs_iRight[Inputs_iRightAddr][43];
			mMuxRightData_R_RRESP = Inputs_iRight[Inputs_iRightAddr][42:41];
			mMuxRightData_R_RDATA[3] = Inputs_iRight[Inputs_iRightAddr][40:33];
			mMuxRightData_R_RDATA[2] = Inputs_iRight[Inputs_iRightAddr][32:25];
			mMuxRightData_R_RDATA[1] = Inputs_iRight[Inputs_iRightAddr][24:17];
			mMuxRightData_R_RDATA[0] = Inputs_iRight[Inputs_iRightAddr][16:9];
			mMuxRightData_R_RID = Inputs_iRight[Inputs_iRightAddr][8:1];
			mMuxRightData_AR_ARREADY = Inputs_iRight[Inputs_iRightAddr][0];
		end
		else
		begin
			mMuxRightData_AR_ARREADY = mEmptyRightData_AR_ARREADY;
			mMuxRightData_R_RID = mEmptyRightData_R_RID;
			mMuxRightData_R_RDATA[0] = mEmptyRightData_R_RDATA[0];
			mMuxRightData_R_RDATA[1] = mEmptyRightData_R_RDATA[1];
			mMuxRightData_R_RDATA[2] = mEmptyRightData_R_RDATA[2];
			mMuxRightData_R_RDATA[3] = mEmptyRightData_R_RDATA[3];
			mMuxRightData_R_RRESP = mEmptyRightData_R_RRESP;
			mMuxRightData_R_RLAST = mEmptyRightData_R_RLAST;
			mMuxRightData_R_RUSER = mEmptyRightData_R_RUSER;
			mMuxRightData_R_RVALID = mEmptyRightData_R_RVALID;
			mMuxRightData_AW_AWREADY = mEmptyRightData_AW_AWREADY;
			mMuxRightData_B_BID = mEmptyRightData_B_BID;
			mMuxRightData_B_BRESP = mEmptyRightData_B_BRESP;
			mMuxRightData_B_BUSER = mEmptyRightData_B_BUSER;
			mMuxRightData_B_BVALID = mEmptyRightData_B_BVALID;
			mMuxRightData_W_WREADY = mEmptyRightData_W_WREADY;
		end
	end
	always @ (*)
	begin
		if ((FullDuplexMuxModule_L118F13L128T14_0_FullDuplexMuxModule_L120F21T75_Expr == 1))
		begin
			mOutRightData[0][73] = mMuxRightData_W_WREADY;
			mOutRightData[0][72] = mMuxRightData_B_BVALID;
			mOutRightData[0][71:64] = mMuxRightData_B_BUSER;
			mOutRightData[0][63:62] = mMuxRightData_B_BRESP;
			mOutRightData[0][61:54] = mMuxRightData_B_BID;
			mOutRightData[0][53] = mMuxRightData_AW_AWREADY;
			mOutRightData[0][52] = mMuxRightData_R_RVALID;
			mOutRightData[0][51:44] = mMuxRightData_R_RUSER;
			mOutRightData[0][43] = mMuxRightData_R_RLAST;
			mOutRightData[0][42:41] = mMuxRightData_R_RRESP;
			mOutRightData[0][40:9] = { mMuxRightData_R_RDATA[3], mMuxRightData_R_RDATA[2], mMuxRightData_R_RDATA[1], mMuxRightData_R_RDATA[0] };
			mOutRightData[0][8:1] = mMuxRightData_R_RID;
			mOutRightData[0][0] = mMuxRightData_AR_ARREADY;
		end
		else
		begin
			mOutRightData[0][73] = mEmptyRightData_W_WREADY;
			mOutRightData[0][72] = mEmptyRightData_B_BVALID;
			mOutRightData[0][71:64] = mEmptyRightData_B_BUSER;
			mOutRightData[0][63:62] = mEmptyRightData_B_BRESP;
			mOutRightData[0][61:54] = mEmptyRightData_B_BID;
			mOutRightData[0][53] = mEmptyRightData_AW_AWREADY;
			mOutRightData[0][52] = mEmptyRightData_R_RVALID;
			mOutRightData[0][51:44] = mEmptyRightData_R_RUSER;
			mOutRightData[0][43] = mEmptyRightData_R_RLAST;
			mOutRightData[0][42:41] = mEmptyRightData_R_RRESP;
			mOutRightData[0][40:9] = { mEmptyRightData_R_RDATA[3], mEmptyRightData_R_RDATA[2], mEmptyRightData_R_RDATA[1], mEmptyRightData_R_RDATA[0] };
			mOutRightData[0][8:1] = mEmptyRightData_R_RID;
			mOutRightData[0][0] = mEmptyRightData_AR_ARREADY;
		end
	end
	always @ (*)
	begin
		if ((FullDuplexMuxModule_L118F13L128T14_1_FullDuplexMuxModule_L120F21T75_Expr == 1))
		begin
			mOutRightData[1][73] = mMuxRightData_W_WREADY;
			mOutRightData[1][72] = mMuxRightData_B_BVALID;
			mOutRightData[1][71:64] = mMuxRightData_B_BUSER;
			mOutRightData[1][63:62] = mMuxRightData_B_BRESP;
			mOutRightData[1][61:54] = mMuxRightData_B_BID;
			mOutRightData[1][53] = mMuxRightData_AW_AWREADY;
			mOutRightData[1][52] = mMuxRightData_R_RVALID;
			mOutRightData[1][51:44] = mMuxRightData_R_RUSER;
			mOutRightData[1][43] = mMuxRightData_R_RLAST;
			mOutRightData[1][42:41] = mMuxRightData_R_RRESP;
			mOutRightData[1][40:9] = { mMuxRightData_R_RDATA[3], mMuxRightData_R_RDATA[2], mMuxRightData_R_RDATA[1], mMuxRightData_R_RDATA[0] };
			mOutRightData[1][8:1] = mMuxRightData_R_RID;
			mOutRightData[1][0] = mMuxRightData_AR_ARREADY;
		end
		else
		begin
			mOutRightData[1][73] = mEmptyRightData_W_WREADY;
			mOutRightData[1][72] = mEmptyRightData_B_BVALID;
			mOutRightData[1][71:64] = mEmptyRightData_B_BUSER;
			mOutRightData[1][63:62] = mEmptyRightData_B_BRESP;
			mOutRightData[1][61:54] = mEmptyRightData_B_BID;
			mOutRightData[1][53] = mEmptyRightData_AW_AWREADY;
			mOutRightData[1][52] = mEmptyRightData_R_RVALID;
			mOutRightData[1][51:44] = mEmptyRightData_R_RUSER;
			mOutRightData[1][43] = mEmptyRightData_R_RLAST;
			mOutRightData[1][42:41] = mEmptyRightData_R_RRESP;
			mOutRightData[1][40:9] = { mEmptyRightData_R_RDATA[3], mEmptyRightData_R_RDATA[2], mEmptyRightData_R_RDATA[1], mEmptyRightData_R_RDATA[0] };
			mOutRightData[1][8:1] = mEmptyRightData_R_RID;
			mOutRightData[1][0] = mEmptyRightData_AR_ARREADY;
		end
	end
	always @ (*)
	begin
		if ((FullDuplexMuxModule_L118F13L128T14_2_FullDuplexMuxModule_L120F21T75_Expr == 1))
		begin
			mOutRightData[2][73] = mMuxRightData_W_WREADY;
			mOutRightData[2][72] = mMuxRightData_B_BVALID;
			mOutRightData[2][71:64] = mMuxRightData_B_BUSER;
			mOutRightData[2][63:62] = mMuxRightData_B_BRESP;
			mOutRightData[2][61:54] = mMuxRightData_B_BID;
			mOutRightData[2][53] = mMuxRightData_AW_AWREADY;
			mOutRightData[2][52] = mMuxRightData_R_RVALID;
			mOutRightData[2][51:44] = mMuxRightData_R_RUSER;
			mOutRightData[2][43] = mMuxRightData_R_RLAST;
			mOutRightData[2][42:41] = mMuxRightData_R_RRESP;
			mOutRightData[2][40:9] = { mMuxRightData_R_RDATA[3], mMuxRightData_R_RDATA[2], mMuxRightData_R_RDATA[1], mMuxRightData_R_RDATA[0] };
			mOutRightData[2][8:1] = mMuxRightData_R_RID;
			mOutRightData[2][0] = mMuxRightData_AR_ARREADY;
		end
		else
		begin
			mOutRightData[2][73] = mEmptyRightData_W_WREADY;
			mOutRightData[2][72] = mEmptyRightData_B_BVALID;
			mOutRightData[2][71:64] = mEmptyRightData_B_BUSER;
			mOutRightData[2][63:62] = mEmptyRightData_B_BRESP;
			mOutRightData[2][61:54] = mEmptyRightData_B_BID;
			mOutRightData[2][53] = mEmptyRightData_AW_AWREADY;
			mOutRightData[2][52] = mEmptyRightData_R_RVALID;
			mOutRightData[2][51:44] = mEmptyRightData_R_RUSER;
			mOutRightData[2][43] = mEmptyRightData_R_RLAST;
			mOutRightData[2][42:41] = mEmptyRightData_R_RRESP;
			mOutRightData[2][40:9] = { mEmptyRightData_R_RDATA[3], mEmptyRightData_R_RDATA[2], mEmptyRightData_R_RDATA[1], mEmptyRightData_R_RDATA[0] };
			mOutRightData[2][8:1] = mEmptyRightData_R_RID;
			mOutRightData[2][0] = mEmptyRightData_AR_ARREADY;
		end
	end
	always @ (*)
	begin
		if ((FullDuplexMuxModule_L118F13L128T14_3_FullDuplexMuxModule_L120F21T75_Expr == 1))
		begin
			mOutRightData[3][73] = mMuxRightData_W_WREADY;
			mOutRightData[3][72] = mMuxRightData_B_BVALID;
			mOutRightData[3][71:64] = mMuxRightData_B_BUSER;
			mOutRightData[3][63:62] = mMuxRightData_B_BRESP;
			mOutRightData[3][61:54] = mMuxRightData_B_BID;
			mOutRightData[3][53] = mMuxRightData_AW_AWREADY;
			mOutRightData[3][52] = mMuxRightData_R_RVALID;
			mOutRightData[3][51:44] = mMuxRightData_R_RUSER;
			mOutRightData[3][43] = mMuxRightData_R_RLAST;
			mOutRightData[3][42:41] = mMuxRightData_R_RRESP;
			mOutRightData[3][40:9] = { mMuxRightData_R_RDATA[3], mMuxRightData_R_RDATA[2], mMuxRightData_R_RDATA[1], mMuxRightData_R_RDATA[0] };
			mOutRightData[3][8:1] = mMuxRightData_R_RID;
			mOutRightData[3][0] = mMuxRightData_AR_ARREADY;
		end
		else
		begin
			mOutRightData[3][73] = mEmptyRightData_W_WREADY;
			mOutRightData[3][72] = mEmptyRightData_B_BVALID;
			mOutRightData[3][71:64] = mEmptyRightData_B_BUSER;
			mOutRightData[3][63:62] = mEmptyRightData_B_BRESP;
			mOutRightData[3][61:54] = mEmptyRightData_B_BID;
			mOutRightData[3][53] = mEmptyRightData_AW_AWREADY;
			mOutRightData[3][52] = mEmptyRightData_R_RVALID;
			mOutRightData[3][51:44] = mEmptyRightData_R_RUSER;
			mOutRightData[3][43] = mEmptyRightData_R_RLAST;
			mOutRightData[3][42:41] = mEmptyRightData_R_RRESP;
			mOutRightData[3][40:9] = { mEmptyRightData_R_RDATA[3], mEmptyRightData_R_RDATA[2], mEmptyRightData_R_RDATA[1], mEmptyRightData_R_RDATA[0] };
			mOutRightData[3][8:1] = mEmptyRightData_R_RID;
			mOutRightData[3][0] = mEmptyRightData_AR_ARREADY;
		end
	end
	always @ (*)
	begin
		if ((FullDuplexMuxModule_L118F13L128T14_4_FullDuplexMuxModule_L120F21T75_Expr == 1))
		begin
			mOutRightData[4][73] = mMuxRightData_W_WREADY;
			mOutRightData[4][72] = mMuxRightData_B_BVALID;
			mOutRightData[4][71:64] = mMuxRightData_B_BUSER;
			mOutRightData[4][63:62] = mMuxRightData_B_BRESP;
			mOutRightData[4][61:54] = mMuxRightData_B_BID;
			mOutRightData[4][53] = mMuxRightData_AW_AWREADY;
			mOutRightData[4][52] = mMuxRightData_R_RVALID;
			mOutRightData[4][51:44] = mMuxRightData_R_RUSER;
			mOutRightData[4][43] = mMuxRightData_R_RLAST;
			mOutRightData[4][42:41] = mMuxRightData_R_RRESP;
			mOutRightData[4][40:9] = { mMuxRightData_R_RDATA[3], mMuxRightData_R_RDATA[2], mMuxRightData_R_RDATA[1], mMuxRightData_R_RDATA[0] };
			mOutRightData[4][8:1] = mMuxRightData_R_RID;
			mOutRightData[4][0] = mMuxRightData_AR_ARREADY;
		end
		else
		begin
			mOutRightData[4][73] = mEmptyRightData_W_WREADY;
			mOutRightData[4][72] = mEmptyRightData_B_BVALID;
			mOutRightData[4][71:64] = mEmptyRightData_B_BUSER;
			mOutRightData[4][63:62] = mEmptyRightData_B_BRESP;
			mOutRightData[4][61:54] = mEmptyRightData_B_BID;
			mOutRightData[4][53] = mEmptyRightData_AW_AWREADY;
			mOutRightData[4][52] = mEmptyRightData_R_RVALID;
			mOutRightData[4][51:44] = mEmptyRightData_R_RUSER;
			mOutRightData[4][43] = mEmptyRightData_R_RLAST;
			mOutRightData[4][42:41] = mEmptyRightData_R_RRESP;
			mOutRightData[4][40:9] = { mEmptyRightData_R_RDATA[3], mEmptyRightData_R_RDATA[2], mEmptyRightData_R_RDATA[1], mEmptyRightData_R_RDATA[0] };
			mOutRightData[4][8:1] = mEmptyRightData_R_RID;
			mOutRightData[4][0] = mEmptyRightData_AR_ARREADY;
		end
	end
	always @ (*)
	begin
		if ((FullDuplexMuxModule_L118F13L128T14_5_FullDuplexMuxModule_L120F21T75_Expr == 1))
		begin
			mOutRightData[5][73] = mMuxRightData_W_WREADY;
			mOutRightData[5][72] = mMuxRightData_B_BVALID;
			mOutRightData[5][71:64] = mMuxRightData_B_BUSER;
			mOutRightData[5][63:62] = mMuxRightData_B_BRESP;
			mOutRightData[5][61:54] = mMuxRightData_B_BID;
			mOutRightData[5][53] = mMuxRightData_AW_AWREADY;
			mOutRightData[5][52] = mMuxRightData_R_RVALID;
			mOutRightData[5][51:44] = mMuxRightData_R_RUSER;
			mOutRightData[5][43] = mMuxRightData_R_RLAST;
			mOutRightData[5][42:41] = mMuxRightData_R_RRESP;
			mOutRightData[5][40:9] = { mMuxRightData_R_RDATA[3], mMuxRightData_R_RDATA[2], mMuxRightData_R_RDATA[1], mMuxRightData_R_RDATA[0] };
			mOutRightData[5][8:1] = mMuxRightData_R_RID;
			mOutRightData[5][0] = mMuxRightData_AR_ARREADY;
		end
		else
		begin
			mOutRightData[5][73] = mEmptyRightData_W_WREADY;
			mOutRightData[5][72] = mEmptyRightData_B_BVALID;
			mOutRightData[5][71:64] = mEmptyRightData_B_BUSER;
			mOutRightData[5][63:62] = mEmptyRightData_B_BRESP;
			mOutRightData[5][61:54] = mEmptyRightData_B_BID;
			mOutRightData[5][53] = mEmptyRightData_AW_AWREADY;
			mOutRightData[5][52] = mEmptyRightData_R_RVALID;
			mOutRightData[5][51:44] = mEmptyRightData_R_RUSER;
			mOutRightData[5][43] = mEmptyRightData_R_RLAST;
			mOutRightData[5][42:41] = mEmptyRightData_R_RRESP;
			mOutRightData[5][40:9] = { mEmptyRightData_R_RDATA[3], mEmptyRightData_R_RDATA[2], mEmptyRightData_R_RDATA[1], mEmptyRightData_R_RDATA[0] };
			mOutRightData[5][8:1] = mEmptyRightData_R_RID;
			mOutRightData[5][0] = mEmptyRightData_AR_ARREADY;
		end
	end
	always @ (*)
	begin
		if ((FullDuplexMuxModule_L118F13L128T14_6_FullDuplexMuxModule_L120F21T75_Expr == 1))
		begin
			mOutRightData[6][73] = mMuxRightData_W_WREADY;
			mOutRightData[6][72] = mMuxRightData_B_BVALID;
			mOutRightData[6][71:64] = mMuxRightData_B_BUSER;
			mOutRightData[6][63:62] = mMuxRightData_B_BRESP;
			mOutRightData[6][61:54] = mMuxRightData_B_BID;
			mOutRightData[6][53] = mMuxRightData_AW_AWREADY;
			mOutRightData[6][52] = mMuxRightData_R_RVALID;
			mOutRightData[6][51:44] = mMuxRightData_R_RUSER;
			mOutRightData[6][43] = mMuxRightData_R_RLAST;
			mOutRightData[6][42:41] = mMuxRightData_R_RRESP;
			mOutRightData[6][40:9] = { mMuxRightData_R_RDATA[3], mMuxRightData_R_RDATA[2], mMuxRightData_R_RDATA[1], mMuxRightData_R_RDATA[0] };
			mOutRightData[6][8:1] = mMuxRightData_R_RID;
			mOutRightData[6][0] = mMuxRightData_AR_ARREADY;
		end
		else
		begin
			mOutRightData[6][73] = mEmptyRightData_W_WREADY;
			mOutRightData[6][72] = mEmptyRightData_B_BVALID;
			mOutRightData[6][71:64] = mEmptyRightData_B_BUSER;
			mOutRightData[6][63:62] = mEmptyRightData_B_BRESP;
			mOutRightData[6][61:54] = mEmptyRightData_B_BID;
			mOutRightData[6][53] = mEmptyRightData_AW_AWREADY;
			mOutRightData[6][52] = mEmptyRightData_R_RVALID;
			mOutRightData[6][51:44] = mEmptyRightData_R_RUSER;
			mOutRightData[6][43] = mEmptyRightData_R_RLAST;
			mOutRightData[6][42:41] = mEmptyRightData_R_RRESP;
			mOutRightData[6][40:9] = { mEmptyRightData_R_RDATA[3], mEmptyRightData_R_RDATA[2], mEmptyRightData_R_RDATA[1], mEmptyRightData_R_RDATA[0] };
			mOutRightData[6][8:1] = mEmptyRightData_R_RID;
			mOutRightData[6][0] = mEmptyRightData_AR_ARREADY;
		end
	end
	always @ (*)
	begin
		if ((FullDuplexMuxModule_L118F13L128T14_7_FullDuplexMuxModule_L120F21T75_Expr == 1))
		begin
			mOutRightData[7][73] = mMuxRightData_W_WREADY;
			mOutRightData[7][72] = mMuxRightData_B_BVALID;
			mOutRightData[7][71:64] = mMuxRightData_B_BUSER;
			mOutRightData[7][63:62] = mMuxRightData_B_BRESP;
			mOutRightData[7][61:54] = mMuxRightData_B_BID;
			mOutRightData[7][53] = mMuxRightData_AW_AWREADY;
			mOutRightData[7][52] = mMuxRightData_R_RVALID;
			mOutRightData[7][51:44] = mMuxRightData_R_RUSER;
			mOutRightData[7][43] = mMuxRightData_R_RLAST;
			mOutRightData[7][42:41] = mMuxRightData_R_RRESP;
			mOutRightData[7][40:9] = { mMuxRightData_R_RDATA[3], mMuxRightData_R_RDATA[2], mMuxRightData_R_RDATA[1], mMuxRightData_R_RDATA[0] };
			mOutRightData[7][8:1] = mMuxRightData_R_RID;
			mOutRightData[7][0] = mMuxRightData_AR_ARREADY;
		end
		else
		begin
			mOutRightData[7][73] = mEmptyRightData_W_WREADY;
			mOutRightData[7][72] = mEmptyRightData_B_BVALID;
			mOutRightData[7][71:64] = mEmptyRightData_B_BUSER;
			mOutRightData[7][63:62] = mEmptyRightData_B_BRESP;
			mOutRightData[7][61:54] = mEmptyRightData_B_BID;
			mOutRightData[7][53] = mEmptyRightData_AW_AWREADY;
			mOutRightData[7][52] = mEmptyRightData_R_RVALID;
			mOutRightData[7][51:44] = mEmptyRightData_R_RUSER;
			mOutRightData[7][43] = mEmptyRightData_R_RLAST;
			mOutRightData[7][42:41] = mEmptyRightData_R_RRESP;
			mOutRightData[7][40:9] = { mEmptyRightData_R_RDATA[3], mEmptyRightData_R_RDATA[2], mEmptyRightData_R_RDATA[1], mEmptyRightData_R_RDATA[0] };
			mOutRightData[7][8:1] = mEmptyRightData_R_RID;
			mOutRightData[7][0] = mEmptyRightData_AR_ARREADY;
		end
	end
	assign FullDuplexMuxModule_L94F13L104T14_0_FullDuplexMuxModule_L96F47T78_ExprLhs = { 1'b0, Inputs_iRightAddr };
	assign FullDuplexMuxModule_L94F13L104T14_0_FullDuplexMuxModule_L96F47T78_ExprRhs = { {2{1'b0}}, Prefilled0 };
	assign FullDuplexMuxModule_L94F13L104T14_1_FullDuplexMuxModule_L96F47T78_ExprLhs = { 1'b0, Inputs_iRightAddr };
	assign FullDuplexMuxModule_L94F13L104T14_1_FullDuplexMuxModule_L96F47T78_ExprRhs = { {2{1'b0}}, Prefilled1 };
	assign FullDuplexMuxModule_L94F13L104T14_2_FullDuplexMuxModule_L96F47T78_ExprLhs = { 1'b0, Inputs_iRightAddr };
	assign FullDuplexMuxModule_L94F13L104T14_2_FullDuplexMuxModule_L96F47T78_ExprRhs = { 1'b0, Prefilled2 };
	assign FullDuplexMuxModule_L94F13L104T14_3_FullDuplexMuxModule_L96F47T78_ExprLhs = { 1'b0, Inputs_iRightAddr };
	assign FullDuplexMuxModule_L94F13L104T14_3_FullDuplexMuxModule_L96F47T78_ExprRhs = { 1'b0, Prefilled3 };
	assign FullDuplexMuxModule_L118F13L128T14_0_FullDuplexMuxModule_L120F46T75_ExprLhs = { 1'b0, Inputs_iLeftAddr };
	assign FullDuplexMuxModule_L118F13L128T14_0_FullDuplexMuxModule_L120F46T75_ExprRhs = { {3{1'b0}}, Prefilled0 };
	assign FullDuplexMuxModule_L118F13L128T14_1_FullDuplexMuxModule_L120F46T75_ExprLhs = { 1'b0, Inputs_iLeftAddr };
	assign FullDuplexMuxModule_L118F13L128T14_1_FullDuplexMuxModule_L120F46T75_ExprRhs = { {3{1'b0}}, Prefilled1 };
	assign FullDuplexMuxModule_L118F13L128T14_2_FullDuplexMuxModule_L120F46T75_ExprLhs = { 1'b0, Inputs_iLeftAddr };
	assign FullDuplexMuxModule_L118F13L128T14_2_FullDuplexMuxModule_L120F46T75_ExprRhs = { {2{1'b0}}, Prefilled2 };
	assign FullDuplexMuxModule_L118F13L128T14_3_FullDuplexMuxModule_L120F46T75_ExprLhs = { 1'b0, Inputs_iLeftAddr };
	assign FullDuplexMuxModule_L118F13L128T14_3_FullDuplexMuxModule_L120F46T75_ExprRhs = { {2{1'b0}}, Prefilled3 };
	assign FullDuplexMuxModule_L118F13L128T14_4_FullDuplexMuxModule_L120F46T75_ExprLhs = { 1'b0, Inputs_iLeftAddr };
	assign FullDuplexMuxModule_L118F13L128T14_4_FullDuplexMuxModule_L120F46T75_ExprRhs = { 1'b0, Prefilled4 };
	assign FullDuplexMuxModule_L118F13L128T14_5_FullDuplexMuxModule_L120F46T75_ExprLhs = { 1'b0, Inputs_iLeftAddr };
	assign FullDuplexMuxModule_L118F13L128T14_5_FullDuplexMuxModule_L120F46T75_ExprRhs = { 1'b0, Prefilled5 };
	assign FullDuplexMuxModule_L118F13L128T14_6_FullDuplexMuxModule_L120F46T75_ExprLhs = { 1'b0, Inputs_iLeftAddr };
	assign FullDuplexMuxModule_L118F13L128T14_6_FullDuplexMuxModule_L120F46T75_ExprRhs = { 1'b0, Prefilled6 };
	assign FullDuplexMuxModule_L118F13L128T14_7_FullDuplexMuxModule_L120F46T75_ExprLhs = { 1'b0, Inputs_iLeftAddr };
	assign FullDuplexMuxModule_L118F13L128T14_7_FullDuplexMuxModule_L120F46T75_ExprRhs = { 1'b0, Prefilled7 };
	assign FullDuplexMuxModule_L94F13L104T14_0_FullDuplexMuxModule_L96F21T78_Expr_1 = Inputs_iRightAddrValid;
	assign FullDuplexMuxModule_L94F13L104T14_0_FullDuplexMuxModule_L96F21T78_Expr_2 = FullDuplexMuxModule_L94F13L104T14_0_FullDuplexMuxModule_L96F47T78_Expr;
	assign FullDuplexMuxModule_L94F13L104T14_1_FullDuplexMuxModule_L96F21T78_Expr_1 = Inputs_iRightAddrValid;
	assign FullDuplexMuxModule_L94F13L104T14_1_FullDuplexMuxModule_L96F21T78_Expr_2 = FullDuplexMuxModule_L94F13L104T14_1_FullDuplexMuxModule_L96F47T78_Expr;
	assign FullDuplexMuxModule_L94F13L104T14_2_FullDuplexMuxModule_L96F21T78_Expr_1 = Inputs_iRightAddrValid;
	assign FullDuplexMuxModule_L94F13L104T14_2_FullDuplexMuxModule_L96F21T78_Expr_2 = FullDuplexMuxModule_L94F13L104T14_2_FullDuplexMuxModule_L96F47T78_Expr;
	assign FullDuplexMuxModule_L94F13L104T14_3_FullDuplexMuxModule_L96F21T78_Expr_1 = Inputs_iRightAddrValid;
	assign FullDuplexMuxModule_L94F13L104T14_3_FullDuplexMuxModule_L96F21T78_Expr_2 = FullDuplexMuxModule_L94F13L104T14_3_FullDuplexMuxModule_L96F47T78_Expr;
	assign FullDuplexMuxModule_L118F13L128T14_0_FullDuplexMuxModule_L120F21T75_Expr_1 = Inputs_iLeftAddrValid;
	assign FullDuplexMuxModule_L118F13L128T14_0_FullDuplexMuxModule_L120F21T75_Expr_2 = FullDuplexMuxModule_L118F13L128T14_0_FullDuplexMuxModule_L120F46T75_Expr;
	assign FullDuplexMuxModule_L118F13L128T14_1_FullDuplexMuxModule_L120F21T75_Expr_1 = Inputs_iLeftAddrValid;
	assign FullDuplexMuxModule_L118F13L128T14_1_FullDuplexMuxModule_L120F21T75_Expr_2 = FullDuplexMuxModule_L118F13L128T14_1_FullDuplexMuxModule_L120F46T75_Expr;
	assign FullDuplexMuxModule_L118F13L128T14_2_FullDuplexMuxModule_L120F21T75_Expr_1 = Inputs_iLeftAddrValid;
	assign FullDuplexMuxModule_L118F13L128T14_2_FullDuplexMuxModule_L120F21T75_Expr_2 = FullDuplexMuxModule_L118F13L128T14_2_FullDuplexMuxModule_L120F46T75_Expr;
	assign FullDuplexMuxModule_L118F13L128T14_3_FullDuplexMuxModule_L120F21T75_Expr_1 = Inputs_iLeftAddrValid;
	assign FullDuplexMuxModule_L118F13L128T14_3_FullDuplexMuxModule_L120F21T75_Expr_2 = FullDuplexMuxModule_L118F13L128T14_3_FullDuplexMuxModule_L120F46T75_Expr;
	assign FullDuplexMuxModule_L118F13L128T14_4_FullDuplexMuxModule_L120F21T75_Expr_1 = Inputs_iLeftAddrValid;
	assign FullDuplexMuxModule_L118F13L128T14_4_FullDuplexMuxModule_L120F21T75_Expr_2 = FullDuplexMuxModule_L118F13L128T14_4_FullDuplexMuxModule_L120F46T75_Expr;
	assign FullDuplexMuxModule_L118F13L128T14_5_FullDuplexMuxModule_L120F21T75_Expr_1 = Inputs_iLeftAddrValid;
	assign FullDuplexMuxModule_L118F13L128T14_5_FullDuplexMuxModule_L120F21T75_Expr_2 = FullDuplexMuxModule_L118F13L128T14_5_FullDuplexMuxModule_L120F46T75_Expr;
	assign FullDuplexMuxModule_L118F13L128T14_6_FullDuplexMuxModule_L120F21T75_Expr_1 = Inputs_iLeftAddrValid;
	assign FullDuplexMuxModule_L118F13L128T14_6_FullDuplexMuxModule_L120F21T75_Expr_2 = FullDuplexMuxModule_L118F13L128T14_6_FullDuplexMuxModule_L120F46T75_Expr;
	assign FullDuplexMuxModule_L118F13L128T14_7_FullDuplexMuxModule_L120F21T75_Expr_1 = Inputs_iLeftAddrValid;
	assign FullDuplexMuxModule_L118F13L128T14_7_FullDuplexMuxModule_L120F21T75_Expr_2 = FullDuplexMuxModule_L118F13L128T14_7_FullDuplexMuxModule_L120F46T75_Expr;
	assign Inputs_iLeft[0][221] = iLeft0_B_BREADY;
	assign Inputs_iLeft[0][220] = iLeft0_W_WVALID;
	assign Inputs_iLeft[0][219:212] = iLeft0_W_WUSER;
	assign Inputs_iLeft[0][211] = iLeft0_W_WLAST;
	assign Inputs_iLeft[0][210:207] = iLeft0_W_WSTRB;
	assign Inputs_iLeft[0][206:199] = iLeft0_W_WDATA3;
	assign Inputs_iLeft[0][198:191] = iLeft0_W_WDATA2;
	assign Inputs_iLeft[0][190:183] = iLeft0_W_WDATA1;
	assign Inputs_iLeft[0][182:175] = iLeft0_W_WDATA0;
	assign Inputs_iLeft[0][174:167] = iLeft0_W_WID;
	assign Inputs_iLeft[0][166] = iLeft0_AW_AWVALID;
	assign Inputs_iLeft[0][165:158] = iLeft0_AW_AWUSER;
	assign Inputs_iLeft[0][157:150] = iLeft0_AW_AWREGION;
	assign Inputs_iLeft[0][149:146] = iLeft0_AW_AWQOS;
	assign Inputs_iLeft[0][145:143] = iLeft0_AW_AWPROT;
	assign Inputs_iLeft[0][142:139] = iLeft0_AW_AWCACHE;
	assign Inputs_iLeft[0][138:137] = iLeft0_AW_AWLOCK;
	assign Inputs_iLeft[0][136:135] = iLeft0_AW_AWBURST;
	assign Inputs_iLeft[0][134:132] = iLeft0_AW_AWSIZE;
	assign Inputs_iLeft[0][131:124] = iLeft0_AW_AWLEN;
	assign Inputs_iLeft[0][123:92] = iLeft0_AW_AWADDR;
	assign Inputs_iLeft[0][91:84] = iLeft0_AW_AWID;
	assign Inputs_iLeft[0][83] = iLeft0_R_RREADY;
	assign Inputs_iLeft[0][82] = iLeft0_AR_ARVALID;
	assign Inputs_iLeft[0][81:74] = iLeft0_AR_ARUSER;
	assign Inputs_iLeft[0][73:66] = iLeft0_AR_ARREGION;
	assign Inputs_iLeft[0][65:62] = iLeft0_AR_ARQOS;
	assign Inputs_iLeft[0][61:59] = iLeft0_AR_ARPROT;
	assign Inputs_iLeft[0][58:55] = iLeft0_AR_ARCACHE;
	assign Inputs_iLeft[0][54:53] = iLeft0_AR_ARLOCK;
	assign Inputs_iLeft[0][52:51] = iLeft0_AR_ARBURST;
	assign Inputs_iLeft[0][50:48] = iLeft0_AR_ARSIZE;
	assign Inputs_iLeft[0][47:40] = iLeft0_AR_ARLEN;
	assign Inputs_iLeft[0][39:8] = iLeft0_AR_ARADDR;
	assign Inputs_iLeft[0][7:0] = iLeft0_AR_ARID;
	assign Inputs_iLeft[1][221] = iLeft1_B_BREADY;
	assign Inputs_iLeft[1][220] = iLeft1_W_WVALID;
	assign Inputs_iLeft[1][219:212] = iLeft1_W_WUSER;
	assign Inputs_iLeft[1][211] = iLeft1_W_WLAST;
	assign Inputs_iLeft[1][210:207] = iLeft1_W_WSTRB;
	assign Inputs_iLeft[1][206:199] = iLeft1_W_WDATA3;
	assign Inputs_iLeft[1][198:191] = iLeft1_W_WDATA2;
	assign Inputs_iLeft[1][190:183] = iLeft1_W_WDATA1;
	assign Inputs_iLeft[1][182:175] = iLeft1_W_WDATA0;
	assign Inputs_iLeft[1][174:167] = iLeft1_W_WID;
	assign Inputs_iLeft[1][166] = iLeft1_AW_AWVALID;
	assign Inputs_iLeft[1][165:158] = iLeft1_AW_AWUSER;
	assign Inputs_iLeft[1][157:150] = iLeft1_AW_AWREGION;
	assign Inputs_iLeft[1][149:146] = iLeft1_AW_AWQOS;
	assign Inputs_iLeft[1][145:143] = iLeft1_AW_AWPROT;
	assign Inputs_iLeft[1][142:139] = iLeft1_AW_AWCACHE;
	assign Inputs_iLeft[1][138:137] = iLeft1_AW_AWLOCK;
	assign Inputs_iLeft[1][136:135] = iLeft1_AW_AWBURST;
	assign Inputs_iLeft[1][134:132] = iLeft1_AW_AWSIZE;
	assign Inputs_iLeft[1][131:124] = iLeft1_AW_AWLEN;
	assign Inputs_iLeft[1][123:92] = iLeft1_AW_AWADDR;
	assign Inputs_iLeft[1][91:84] = iLeft1_AW_AWID;
	assign Inputs_iLeft[1][83] = iLeft1_R_RREADY;
	assign Inputs_iLeft[1][82] = iLeft1_AR_ARVALID;
	assign Inputs_iLeft[1][81:74] = iLeft1_AR_ARUSER;
	assign Inputs_iLeft[1][73:66] = iLeft1_AR_ARREGION;
	assign Inputs_iLeft[1][65:62] = iLeft1_AR_ARQOS;
	assign Inputs_iLeft[1][61:59] = iLeft1_AR_ARPROT;
	assign Inputs_iLeft[1][58:55] = iLeft1_AR_ARCACHE;
	assign Inputs_iLeft[1][54:53] = iLeft1_AR_ARLOCK;
	assign Inputs_iLeft[1][52:51] = iLeft1_AR_ARBURST;
	assign Inputs_iLeft[1][50:48] = iLeft1_AR_ARSIZE;
	assign Inputs_iLeft[1][47:40] = iLeft1_AR_ARLEN;
	assign Inputs_iLeft[1][39:8] = iLeft1_AR_ARADDR;
	assign Inputs_iLeft[1][7:0] = iLeft1_AR_ARID;
	assign Inputs_iLeft[2][221] = iLeft2_B_BREADY;
	assign Inputs_iLeft[2][220] = iLeft2_W_WVALID;
	assign Inputs_iLeft[2][219:212] = iLeft2_W_WUSER;
	assign Inputs_iLeft[2][211] = iLeft2_W_WLAST;
	assign Inputs_iLeft[2][210:207] = iLeft2_W_WSTRB;
	assign Inputs_iLeft[2][206:199] = iLeft2_W_WDATA3;
	assign Inputs_iLeft[2][198:191] = iLeft2_W_WDATA2;
	assign Inputs_iLeft[2][190:183] = iLeft2_W_WDATA1;
	assign Inputs_iLeft[2][182:175] = iLeft2_W_WDATA0;
	assign Inputs_iLeft[2][174:167] = iLeft2_W_WID;
	assign Inputs_iLeft[2][166] = iLeft2_AW_AWVALID;
	assign Inputs_iLeft[2][165:158] = iLeft2_AW_AWUSER;
	assign Inputs_iLeft[2][157:150] = iLeft2_AW_AWREGION;
	assign Inputs_iLeft[2][149:146] = iLeft2_AW_AWQOS;
	assign Inputs_iLeft[2][145:143] = iLeft2_AW_AWPROT;
	assign Inputs_iLeft[2][142:139] = iLeft2_AW_AWCACHE;
	assign Inputs_iLeft[2][138:137] = iLeft2_AW_AWLOCK;
	assign Inputs_iLeft[2][136:135] = iLeft2_AW_AWBURST;
	assign Inputs_iLeft[2][134:132] = iLeft2_AW_AWSIZE;
	assign Inputs_iLeft[2][131:124] = iLeft2_AW_AWLEN;
	assign Inputs_iLeft[2][123:92] = iLeft2_AW_AWADDR;
	assign Inputs_iLeft[2][91:84] = iLeft2_AW_AWID;
	assign Inputs_iLeft[2][83] = iLeft2_R_RREADY;
	assign Inputs_iLeft[2][82] = iLeft2_AR_ARVALID;
	assign Inputs_iLeft[2][81:74] = iLeft2_AR_ARUSER;
	assign Inputs_iLeft[2][73:66] = iLeft2_AR_ARREGION;
	assign Inputs_iLeft[2][65:62] = iLeft2_AR_ARQOS;
	assign Inputs_iLeft[2][61:59] = iLeft2_AR_ARPROT;
	assign Inputs_iLeft[2][58:55] = iLeft2_AR_ARCACHE;
	assign Inputs_iLeft[2][54:53] = iLeft2_AR_ARLOCK;
	assign Inputs_iLeft[2][52:51] = iLeft2_AR_ARBURST;
	assign Inputs_iLeft[2][50:48] = iLeft2_AR_ARSIZE;
	assign Inputs_iLeft[2][47:40] = iLeft2_AR_ARLEN;
	assign Inputs_iLeft[2][39:8] = iLeft2_AR_ARADDR;
	assign Inputs_iLeft[2][7:0] = iLeft2_AR_ARID;
	assign Inputs_iLeft[3][221] = iLeft3_B_BREADY;
	assign Inputs_iLeft[3][220] = iLeft3_W_WVALID;
	assign Inputs_iLeft[3][219:212] = iLeft3_W_WUSER;
	assign Inputs_iLeft[3][211] = iLeft3_W_WLAST;
	assign Inputs_iLeft[3][210:207] = iLeft3_W_WSTRB;
	assign Inputs_iLeft[3][206:199] = iLeft3_W_WDATA3;
	assign Inputs_iLeft[3][198:191] = iLeft3_W_WDATA2;
	assign Inputs_iLeft[3][190:183] = iLeft3_W_WDATA1;
	assign Inputs_iLeft[3][182:175] = iLeft3_W_WDATA0;
	assign Inputs_iLeft[3][174:167] = iLeft3_W_WID;
	assign Inputs_iLeft[3][166] = iLeft3_AW_AWVALID;
	assign Inputs_iLeft[3][165:158] = iLeft3_AW_AWUSER;
	assign Inputs_iLeft[3][157:150] = iLeft3_AW_AWREGION;
	assign Inputs_iLeft[3][149:146] = iLeft3_AW_AWQOS;
	assign Inputs_iLeft[3][145:143] = iLeft3_AW_AWPROT;
	assign Inputs_iLeft[3][142:139] = iLeft3_AW_AWCACHE;
	assign Inputs_iLeft[3][138:137] = iLeft3_AW_AWLOCK;
	assign Inputs_iLeft[3][136:135] = iLeft3_AW_AWBURST;
	assign Inputs_iLeft[3][134:132] = iLeft3_AW_AWSIZE;
	assign Inputs_iLeft[3][131:124] = iLeft3_AW_AWLEN;
	assign Inputs_iLeft[3][123:92] = iLeft3_AW_AWADDR;
	assign Inputs_iLeft[3][91:84] = iLeft3_AW_AWID;
	assign Inputs_iLeft[3][83] = iLeft3_R_RREADY;
	assign Inputs_iLeft[3][82] = iLeft3_AR_ARVALID;
	assign Inputs_iLeft[3][81:74] = iLeft3_AR_ARUSER;
	assign Inputs_iLeft[3][73:66] = iLeft3_AR_ARREGION;
	assign Inputs_iLeft[3][65:62] = iLeft3_AR_ARQOS;
	assign Inputs_iLeft[3][61:59] = iLeft3_AR_ARPROT;
	assign Inputs_iLeft[3][58:55] = iLeft3_AR_ARCACHE;
	assign Inputs_iLeft[3][54:53] = iLeft3_AR_ARLOCK;
	assign Inputs_iLeft[3][52:51] = iLeft3_AR_ARBURST;
	assign Inputs_iLeft[3][50:48] = iLeft3_AR_ARSIZE;
	assign Inputs_iLeft[3][47:40] = iLeft3_AR_ARLEN;
	assign Inputs_iLeft[3][39:8] = iLeft3_AR_ARADDR;
	assign Inputs_iLeft[3][7:0] = iLeft3_AR_ARID;
	assign Inputs_iLeft[4][221] = iLeft4_B_BREADY;
	assign Inputs_iLeft[4][220] = iLeft4_W_WVALID;
	assign Inputs_iLeft[4][219:212] = iLeft4_W_WUSER;
	assign Inputs_iLeft[4][211] = iLeft4_W_WLAST;
	assign Inputs_iLeft[4][210:207] = iLeft4_W_WSTRB;
	assign Inputs_iLeft[4][206:199] = iLeft4_W_WDATA3;
	assign Inputs_iLeft[4][198:191] = iLeft4_W_WDATA2;
	assign Inputs_iLeft[4][190:183] = iLeft4_W_WDATA1;
	assign Inputs_iLeft[4][182:175] = iLeft4_W_WDATA0;
	assign Inputs_iLeft[4][174:167] = iLeft4_W_WID;
	assign Inputs_iLeft[4][166] = iLeft4_AW_AWVALID;
	assign Inputs_iLeft[4][165:158] = iLeft4_AW_AWUSER;
	assign Inputs_iLeft[4][157:150] = iLeft4_AW_AWREGION;
	assign Inputs_iLeft[4][149:146] = iLeft4_AW_AWQOS;
	assign Inputs_iLeft[4][145:143] = iLeft4_AW_AWPROT;
	assign Inputs_iLeft[4][142:139] = iLeft4_AW_AWCACHE;
	assign Inputs_iLeft[4][138:137] = iLeft4_AW_AWLOCK;
	assign Inputs_iLeft[4][136:135] = iLeft4_AW_AWBURST;
	assign Inputs_iLeft[4][134:132] = iLeft4_AW_AWSIZE;
	assign Inputs_iLeft[4][131:124] = iLeft4_AW_AWLEN;
	assign Inputs_iLeft[4][123:92] = iLeft4_AW_AWADDR;
	assign Inputs_iLeft[4][91:84] = iLeft4_AW_AWID;
	assign Inputs_iLeft[4][83] = iLeft4_R_RREADY;
	assign Inputs_iLeft[4][82] = iLeft4_AR_ARVALID;
	assign Inputs_iLeft[4][81:74] = iLeft4_AR_ARUSER;
	assign Inputs_iLeft[4][73:66] = iLeft4_AR_ARREGION;
	assign Inputs_iLeft[4][65:62] = iLeft4_AR_ARQOS;
	assign Inputs_iLeft[4][61:59] = iLeft4_AR_ARPROT;
	assign Inputs_iLeft[4][58:55] = iLeft4_AR_ARCACHE;
	assign Inputs_iLeft[4][54:53] = iLeft4_AR_ARLOCK;
	assign Inputs_iLeft[4][52:51] = iLeft4_AR_ARBURST;
	assign Inputs_iLeft[4][50:48] = iLeft4_AR_ARSIZE;
	assign Inputs_iLeft[4][47:40] = iLeft4_AR_ARLEN;
	assign Inputs_iLeft[4][39:8] = iLeft4_AR_ARADDR;
	assign Inputs_iLeft[4][7:0] = iLeft4_AR_ARID;
	assign Inputs_iLeft[5][221] = iLeft5_B_BREADY;
	assign Inputs_iLeft[5][220] = iLeft5_W_WVALID;
	assign Inputs_iLeft[5][219:212] = iLeft5_W_WUSER;
	assign Inputs_iLeft[5][211] = iLeft5_W_WLAST;
	assign Inputs_iLeft[5][210:207] = iLeft5_W_WSTRB;
	assign Inputs_iLeft[5][206:199] = iLeft5_W_WDATA3;
	assign Inputs_iLeft[5][198:191] = iLeft5_W_WDATA2;
	assign Inputs_iLeft[5][190:183] = iLeft5_W_WDATA1;
	assign Inputs_iLeft[5][182:175] = iLeft5_W_WDATA0;
	assign Inputs_iLeft[5][174:167] = iLeft5_W_WID;
	assign Inputs_iLeft[5][166] = iLeft5_AW_AWVALID;
	assign Inputs_iLeft[5][165:158] = iLeft5_AW_AWUSER;
	assign Inputs_iLeft[5][157:150] = iLeft5_AW_AWREGION;
	assign Inputs_iLeft[5][149:146] = iLeft5_AW_AWQOS;
	assign Inputs_iLeft[5][145:143] = iLeft5_AW_AWPROT;
	assign Inputs_iLeft[5][142:139] = iLeft5_AW_AWCACHE;
	assign Inputs_iLeft[5][138:137] = iLeft5_AW_AWLOCK;
	assign Inputs_iLeft[5][136:135] = iLeft5_AW_AWBURST;
	assign Inputs_iLeft[5][134:132] = iLeft5_AW_AWSIZE;
	assign Inputs_iLeft[5][131:124] = iLeft5_AW_AWLEN;
	assign Inputs_iLeft[5][123:92] = iLeft5_AW_AWADDR;
	assign Inputs_iLeft[5][91:84] = iLeft5_AW_AWID;
	assign Inputs_iLeft[5][83] = iLeft5_R_RREADY;
	assign Inputs_iLeft[5][82] = iLeft5_AR_ARVALID;
	assign Inputs_iLeft[5][81:74] = iLeft5_AR_ARUSER;
	assign Inputs_iLeft[5][73:66] = iLeft5_AR_ARREGION;
	assign Inputs_iLeft[5][65:62] = iLeft5_AR_ARQOS;
	assign Inputs_iLeft[5][61:59] = iLeft5_AR_ARPROT;
	assign Inputs_iLeft[5][58:55] = iLeft5_AR_ARCACHE;
	assign Inputs_iLeft[5][54:53] = iLeft5_AR_ARLOCK;
	assign Inputs_iLeft[5][52:51] = iLeft5_AR_ARBURST;
	assign Inputs_iLeft[5][50:48] = iLeft5_AR_ARSIZE;
	assign Inputs_iLeft[5][47:40] = iLeft5_AR_ARLEN;
	assign Inputs_iLeft[5][39:8] = iLeft5_AR_ARADDR;
	assign Inputs_iLeft[5][7:0] = iLeft5_AR_ARID;
	assign Inputs_iLeft[6][221] = iLeft6_B_BREADY;
	assign Inputs_iLeft[6][220] = iLeft6_W_WVALID;
	assign Inputs_iLeft[6][219:212] = iLeft6_W_WUSER;
	assign Inputs_iLeft[6][211] = iLeft6_W_WLAST;
	assign Inputs_iLeft[6][210:207] = iLeft6_W_WSTRB;
	assign Inputs_iLeft[6][206:199] = iLeft6_W_WDATA3;
	assign Inputs_iLeft[6][198:191] = iLeft6_W_WDATA2;
	assign Inputs_iLeft[6][190:183] = iLeft6_W_WDATA1;
	assign Inputs_iLeft[6][182:175] = iLeft6_W_WDATA0;
	assign Inputs_iLeft[6][174:167] = iLeft6_W_WID;
	assign Inputs_iLeft[6][166] = iLeft6_AW_AWVALID;
	assign Inputs_iLeft[6][165:158] = iLeft6_AW_AWUSER;
	assign Inputs_iLeft[6][157:150] = iLeft6_AW_AWREGION;
	assign Inputs_iLeft[6][149:146] = iLeft6_AW_AWQOS;
	assign Inputs_iLeft[6][145:143] = iLeft6_AW_AWPROT;
	assign Inputs_iLeft[6][142:139] = iLeft6_AW_AWCACHE;
	assign Inputs_iLeft[6][138:137] = iLeft6_AW_AWLOCK;
	assign Inputs_iLeft[6][136:135] = iLeft6_AW_AWBURST;
	assign Inputs_iLeft[6][134:132] = iLeft6_AW_AWSIZE;
	assign Inputs_iLeft[6][131:124] = iLeft6_AW_AWLEN;
	assign Inputs_iLeft[6][123:92] = iLeft6_AW_AWADDR;
	assign Inputs_iLeft[6][91:84] = iLeft6_AW_AWID;
	assign Inputs_iLeft[6][83] = iLeft6_R_RREADY;
	assign Inputs_iLeft[6][82] = iLeft6_AR_ARVALID;
	assign Inputs_iLeft[6][81:74] = iLeft6_AR_ARUSER;
	assign Inputs_iLeft[6][73:66] = iLeft6_AR_ARREGION;
	assign Inputs_iLeft[6][65:62] = iLeft6_AR_ARQOS;
	assign Inputs_iLeft[6][61:59] = iLeft6_AR_ARPROT;
	assign Inputs_iLeft[6][58:55] = iLeft6_AR_ARCACHE;
	assign Inputs_iLeft[6][54:53] = iLeft6_AR_ARLOCK;
	assign Inputs_iLeft[6][52:51] = iLeft6_AR_ARBURST;
	assign Inputs_iLeft[6][50:48] = iLeft6_AR_ARSIZE;
	assign Inputs_iLeft[6][47:40] = iLeft6_AR_ARLEN;
	assign Inputs_iLeft[6][39:8] = iLeft6_AR_ARADDR;
	assign Inputs_iLeft[6][7:0] = iLeft6_AR_ARID;
	assign Inputs_iLeft[7][221] = iLeft7_B_BREADY;
	assign Inputs_iLeft[7][220] = iLeft7_W_WVALID;
	assign Inputs_iLeft[7][219:212] = iLeft7_W_WUSER;
	assign Inputs_iLeft[7][211] = iLeft7_W_WLAST;
	assign Inputs_iLeft[7][210:207] = iLeft7_W_WSTRB;
	assign Inputs_iLeft[7][206:199] = iLeft7_W_WDATA3;
	assign Inputs_iLeft[7][198:191] = iLeft7_W_WDATA2;
	assign Inputs_iLeft[7][190:183] = iLeft7_W_WDATA1;
	assign Inputs_iLeft[7][182:175] = iLeft7_W_WDATA0;
	assign Inputs_iLeft[7][174:167] = iLeft7_W_WID;
	assign Inputs_iLeft[7][166] = iLeft7_AW_AWVALID;
	assign Inputs_iLeft[7][165:158] = iLeft7_AW_AWUSER;
	assign Inputs_iLeft[7][157:150] = iLeft7_AW_AWREGION;
	assign Inputs_iLeft[7][149:146] = iLeft7_AW_AWQOS;
	assign Inputs_iLeft[7][145:143] = iLeft7_AW_AWPROT;
	assign Inputs_iLeft[7][142:139] = iLeft7_AW_AWCACHE;
	assign Inputs_iLeft[7][138:137] = iLeft7_AW_AWLOCK;
	assign Inputs_iLeft[7][136:135] = iLeft7_AW_AWBURST;
	assign Inputs_iLeft[7][134:132] = iLeft7_AW_AWSIZE;
	assign Inputs_iLeft[7][131:124] = iLeft7_AW_AWLEN;
	assign Inputs_iLeft[7][123:92] = iLeft7_AW_AWADDR;
	assign Inputs_iLeft[7][91:84] = iLeft7_AW_AWID;
	assign Inputs_iLeft[7][83] = iLeft7_R_RREADY;
	assign Inputs_iLeft[7][82] = iLeft7_AR_ARVALID;
	assign Inputs_iLeft[7][81:74] = iLeft7_AR_ARUSER;
	assign Inputs_iLeft[7][73:66] = iLeft7_AR_ARREGION;
	assign Inputs_iLeft[7][65:62] = iLeft7_AR_ARQOS;
	assign Inputs_iLeft[7][61:59] = iLeft7_AR_ARPROT;
	assign Inputs_iLeft[7][58:55] = iLeft7_AR_ARCACHE;
	assign Inputs_iLeft[7][54:53] = iLeft7_AR_ARLOCK;
	assign Inputs_iLeft[7][52:51] = iLeft7_AR_ARBURST;
	assign Inputs_iLeft[7][50:48] = iLeft7_AR_ARSIZE;
	assign Inputs_iLeft[7][47:40] = iLeft7_AR_ARLEN;
	assign Inputs_iLeft[7][39:8] = iLeft7_AR_ARADDR;
	assign Inputs_iLeft[7][7:0] = iLeft7_AR_ARID;
	assign Inputs_iLeftAddr = iLeftAddr;
	assign Inputs_iLeftAddrValid = iLeftAddrValid;
	assign Inputs_iRight[0][73] = iRight0_W_WREADY;
	assign Inputs_iRight[0][72] = iRight0_B_BVALID;
	assign Inputs_iRight[0][71:64] = iRight0_B_BUSER;
	assign Inputs_iRight[0][63:62] = iRight0_B_BRESP;
	assign Inputs_iRight[0][61:54] = iRight0_B_BID;
	assign Inputs_iRight[0][53] = iRight0_AW_AWREADY;
	assign Inputs_iRight[0][52] = iRight0_R_RVALID;
	assign Inputs_iRight[0][51:44] = iRight0_R_RUSER;
	assign Inputs_iRight[0][43] = iRight0_R_RLAST;
	assign Inputs_iRight[0][42:41] = iRight0_R_RRESP;
	assign Inputs_iRight[0][40:33] = iRight0_R_RDATA3;
	assign Inputs_iRight[0][32:25] = iRight0_R_RDATA2;
	assign Inputs_iRight[0][24:17] = iRight0_R_RDATA1;
	assign Inputs_iRight[0][16:9] = iRight0_R_RDATA0;
	assign Inputs_iRight[0][8:1] = iRight0_R_RID;
	assign Inputs_iRight[0][0] = iRight0_AR_ARREADY;
	assign Inputs_iRight[1][73] = iRight1_W_WREADY;
	assign Inputs_iRight[1][72] = iRight1_B_BVALID;
	assign Inputs_iRight[1][71:64] = iRight1_B_BUSER;
	assign Inputs_iRight[1][63:62] = iRight1_B_BRESP;
	assign Inputs_iRight[1][61:54] = iRight1_B_BID;
	assign Inputs_iRight[1][53] = iRight1_AW_AWREADY;
	assign Inputs_iRight[1][52] = iRight1_R_RVALID;
	assign Inputs_iRight[1][51:44] = iRight1_R_RUSER;
	assign Inputs_iRight[1][43] = iRight1_R_RLAST;
	assign Inputs_iRight[1][42:41] = iRight1_R_RRESP;
	assign Inputs_iRight[1][40:33] = iRight1_R_RDATA3;
	assign Inputs_iRight[1][32:25] = iRight1_R_RDATA2;
	assign Inputs_iRight[1][24:17] = iRight1_R_RDATA1;
	assign Inputs_iRight[1][16:9] = iRight1_R_RDATA0;
	assign Inputs_iRight[1][8:1] = iRight1_R_RID;
	assign Inputs_iRight[1][0] = iRight1_AR_ARREADY;
	assign Inputs_iRight[2][73] = iRight2_W_WREADY;
	assign Inputs_iRight[2][72] = iRight2_B_BVALID;
	assign Inputs_iRight[2][71:64] = iRight2_B_BUSER;
	assign Inputs_iRight[2][63:62] = iRight2_B_BRESP;
	assign Inputs_iRight[2][61:54] = iRight2_B_BID;
	assign Inputs_iRight[2][53] = iRight2_AW_AWREADY;
	assign Inputs_iRight[2][52] = iRight2_R_RVALID;
	assign Inputs_iRight[2][51:44] = iRight2_R_RUSER;
	assign Inputs_iRight[2][43] = iRight2_R_RLAST;
	assign Inputs_iRight[2][42:41] = iRight2_R_RRESP;
	assign Inputs_iRight[2][40:33] = iRight2_R_RDATA3;
	assign Inputs_iRight[2][32:25] = iRight2_R_RDATA2;
	assign Inputs_iRight[2][24:17] = iRight2_R_RDATA1;
	assign Inputs_iRight[2][16:9] = iRight2_R_RDATA0;
	assign Inputs_iRight[2][8:1] = iRight2_R_RID;
	assign Inputs_iRight[2][0] = iRight2_AR_ARREADY;
	assign Inputs_iRight[3][73] = iRight3_W_WREADY;
	assign Inputs_iRight[3][72] = iRight3_B_BVALID;
	assign Inputs_iRight[3][71:64] = iRight3_B_BUSER;
	assign Inputs_iRight[3][63:62] = iRight3_B_BRESP;
	assign Inputs_iRight[3][61:54] = iRight3_B_BID;
	assign Inputs_iRight[3][53] = iRight3_AW_AWREADY;
	assign Inputs_iRight[3][52] = iRight3_R_RVALID;
	assign Inputs_iRight[3][51:44] = iRight3_R_RUSER;
	assign Inputs_iRight[3][43] = iRight3_R_RLAST;
	assign Inputs_iRight[3][42:41] = iRight3_R_RRESP;
	assign Inputs_iRight[3][40:33] = iRight3_R_RDATA3;
	assign Inputs_iRight[3][32:25] = iRight3_R_RDATA2;
	assign Inputs_iRight[3][24:17] = iRight3_R_RDATA1;
	assign Inputs_iRight[3][16:9] = iRight3_R_RDATA0;
	assign Inputs_iRight[3][8:1] = iRight3_R_RID;
	assign Inputs_iRight[3][0] = iRight3_AR_ARREADY;
	assign Inputs_iRightAddr = iRightAddr;
	assign Inputs_iRightAddrValid = iRightAddrValid;
	assign oLeft0_B_BREADY = mOutLeftData[0][221];
	assign oLeft0_W_WVALID = mOutLeftData[0][220];
	assign oLeft0_W_WUSER = mOutLeftData[0][219:212];
	assign oLeft0_W_WLAST = mOutLeftData[0][211];
	assign oLeft0_W_WSTRB = mOutLeftData[0][210:207];
	assign oLeft0_W_WDATA3 = mOutLeftData[0][206:199];
	assign oLeft0_W_WDATA2 = mOutLeftData[0][198:191];
	assign oLeft0_W_WDATA1 = mOutLeftData[0][190:183];
	assign oLeft0_W_WDATA0 = mOutLeftData[0][182:175];
	assign oLeft0_W_WID = mOutLeftData[0][174:167];
	assign oLeft0_AW_AWVALID = mOutLeftData[0][166];
	assign oLeft0_AW_AWUSER = mOutLeftData[0][165:158];
	assign oLeft0_AW_AWREGION = mOutLeftData[0][157:150];
	assign oLeft0_AW_AWQOS = mOutLeftData[0][149:146];
	assign oLeft0_AW_AWPROT = mOutLeftData[0][145:143];
	assign oLeft0_AW_AWCACHE = mOutLeftData[0][142:139];
	assign oLeft0_AW_AWLOCK = mOutLeftData[0][138:137];
	assign oLeft0_AW_AWBURST = mOutLeftData[0][136:135];
	assign oLeft0_AW_AWSIZE = mOutLeftData[0][134:132];
	assign oLeft0_AW_AWLEN = mOutLeftData[0][131:124];
	assign oLeft0_AW_AWADDR = mOutLeftData[0][123:92];
	assign oLeft0_AW_AWID = mOutLeftData[0][91:84];
	assign oLeft0_R_RREADY = mOutLeftData[0][83];
	assign oLeft0_AR_ARVALID = mOutLeftData[0][82];
	assign oLeft0_AR_ARUSER = mOutLeftData[0][81:74];
	assign oLeft0_AR_ARREGION = mOutLeftData[0][73:66];
	assign oLeft0_AR_ARQOS = mOutLeftData[0][65:62];
	assign oLeft0_AR_ARPROT = mOutLeftData[0][61:59];
	assign oLeft0_AR_ARCACHE = mOutLeftData[0][58:55];
	assign oLeft0_AR_ARLOCK = mOutLeftData[0][54:53];
	assign oLeft0_AR_ARBURST = mOutLeftData[0][52:51];
	assign oLeft0_AR_ARSIZE = mOutLeftData[0][50:48];
	assign oLeft0_AR_ARLEN = mOutLeftData[0][47:40];
	assign oLeft0_AR_ARADDR = mOutLeftData[0][39:8];
	assign oLeft0_AR_ARID = mOutLeftData[0][7:0];
	assign oLeft1_B_BREADY = mOutLeftData[1][221];
	assign oLeft1_W_WVALID = mOutLeftData[1][220];
	assign oLeft1_W_WUSER = mOutLeftData[1][219:212];
	assign oLeft1_W_WLAST = mOutLeftData[1][211];
	assign oLeft1_W_WSTRB = mOutLeftData[1][210:207];
	assign oLeft1_W_WDATA3 = mOutLeftData[1][206:199];
	assign oLeft1_W_WDATA2 = mOutLeftData[1][198:191];
	assign oLeft1_W_WDATA1 = mOutLeftData[1][190:183];
	assign oLeft1_W_WDATA0 = mOutLeftData[1][182:175];
	assign oLeft1_W_WID = mOutLeftData[1][174:167];
	assign oLeft1_AW_AWVALID = mOutLeftData[1][166];
	assign oLeft1_AW_AWUSER = mOutLeftData[1][165:158];
	assign oLeft1_AW_AWREGION = mOutLeftData[1][157:150];
	assign oLeft1_AW_AWQOS = mOutLeftData[1][149:146];
	assign oLeft1_AW_AWPROT = mOutLeftData[1][145:143];
	assign oLeft1_AW_AWCACHE = mOutLeftData[1][142:139];
	assign oLeft1_AW_AWLOCK = mOutLeftData[1][138:137];
	assign oLeft1_AW_AWBURST = mOutLeftData[1][136:135];
	assign oLeft1_AW_AWSIZE = mOutLeftData[1][134:132];
	assign oLeft1_AW_AWLEN = mOutLeftData[1][131:124];
	assign oLeft1_AW_AWADDR = mOutLeftData[1][123:92];
	assign oLeft1_AW_AWID = mOutLeftData[1][91:84];
	assign oLeft1_R_RREADY = mOutLeftData[1][83];
	assign oLeft1_AR_ARVALID = mOutLeftData[1][82];
	assign oLeft1_AR_ARUSER = mOutLeftData[1][81:74];
	assign oLeft1_AR_ARREGION = mOutLeftData[1][73:66];
	assign oLeft1_AR_ARQOS = mOutLeftData[1][65:62];
	assign oLeft1_AR_ARPROT = mOutLeftData[1][61:59];
	assign oLeft1_AR_ARCACHE = mOutLeftData[1][58:55];
	assign oLeft1_AR_ARLOCK = mOutLeftData[1][54:53];
	assign oLeft1_AR_ARBURST = mOutLeftData[1][52:51];
	assign oLeft1_AR_ARSIZE = mOutLeftData[1][50:48];
	assign oLeft1_AR_ARLEN = mOutLeftData[1][47:40];
	assign oLeft1_AR_ARADDR = mOutLeftData[1][39:8];
	assign oLeft1_AR_ARID = mOutLeftData[1][7:0];
	assign oLeft2_B_BREADY = mOutLeftData[2][221];
	assign oLeft2_W_WVALID = mOutLeftData[2][220];
	assign oLeft2_W_WUSER = mOutLeftData[2][219:212];
	assign oLeft2_W_WLAST = mOutLeftData[2][211];
	assign oLeft2_W_WSTRB = mOutLeftData[2][210:207];
	assign oLeft2_W_WDATA3 = mOutLeftData[2][206:199];
	assign oLeft2_W_WDATA2 = mOutLeftData[2][198:191];
	assign oLeft2_W_WDATA1 = mOutLeftData[2][190:183];
	assign oLeft2_W_WDATA0 = mOutLeftData[2][182:175];
	assign oLeft2_W_WID = mOutLeftData[2][174:167];
	assign oLeft2_AW_AWVALID = mOutLeftData[2][166];
	assign oLeft2_AW_AWUSER = mOutLeftData[2][165:158];
	assign oLeft2_AW_AWREGION = mOutLeftData[2][157:150];
	assign oLeft2_AW_AWQOS = mOutLeftData[2][149:146];
	assign oLeft2_AW_AWPROT = mOutLeftData[2][145:143];
	assign oLeft2_AW_AWCACHE = mOutLeftData[2][142:139];
	assign oLeft2_AW_AWLOCK = mOutLeftData[2][138:137];
	assign oLeft2_AW_AWBURST = mOutLeftData[2][136:135];
	assign oLeft2_AW_AWSIZE = mOutLeftData[2][134:132];
	assign oLeft2_AW_AWLEN = mOutLeftData[2][131:124];
	assign oLeft2_AW_AWADDR = mOutLeftData[2][123:92];
	assign oLeft2_AW_AWID = mOutLeftData[2][91:84];
	assign oLeft2_R_RREADY = mOutLeftData[2][83];
	assign oLeft2_AR_ARVALID = mOutLeftData[2][82];
	assign oLeft2_AR_ARUSER = mOutLeftData[2][81:74];
	assign oLeft2_AR_ARREGION = mOutLeftData[2][73:66];
	assign oLeft2_AR_ARQOS = mOutLeftData[2][65:62];
	assign oLeft2_AR_ARPROT = mOutLeftData[2][61:59];
	assign oLeft2_AR_ARCACHE = mOutLeftData[2][58:55];
	assign oLeft2_AR_ARLOCK = mOutLeftData[2][54:53];
	assign oLeft2_AR_ARBURST = mOutLeftData[2][52:51];
	assign oLeft2_AR_ARSIZE = mOutLeftData[2][50:48];
	assign oLeft2_AR_ARLEN = mOutLeftData[2][47:40];
	assign oLeft2_AR_ARADDR = mOutLeftData[2][39:8];
	assign oLeft2_AR_ARID = mOutLeftData[2][7:0];
	assign oLeft3_B_BREADY = mOutLeftData[3][221];
	assign oLeft3_W_WVALID = mOutLeftData[3][220];
	assign oLeft3_W_WUSER = mOutLeftData[3][219:212];
	assign oLeft3_W_WLAST = mOutLeftData[3][211];
	assign oLeft3_W_WSTRB = mOutLeftData[3][210:207];
	assign oLeft3_W_WDATA3 = mOutLeftData[3][206:199];
	assign oLeft3_W_WDATA2 = mOutLeftData[3][198:191];
	assign oLeft3_W_WDATA1 = mOutLeftData[3][190:183];
	assign oLeft3_W_WDATA0 = mOutLeftData[3][182:175];
	assign oLeft3_W_WID = mOutLeftData[3][174:167];
	assign oLeft3_AW_AWVALID = mOutLeftData[3][166];
	assign oLeft3_AW_AWUSER = mOutLeftData[3][165:158];
	assign oLeft3_AW_AWREGION = mOutLeftData[3][157:150];
	assign oLeft3_AW_AWQOS = mOutLeftData[3][149:146];
	assign oLeft3_AW_AWPROT = mOutLeftData[3][145:143];
	assign oLeft3_AW_AWCACHE = mOutLeftData[3][142:139];
	assign oLeft3_AW_AWLOCK = mOutLeftData[3][138:137];
	assign oLeft3_AW_AWBURST = mOutLeftData[3][136:135];
	assign oLeft3_AW_AWSIZE = mOutLeftData[3][134:132];
	assign oLeft3_AW_AWLEN = mOutLeftData[3][131:124];
	assign oLeft3_AW_AWADDR = mOutLeftData[3][123:92];
	assign oLeft3_AW_AWID = mOutLeftData[3][91:84];
	assign oLeft3_R_RREADY = mOutLeftData[3][83];
	assign oLeft3_AR_ARVALID = mOutLeftData[3][82];
	assign oLeft3_AR_ARUSER = mOutLeftData[3][81:74];
	assign oLeft3_AR_ARREGION = mOutLeftData[3][73:66];
	assign oLeft3_AR_ARQOS = mOutLeftData[3][65:62];
	assign oLeft3_AR_ARPROT = mOutLeftData[3][61:59];
	assign oLeft3_AR_ARCACHE = mOutLeftData[3][58:55];
	assign oLeft3_AR_ARLOCK = mOutLeftData[3][54:53];
	assign oLeft3_AR_ARBURST = mOutLeftData[3][52:51];
	assign oLeft3_AR_ARSIZE = mOutLeftData[3][50:48];
	assign oLeft3_AR_ARLEN = mOutLeftData[3][47:40];
	assign oLeft3_AR_ARADDR = mOutLeftData[3][39:8];
	assign oLeft3_AR_ARID = mOutLeftData[3][7:0];
	assign oMuxLeftData_AR_ARID = mMuxLeftData_AR_ARID;
	assign oMuxLeftData_AR_ARADDR = mMuxLeftData_AR_ARADDR;
	assign oMuxLeftData_AR_ARLEN = mMuxLeftData_AR_ARLEN;
	assign oMuxLeftData_AR_ARSIZE = mMuxLeftData_AR_ARSIZE;
	assign oMuxLeftData_AR_ARBURST = mMuxLeftData_AR_ARBURST;
	assign oMuxLeftData_AR_ARLOCK = mMuxLeftData_AR_ARLOCK;
	assign oMuxLeftData_AR_ARCACHE = mMuxLeftData_AR_ARCACHE;
	assign oMuxLeftData_AR_ARPROT = mMuxLeftData_AR_ARPROT;
	assign oMuxLeftData_AR_ARQOS = mMuxLeftData_AR_ARQOS;
	assign oMuxLeftData_AR_ARREGION = mMuxLeftData_AR_ARREGION;
	assign oMuxLeftData_AR_ARUSER = mMuxLeftData_AR_ARUSER;
	assign oMuxLeftData_AR_ARVALID = mMuxLeftData_AR_ARVALID;
	assign oMuxLeftData_R_RREADY = mMuxLeftData_R_RREADY;
	assign oMuxLeftData_AW_AWID = mMuxLeftData_AW_AWID;
	assign oMuxLeftData_AW_AWADDR = mMuxLeftData_AW_AWADDR;
	assign oMuxLeftData_AW_AWLEN = mMuxLeftData_AW_AWLEN;
	assign oMuxLeftData_AW_AWSIZE = mMuxLeftData_AW_AWSIZE;
	assign oMuxLeftData_AW_AWBURST = mMuxLeftData_AW_AWBURST;
	assign oMuxLeftData_AW_AWLOCK = mMuxLeftData_AW_AWLOCK;
	assign oMuxLeftData_AW_AWCACHE = mMuxLeftData_AW_AWCACHE;
	assign oMuxLeftData_AW_AWPROT = mMuxLeftData_AW_AWPROT;
	assign oMuxLeftData_AW_AWQOS = mMuxLeftData_AW_AWQOS;
	assign oMuxLeftData_AW_AWREGION = mMuxLeftData_AW_AWREGION;
	assign oMuxLeftData_AW_AWUSER = mMuxLeftData_AW_AWUSER;
	assign oMuxLeftData_AW_AWVALID = mMuxLeftData_AW_AWVALID;
	assign oMuxLeftData_W_WID = mMuxLeftData_W_WID;
	assign oMuxLeftData_W_WDATA0 = mMuxLeftData_W_WDATA[0];
	assign oMuxLeftData_W_WDATA1 = mMuxLeftData_W_WDATA[1];
	assign oMuxLeftData_W_WDATA2 = mMuxLeftData_W_WDATA[2];
	assign oMuxLeftData_W_WDATA3 = mMuxLeftData_W_WDATA[3];
	assign oMuxLeftData_W_WSTRB = mMuxLeftData_W_WSTRB;
	assign oMuxLeftData_W_WLAST = mMuxLeftData_W_WLAST;
	assign oMuxLeftData_W_WUSER = mMuxLeftData_W_WUSER;
	assign oMuxLeftData_W_WVALID = mMuxLeftData_W_WVALID;
	assign oMuxLeftData_B_BREADY = mMuxLeftData_B_BREADY;
	assign oMuxRightData_AR_ARREADY = mMuxRightData_AR_ARREADY;
	assign oMuxRightData_R_RID = mMuxRightData_R_RID;
	assign oMuxRightData_R_RDATA0 = mMuxRightData_R_RDATA[0];
	assign oMuxRightData_R_RDATA1 = mMuxRightData_R_RDATA[1];
	assign oMuxRightData_R_RDATA2 = mMuxRightData_R_RDATA[2];
	assign oMuxRightData_R_RDATA3 = mMuxRightData_R_RDATA[3];
	assign oMuxRightData_R_RRESP = mMuxRightData_R_RRESP;
	assign oMuxRightData_R_RLAST = mMuxRightData_R_RLAST;
	assign oMuxRightData_R_RUSER = mMuxRightData_R_RUSER;
	assign oMuxRightData_R_RVALID = mMuxRightData_R_RVALID;
	assign oMuxRightData_AW_AWREADY = mMuxRightData_AW_AWREADY;
	assign oMuxRightData_B_BID = mMuxRightData_B_BID;
	assign oMuxRightData_B_BRESP = mMuxRightData_B_BRESP;
	assign oMuxRightData_B_BUSER = mMuxRightData_B_BUSER;
	assign oMuxRightData_B_BVALID = mMuxRightData_B_BVALID;
	assign oMuxRightData_W_WREADY = mMuxRightData_W_WREADY;
	assign oRight0_W_WREADY = mOutRightData[0][73];
	assign oRight0_B_BVALID = mOutRightData[0][72];
	assign oRight0_B_BUSER = mOutRightData[0][71:64];
	assign oRight0_B_BRESP = mOutRightData[0][63:62];
	assign oRight0_B_BID = mOutRightData[0][61:54];
	assign oRight0_AW_AWREADY = mOutRightData[0][53];
	assign oRight0_R_RVALID = mOutRightData[0][52];
	assign oRight0_R_RUSER = mOutRightData[0][51:44];
	assign oRight0_R_RLAST = mOutRightData[0][43];
	assign oRight0_R_RRESP = mOutRightData[0][42:41];
	assign oRight0_R_RDATA3 = mOutRightData[0][40:33];
	assign oRight0_R_RDATA2 = mOutRightData[0][32:25];
	assign oRight0_R_RDATA1 = mOutRightData[0][24:17];
	assign oRight0_R_RDATA0 = mOutRightData[0][16:9];
	assign oRight0_R_RID = mOutRightData[0][8:1];
	assign oRight0_AR_ARREADY = mOutRightData[0][0];
	assign oRight1_W_WREADY = mOutRightData[1][73];
	assign oRight1_B_BVALID = mOutRightData[1][72];
	assign oRight1_B_BUSER = mOutRightData[1][71:64];
	assign oRight1_B_BRESP = mOutRightData[1][63:62];
	assign oRight1_B_BID = mOutRightData[1][61:54];
	assign oRight1_AW_AWREADY = mOutRightData[1][53];
	assign oRight1_R_RVALID = mOutRightData[1][52];
	assign oRight1_R_RUSER = mOutRightData[1][51:44];
	assign oRight1_R_RLAST = mOutRightData[1][43];
	assign oRight1_R_RRESP = mOutRightData[1][42:41];
	assign oRight1_R_RDATA3 = mOutRightData[1][40:33];
	assign oRight1_R_RDATA2 = mOutRightData[1][32:25];
	assign oRight1_R_RDATA1 = mOutRightData[1][24:17];
	assign oRight1_R_RDATA0 = mOutRightData[1][16:9];
	assign oRight1_R_RID = mOutRightData[1][8:1];
	assign oRight1_AR_ARREADY = mOutRightData[1][0];
	assign oRight2_W_WREADY = mOutRightData[2][73];
	assign oRight2_B_BVALID = mOutRightData[2][72];
	assign oRight2_B_BUSER = mOutRightData[2][71:64];
	assign oRight2_B_BRESP = mOutRightData[2][63:62];
	assign oRight2_B_BID = mOutRightData[2][61:54];
	assign oRight2_AW_AWREADY = mOutRightData[2][53];
	assign oRight2_R_RVALID = mOutRightData[2][52];
	assign oRight2_R_RUSER = mOutRightData[2][51:44];
	assign oRight2_R_RLAST = mOutRightData[2][43];
	assign oRight2_R_RRESP = mOutRightData[2][42:41];
	assign oRight2_R_RDATA3 = mOutRightData[2][40:33];
	assign oRight2_R_RDATA2 = mOutRightData[2][32:25];
	assign oRight2_R_RDATA1 = mOutRightData[2][24:17];
	assign oRight2_R_RDATA0 = mOutRightData[2][16:9];
	assign oRight2_R_RID = mOutRightData[2][8:1];
	assign oRight2_AR_ARREADY = mOutRightData[2][0];
	assign oRight3_W_WREADY = mOutRightData[3][73];
	assign oRight3_B_BVALID = mOutRightData[3][72];
	assign oRight3_B_BUSER = mOutRightData[3][71:64];
	assign oRight3_B_BRESP = mOutRightData[3][63:62];
	assign oRight3_B_BID = mOutRightData[3][61:54];
	assign oRight3_AW_AWREADY = mOutRightData[3][53];
	assign oRight3_R_RVALID = mOutRightData[3][52];
	assign oRight3_R_RUSER = mOutRightData[3][51:44];
	assign oRight3_R_RLAST = mOutRightData[3][43];
	assign oRight3_R_RRESP = mOutRightData[3][42:41];
	assign oRight3_R_RDATA3 = mOutRightData[3][40:33];
	assign oRight3_R_RDATA2 = mOutRightData[3][32:25];
	assign oRight3_R_RDATA1 = mOutRightData[3][24:17];
	assign oRight3_R_RDATA0 = mOutRightData[3][16:9];
	assign oRight3_R_RID = mOutRightData[3][8:1];
	assign oRight3_AR_ARREADY = mOutRightData[3][0];
	assign oRight4_W_WREADY = mOutRightData[4][73];
	assign oRight4_B_BVALID = mOutRightData[4][72];
	assign oRight4_B_BUSER = mOutRightData[4][71:64];
	assign oRight4_B_BRESP = mOutRightData[4][63:62];
	assign oRight4_B_BID = mOutRightData[4][61:54];
	assign oRight4_AW_AWREADY = mOutRightData[4][53];
	assign oRight4_R_RVALID = mOutRightData[4][52];
	assign oRight4_R_RUSER = mOutRightData[4][51:44];
	assign oRight4_R_RLAST = mOutRightData[4][43];
	assign oRight4_R_RRESP = mOutRightData[4][42:41];
	assign oRight4_R_RDATA3 = mOutRightData[4][40:33];
	assign oRight4_R_RDATA2 = mOutRightData[4][32:25];
	assign oRight4_R_RDATA1 = mOutRightData[4][24:17];
	assign oRight4_R_RDATA0 = mOutRightData[4][16:9];
	assign oRight4_R_RID = mOutRightData[4][8:1];
	assign oRight4_AR_ARREADY = mOutRightData[4][0];
	assign oRight5_W_WREADY = mOutRightData[5][73];
	assign oRight5_B_BVALID = mOutRightData[5][72];
	assign oRight5_B_BUSER = mOutRightData[5][71:64];
	assign oRight5_B_BRESP = mOutRightData[5][63:62];
	assign oRight5_B_BID = mOutRightData[5][61:54];
	assign oRight5_AW_AWREADY = mOutRightData[5][53];
	assign oRight5_R_RVALID = mOutRightData[5][52];
	assign oRight5_R_RUSER = mOutRightData[5][51:44];
	assign oRight5_R_RLAST = mOutRightData[5][43];
	assign oRight5_R_RRESP = mOutRightData[5][42:41];
	assign oRight5_R_RDATA3 = mOutRightData[5][40:33];
	assign oRight5_R_RDATA2 = mOutRightData[5][32:25];
	assign oRight5_R_RDATA1 = mOutRightData[5][24:17];
	assign oRight5_R_RDATA0 = mOutRightData[5][16:9];
	assign oRight5_R_RID = mOutRightData[5][8:1];
	assign oRight5_AR_ARREADY = mOutRightData[5][0];
	assign oRight6_W_WREADY = mOutRightData[6][73];
	assign oRight6_B_BVALID = mOutRightData[6][72];
	assign oRight6_B_BUSER = mOutRightData[6][71:64];
	assign oRight6_B_BRESP = mOutRightData[6][63:62];
	assign oRight6_B_BID = mOutRightData[6][61:54];
	assign oRight6_AW_AWREADY = mOutRightData[6][53];
	assign oRight6_R_RVALID = mOutRightData[6][52];
	assign oRight6_R_RUSER = mOutRightData[6][51:44];
	assign oRight6_R_RLAST = mOutRightData[6][43];
	assign oRight6_R_RRESP = mOutRightData[6][42:41];
	assign oRight6_R_RDATA3 = mOutRightData[6][40:33];
	assign oRight6_R_RDATA2 = mOutRightData[6][32:25];
	assign oRight6_R_RDATA1 = mOutRightData[6][24:17];
	assign oRight6_R_RDATA0 = mOutRightData[6][16:9];
	assign oRight6_R_RID = mOutRightData[6][8:1];
	assign oRight6_AR_ARREADY = mOutRightData[6][0];
	assign oRight7_W_WREADY = mOutRightData[7][73];
	assign oRight7_B_BVALID = mOutRightData[7][72];
	assign oRight7_B_BUSER = mOutRightData[7][71:64];
	assign oRight7_B_BRESP = mOutRightData[7][63:62];
	assign oRight7_B_BID = mOutRightData[7][61:54];
	assign oRight7_AW_AWREADY = mOutRightData[7][53];
	assign oRight7_R_RVALID = mOutRightData[7][52];
	assign oRight7_R_RUSER = mOutRightData[7][51:44];
	assign oRight7_R_RLAST = mOutRightData[7][43];
	assign oRight7_R_RRESP = mOutRightData[7][42:41];
	assign oRight7_R_RDATA3 = mOutRightData[7][40:33];
	assign oRight7_R_RDATA2 = mOutRightData[7][32:25];
	assign oRight7_R_RDATA1 = mOutRightData[7][24:17];
	assign oRight7_R_RDATA0 = mOutRightData[7][16:9];
	assign oRight7_R_RID = mOutRightData[7][8:1];
	assign oRight7_AR_ARREADY = mOutRightData[7][0];
	// [BEGIN USER ARCHITECTURE]
	// [END USER ARCHITECTURE]
endmodule
