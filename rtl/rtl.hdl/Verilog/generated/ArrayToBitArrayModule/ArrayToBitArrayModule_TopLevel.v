`timescale 1ns/1ps
`default_nettype none
// PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
// * This file was generated by Quokka FPGA Toolkit.
// * Generated code is your property, do whatever you want with it
// * Place custom code between [BEGIN USER ***] and [END USER ***].
// * CAUTION: All code outside of [USER] scope is subject to regeneration.
// * Bad things happen sometimes in developer's life,
//   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
// * Internal structure of code is subject to change.
//   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
// * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
// * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
//
// DISCLAIMER:
//   Code comes AS-IS, it is your responsibility to make sure it is working as expected
//   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
//
// System configuration name is ArrayToBitArrayModule_TopLevel, clock frequency is 1Hz, Top-level
// FSM summary
// -- Packages
module ArrayToBitArrayModule_TopLevel
(
	// [BEGIN USER PORTS]
	// [END USER PORTS]
	input wire Clock,
	input wire Reset,
	input wire [7:0] InArray0,
	input wire [7:0] InArray1,
	input wire [7:0] InArray2,
	input wire [7:0] InArray3,
	output wire [7:0] OutInputsArray0,
	output wire [7:0] OutInputsArray1,
	output wire [7:0] OutInputsArray2,
	output wire [7:0] OutInputsArray3,
	output wire [7:0] OutDataArray0,
	output wire [7:0] OutDataArray1,
	output wire [7:0] OutDataArray2,
	output wire [7:0] OutDataArray3,
	output wire [31:0] OutInputsBitArray,
	output wire [31:0] OutDataBitArray
);
	// [BEGIN USER SIGNALS]
	// [END USER SIGNALS]
	localparam HiSignal = 1'b1;
	localparam LoSignal = 1'b0;
	wire Zero = 1'b0;
	wire One = 1'b1;
	wire true = 1'b1;
	wire false = 1'b0;
	reg [7: 0] State_ReadDataDefault = 8'b00000000;
	wire [31: 0] ArrayToBitArrayModule_L20F49T80_Source;
	wire [31: 0] ArrayToBitArrayModule_L21F47T78_Source;
	wire [7 : 0] Inputs_InArray [0 : 3];
	integer State_ReadData_Iterator;
	reg [7 : 0] State_ReadData [0 : 3];
	initial
	begin : Init_State_ReadData
		for (State_ReadData_Iterator = 0; State_ReadData_Iterator < 4; State_ReadData_Iterator = State_ReadData_Iterator + 1)
			State_ReadData[State_ReadData_Iterator] = 0;
	end
	integer NextState_ReadData_Iterator;
	reg [7 : 0] NextState_ReadData [0 : 3];
	initial
	begin : Init_NextState_ReadData
		for (NextState_ReadData_Iterator = 0; NextState_ReadData_Iterator < 4; NextState_ReadData_Iterator = NextState_ReadData_Iterator + 1)
			NextState_ReadData[NextState_ReadData_Iterator] = 0;
	end
	always @ (posedge Clock)
	begin
		if ((Reset == 1))
		begin
			for (State_ReadData_Iterator = 0; (State_ReadData_Iterator < 4); State_ReadData_Iterator = (State_ReadData_Iterator + 1))
			begin
				State_ReadData[State_ReadData_Iterator] <= State_ReadDataDefault;
			end
		end
		else
		begin
			for (State_ReadData_Iterator = 0; (State_ReadData_Iterator < 4); State_ReadData_Iterator = (State_ReadData_Iterator + 1))
			begin
				State_ReadData[State_ReadData_Iterator] <= NextState_ReadData[State_ReadData_Iterator];
			end
		end
	end
	always @ (*)
	begin
		for (NextState_ReadData_Iterator = 0; (NextState_ReadData_Iterator < 4); NextState_ReadData_Iterator = (NextState_ReadData_Iterator + 1))
		begin
			NextState_ReadData[NextState_ReadData_Iterator] = State_ReadData[NextState_ReadData_Iterator];
		end
		NextState_ReadData[0] = Inputs_InArray[0];
		NextState_ReadData[1] = Inputs_InArray[1];
		NextState_ReadData[2] = Inputs_InArray[2];
		NextState_ReadData[3] = Inputs_InArray[3];
	end
	assign Inputs_InArray[0] = InArray0;
	assign Inputs_InArray[1] = InArray1;
	assign Inputs_InArray[2] = InArray2;
	assign Inputs_InArray[3] = InArray3;
	assign OutInputsArray0 = Inputs_InArray[0];
	assign OutInputsArray1 = Inputs_InArray[1];
	assign OutInputsArray2 = Inputs_InArray[2];
	assign OutInputsArray3 = Inputs_InArray[3];
	assign OutDataArray0 = State_ReadData[0];
	assign OutDataArray1 = State_ReadData[1];
	assign OutDataArray2 = State_ReadData[2];
	assign OutDataArray3 = State_ReadData[3];
	assign ArrayToBitArrayModule_L20F49T80_Source = { Inputs_InArray[3], Inputs_InArray[2], Inputs_InArray[1], Inputs_InArray[0] };
	assign OutInputsBitArray = ArrayToBitArrayModule_L20F49T80_Source;
	assign ArrayToBitArrayModule_L21F47T78_Source = { State_ReadData[3], State_ReadData[2], State_ReadData[1], State_ReadData[0] };
	assign OutDataBitArray = ArrayToBitArrayModule_L21F47T78_Source;
	// [BEGIN USER ARCHITECTURE]
	// [END USER ARCHITECTURE]
endmodule
