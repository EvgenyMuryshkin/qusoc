-- PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
-- * This file was generated by Quokka FPGA Toolkit.
-- * Generated code is your property, do whatever you want with it
-- * Place custom code between [BEGIN USER ***] and [END USER ***].
-- * CAUTION: All code outside of [USER] scope is subject to regeneration.
-- * Bad things happen sometimes in developer's life,
--   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
-- * Internal structure of code is subject to change.
--   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
-- * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
-- * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
--
-- DISCLAIMER:
--   Code comes AS-IS, it is your responsibility to make sure it is working as expected
--   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
--
-- System configuration name is AXI4MasterSlaveTestModule_TopLevel_reg, clock frequency is 1Hz, Embedded
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.Quokka.all;
entity AXI4MasterSlaveTestModule_TopLevel_reg is
	port
	(
		-- [BEGIN USER PORTS]
		-- [END USER PORTS]
		BoardSignals : in BoardSignalsType;
		M2S_AR_ARID : in unsigned (7 downto 0);
		M2S_AR_ARADDR : in unsigned (31 downto 0);
		M2S_AR_ARLEN : in unsigned (7 downto 0);
		M2S_AR_ARSIZE : in unsigned (2 downto 0);
		M2S_AR_ARBURST : in unsigned (1 downto 0);
		M2S_AR_ARLOCK : in unsigned (1 downto 0);
		M2S_AR_ARCACHE : in unsigned (3 downto 0);
		M2S_AR_ARPROT : in unsigned (2 downto 0);
		M2S_AR_ARQOS : in unsigned (3 downto 0);
		M2S_AR_ARREGION : in unsigned (7 downto 0);
		M2S_AR_ARUSER : in unsigned (7 downto 0);
		M2S_AR_ARVALID : in std_logic;
		M2S_R_RREADY : in std_logic;
		M2S_AW_AWID : in unsigned (7 downto 0);
		M2S_AW_AWADDR : in unsigned (31 downto 0);
		M2S_AW_AWLEN : in unsigned (7 downto 0);
		M2S_AW_AWSIZE : in unsigned (2 downto 0);
		M2S_AW_AWBURST : in unsigned (1 downto 0);
		M2S_AW_AWLOCK : in unsigned (1 downto 0);
		M2S_AW_AWCACHE : in unsigned (3 downto 0);
		M2S_AW_AWPROT : in unsigned (2 downto 0);
		M2S_AW_AWQOS : in unsigned (3 downto 0);
		M2S_AW_AWREGION : in unsigned (7 downto 0);
		M2S_AW_AWUSER : in unsigned (7 downto 0);
		M2S_AW_AWVALID : in std_logic;
		M2S_W_WID : in unsigned (7 downto 0);
		M2S_W_WDATA0 : in unsigned (7 downto 0);
		M2S_W_WDATA1 : in unsigned (7 downto 0);
		M2S_W_WDATA2 : in unsigned (7 downto 0);
		M2S_W_WDATA3 : in unsigned (7 downto 0);
		M2S_W_WSTRB : in unsigned (3 downto 0);
		M2S_W_WLAST : in std_logic;
		M2S_W_WUSER : in unsigned (7 downto 0);
		M2S_W_WVALID : in std_logic;
		M2S_B_BREADY : in std_logic;
		inWE : in std_logic;
		inWDATA0 : in unsigned (7 downto 0);
		inWDATA1 : in unsigned (7 downto 0);
		inWDATA2 : in unsigned (7 downto 0);
		inWDATA3 : in unsigned (7 downto 0);
		outData0 : out unsigned (7 downto 0);
		outData1 : out unsigned (7 downto 0);
		outData2 : out unsigned (7 downto 0);
		outData3 : out unsigned (7 downto 0);
		outACK : out std_logic;
		S2M_AR_ARREADY : out std_logic;
		S2M_AW_AWREADY : out std_logic;
		S2M_B_BID : out unsigned (7 downto 0);
		S2M_B_BRESP : out unsigned (1 downto 0);
		S2M_B_BUSER : out unsigned (7 downto 0);
		S2M_B_BVALID : out std_logic;
		S2M_R_RID : out unsigned (7 downto 0);
		S2M_R_RDATA0 : out unsigned (7 downto 0);
		S2M_R_RDATA1 : out unsigned (7 downto 0);
		S2M_R_RDATA2 : out unsigned (7 downto 0);
		S2M_R_RDATA3 : out unsigned (7 downto 0);
		S2M_R_RRESP : out unsigned (1 downto 0);
		S2M_R_RLAST : out std_logic;
		S2M_R_RUSER : out unsigned (7 downto 0);
		S2M_R_RVALID : out std_logic;
		S2M_W_WREADY : out std_logic;
		outWritten : out std_logic
	);
end entity;
-- FSM summary
-- Packages
architecture rtl of AXI4MasterSlaveTestModule_TopLevel_reg is
	-- [BEGIN USER SIGNALS]
	-- [END USER SIGNALS]
	constant HiSignal : std_logic := '1';
	constant LoSignal : std_logic := '0';
	constant Zero : std_logic := '0';
	constant One : std_logic := '1';
	-- true is a reserved name, declaration skipped
	-- false is a reserved name, declaration skipped
	constant size : unsigned(1 downto 0) := "10";
	constant AXI4RegisterModule_L58F29T33_Expr : std_logic := '1';
	constant AXI4RegisterModule_L59F28T32_Expr : std_logic := '1';
	constant AXI4RegisterModule_L60F29T33_Expr : std_logic := '1';
	constant AXI4RegisterModule_L62F28T32_Expr : std_logic := '1';
	constant State_bytesDefault : unsigned(7 downto 0) := "00000000";
	signal Inputs_M2S_AR_ARID : unsigned(7 downto 0) := (others => '0');
	signal Inputs_M2S_AR_ARADDR : unsigned(31 downto 0) := (others => '0');
	signal Inputs_M2S_AR_ARLEN : unsigned(7 downto 0) := (others => '0');
	signal Inputs_M2S_AR_ARSIZE : unsigned(2 downto 0) := (others => '0');
	signal Inputs_M2S_AR_ARBURST : unsigned(1 downto 0) := (others => '0');
	signal Inputs_M2S_AR_ARLOCK : unsigned(1 downto 0) := (others => '0');
	signal Inputs_M2S_AR_ARCACHE : unsigned(3 downto 0) := (others => '0');
	signal Inputs_M2S_AR_ARPROT : unsigned(2 downto 0) := (others => '0');
	signal Inputs_M2S_AR_ARQOS : unsigned(3 downto 0) := (others => '0');
	signal Inputs_M2S_AR_ARREGION : unsigned(7 downto 0) := (others => '0');
	signal Inputs_M2S_AR_ARUSER : unsigned(7 downto 0) := (others => '0');
	signal Inputs_M2S_AR_ARVALID : std_logic := '0';
	signal Inputs_M2S_R_RREADY : std_logic := '0';
	signal Inputs_M2S_AW_AWID : unsigned(7 downto 0) := (others => '0');
	signal Inputs_M2S_AW_AWADDR : unsigned(31 downto 0) := (others => '0');
	signal Inputs_M2S_AW_AWLEN : unsigned(7 downto 0) := (others => '0');
	signal Inputs_M2S_AW_AWSIZE : unsigned(2 downto 0) := (others => '0');
	signal Inputs_M2S_AW_AWBURST : unsigned(1 downto 0) := (others => '0');
	signal Inputs_M2S_AW_AWLOCK : unsigned(1 downto 0) := (others => '0');
	signal Inputs_M2S_AW_AWCACHE : unsigned(3 downto 0) := (others => '0');
	signal Inputs_M2S_AW_AWPROT : unsigned(2 downto 0) := (others => '0');
	signal Inputs_M2S_AW_AWQOS : unsigned(3 downto 0) := (others => '0');
	signal Inputs_M2S_AW_AWREGION : unsigned(7 downto 0) := (others => '0');
	signal Inputs_M2S_AW_AWUSER : unsigned(7 downto 0) := (others => '0');
	signal Inputs_M2S_AW_AWVALID : std_logic := '0';
	signal Inputs_M2S_W_WID : unsigned(7 downto 0) := (others => '0');
	signal Inputs_M2S_W_WSTRB : unsigned(3 downto 0) := (others => '0');
	signal Inputs_M2S_W_WLAST : std_logic := '0';
	signal Inputs_M2S_W_WUSER : unsigned(7 downto 0) := (others => '0');
	signal Inputs_M2S_W_WVALID : std_logic := '0';
	signal Inputs_M2S_B_BREADY : std_logic := '0';
	signal Inputs_inWE : std_logic := '0';
	signal NextState_Written : std_logic := '0';
	signal axiSlave_M2S_AR_ARID : unsigned(7 downto 0) := (others => '0');
	signal axiSlave_M2S_AR_ARADDR : unsigned(31 downto 0) := (others => '0');
	signal axiSlave_M2S_AR_ARLEN : unsigned(7 downto 0) := (others => '0');
	signal axiSlave_M2S_AR_ARSIZE : unsigned(2 downto 0) := (others => '0');
	signal axiSlave_M2S_AR_ARBURST : unsigned(1 downto 0) := (others => '0');
	signal axiSlave_M2S_AR_ARLOCK : unsigned(1 downto 0) := (others => '0');
	signal axiSlave_M2S_AR_ARCACHE : unsigned(3 downto 0) := (others => '0');
	signal axiSlave_M2S_AR_ARPROT : unsigned(2 downto 0) := (others => '0');
	signal axiSlave_M2S_AR_ARQOS : unsigned(3 downto 0) := (others => '0');
	signal axiSlave_M2S_AR_ARREGION : unsigned(7 downto 0) := (others => '0');
	signal axiSlave_M2S_AR_ARUSER : unsigned(7 downto 0) := (others => '0');
	signal axiSlave_M2S_AR_ARVALID : std_logic := '0';
	signal axiSlave_M2S_R_RREADY : std_logic := '0';
	signal axiSlave_M2S_AW_AWID : unsigned(7 downto 0) := (others => '0');
	signal axiSlave_M2S_AW_AWADDR : unsigned(31 downto 0) := (others => '0');
	signal axiSlave_M2S_AW_AWLEN : unsigned(7 downto 0) := (others => '0');
	signal axiSlave_M2S_AW_AWSIZE : unsigned(2 downto 0) := (others => '0');
	signal axiSlave_M2S_AW_AWBURST : unsigned(1 downto 0) := (others => '0');
	signal axiSlave_M2S_AW_AWLOCK : unsigned(1 downto 0) := (others => '0');
	signal axiSlave_M2S_AW_AWCACHE : unsigned(3 downto 0) := (others => '0');
	signal axiSlave_M2S_AW_AWPROT : unsigned(2 downto 0) := (others => '0');
	signal axiSlave_M2S_AW_AWQOS : unsigned(3 downto 0) := (others => '0');
	signal axiSlave_M2S_AW_AWREGION : unsigned(7 downto 0) := (others => '0');
	signal axiSlave_M2S_AW_AWUSER : unsigned(7 downto 0) := (others => '0');
	signal axiSlave_M2S_AW_AWVALID : std_logic := '0';
	signal axiSlave_M2S_W_WID : unsigned(7 downto 0) := (others => '0');
	signal axiSlave_M2S_W_WSTRB : unsigned(3 downto 0) := (others => '0');
	signal axiSlave_M2S_W_WLAST : std_logic := '0';
	signal axiSlave_M2S_W_WUSER : unsigned(7 downto 0) := (others => '0');
	signal axiSlave_M2S_W_WVALID : std_logic := '0';
	signal axiSlave_M2S_B_BREADY : std_logic := '0';
	signal axiSlave_inARREADY : std_logic := '0';
	signal axiSlave_inRVALID : std_logic := '0';
	signal axiSlave_inAWREADY : std_logic := '0';
	signal axiSlave_inWREADY : std_logic := '0';
	signal axiSlave_inBVALID : std_logic := '0';
	signal axiSlave_S2M_AR_ARREADY : std_logic := '0';
	signal axiSlave_S2M_AW_AWREADY : std_logic := '0';
	signal axiSlave_S2M_B_BID : unsigned(7 downto 0) := (others => '0');
	signal axiSlave_S2M_B_BRESP : unsigned(1 downto 0) := (others => '0');
	signal axiSlave_S2M_B_BUSER : unsigned(7 downto 0) := (others => '0');
	signal axiSlave_S2M_B_BVALID : std_logic := '0';
	signal axiSlave_S2M_R_RID : unsigned(7 downto 0) := (others => '0');
	signal axiSlave_S2M_R_RRESP : unsigned(1 downto 0) := (others => '0');
	signal axiSlave_S2M_R_RLAST : std_logic := '0';
	signal axiSlave_S2M_R_RUSER : unsigned(7 downto 0) := (others => '0');
	signal axiSlave_S2M_R_RVALID : std_logic := '0';
	signal axiSlave_S2M_W_WREADY : std_logic := '0';
	signal axiSlave_outReadTXCompleting : std_logic := '0';
	signal axiSlave_outWriteTXCompleting : std_logic := '0';
	signal axiSlave_outARREADYConfirming : std_logic := '0';
	signal axiSlave_outARVALID : std_logic := '0';
	signal axiSlave_outARADDR : unsigned(31 downto 0) := (others => '0');
	signal axiSlave_outAWREADYConfirming : std_logic := '0';
	signal axiSlave_outAWVALID : std_logic := '0';
	signal axiSlave_outAWADDR : unsigned(31 downto 0) := (others => '0');
	signal axiSlave_outWREADYConfirming : std_logic := '0';
	signal axiSlave_outWVALID : std_logic := '0';
	signal axiSlave_outWSTRB : unsigned(3 downto 0) := (others => '0');
	signal axiSlave_M2S_AR_ARID_axiSlave_M2S_AR_ARID_HardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlave_M2S_AR_ARADDR_axiSlave_M2S_AR_ARADDR_HardLink : unsigned(31 downto 0) := "00000000000000000000000000000000";
	signal axiSlave_M2S_AR_ARLEN_axiSlave_M2S_AR_ARLEN_HardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlave_M2S_AR_ARSIZE_axiSlave_M2S_AR_ARSIZE_HardLink : unsigned(2 downto 0) := "000";
	signal axiSlave_M2S_AR_ARBURST_axiSlave_M2S_AR_ARBURST_HardLink : unsigned(1 downto 0) := "00";
	signal axiSlave_M2S_AR_ARLOCK_axiSlave_M2S_AR_ARLOCK_HardLink : unsigned(1 downto 0) := "00";
	signal axiSlave_M2S_AR_ARCACHE_axiSlave_M2S_AR_ARCACHE_HardLink : unsigned(3 downto 0) := "0000";
	signal axiSlave_M2S_AR_ARPROT_axiSlave_M2S_AR_ARPROT_HardLink : unsigned(2 downto 0) := "000";
	signal axiSlave_M2S_AR_ARQOS_axiSlave_M2S_AR_ARQOS_HardLink : unsigned(3 downto 0) := "0000";
	signal axiSlave_M2S_AR_ARREGION_axiSlave_M2S_AR_ARREGION_HardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlave_M2S_AR_ARUSER_axiSlave_M2S_AR_ARUSER_HardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlave_M2S_AR_ARVALID_axiSlave_M2S_AR_ARVALID_HardLink : std_logic := '0';
	signal axiSlave_M2S_R_RREADY_axiSlave_M2S_R_RREADY_HardLink : std_logic := '0';
	signal axiSlave_M2S_AW_AWID_axiSlave_M2S_AW_AWID_HardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlave_M2S_AW_AWADDR_axiSlave_M2S_AW_AWADDR_HardLink : unsigned(31 downto 0) := "00000000000000000000000000000000";
	signal axiSlave_M2S_AW_AWLEN_axiSlave_M2S_AW_AWLEN_HardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlave_M2S_AW_AWSIZE_axiSlave_M2S_AW_AWSIZE_HardLink : unsigned(2 downto 0) := "000";
	signal axiSlave_M2S_AW_AWBURST_axiSlave_M2S_AW_AWBURST_HardLink : unsigned(1 downto 0) := "00";
	signal axiSlave_M2S_AW_AWLOCK_axiSlave_M2S_AW_AWLOCK_HardLink : unsigned(1 downto 0) := "00";
	signal axiSlave_M2S_AW_AWCACHE_axiSlave_M2S_AW_AWCACHE_HardLink : unsigned(3 downto 0) := "0000";
	signal axiSlave_M2S_AW_AWPROT_axiSlave_M2S_AW_AWPROT_HardLink : unsigned(2 downto 0) := "000";
	signal axiSlave_M2S_AW_AWQOS_axiSlave_M2S_AW_AWQOS_HardLink : unsigned(3 downto 0) := "0000";
	signal axiSlave_M2S_AW_AWREGION_axiSlave_M2S_AW_AWREGION_HardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlave_M2S_AW_AWUSER_axiSlave_M2S_AW_AWUSER_HardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlave_M2S_AW_AWVALID_axiSlave_M2S_AW_AWVALID_HardLink : std_logic := '0';
	signal axiSlave_M2S_W_WID_axiSlave_M2S_W_WID_HardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlave_M2S_W_WDATA0_axiSlave_M2S_W_WDATA_HardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlave_M2S_W_WDATA1_axiSlave_M2S_W_WDATA_HardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlave_M2S_W_WDATA2_axiSlave_M2S_W_WDATA_HardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlave_M2S_W_WDATA3_axiSlave_M2S_W_WDATA_HardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlave_M2S_W_WSTRB_axiSlave_M2S_W_WSTRB_HardLink : unsigned(3 downto 0) := "0000";
	signal axiSlave_M2S_W_WLAST_axiSlave_M2S_W_WLAST_HardLink : std_logic := '0';
	signal axiSlave_M2S_W_WUSER_axiSlave_M2S_W_WUSER_HardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlave_M2S_W_WVALID_axiSlave_M2S_W_WVALID_HardLink : std_logic := '0';
	signal axiSlave_M2S_B_BREADY_axiSlave_M2S_B_BREADY_HardLink : std_logic := '0';
	signal axiSlave_inRDATA0_axiSlave_inRDATA_HardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlave_inRDATA1_axiSlave_inRDATA_HardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlave_inRDATA2_axiSlave_inRDATA_HardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlave_inRDATA3_axiSlave_inRDATA_HardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlave_inARREADY_axiSlave_inARREADY_HardLink : std_logic := '0';
	signal axiSlave_inRVALID_axiSlave_inRVALID_HardLink : std_logic := '0';
	signal axiSlave_inAWREADY_axiSlave_inAWREADY_HardLink : std_logic := '0';
	signal axiSlave_inWREADY_axiSlave_inWREADY_HardLink : std_logic := '0';
	signal axiSlave_inBVALID_axiSlave_inBVALID_HardLink : std_logic := '0';
	signal axiSlave_S2M_AR_ARREADY_axiSlave_S2M_AR_ARREADY_HardLink : std_logic := '0';
	signal axiSlave_S2M_AW_AWREADY_axiSlave_S2M_AW_AWREADY_HardLink : std_logic := '0';
	signal axiSlave_S2M_B_BID_axiSlave_S2M_B_BID_HardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlave_S2M_B_BRESP_axiSlave_S2M_B_BRESP_HardLink : unsigned(1 downto 0) := "00";
	signal axiSlave_S2M_B_BUSER_axiSlave_S2M_B_BUSER_HardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlave_S2M_B_BVALID_axiSlave_S2M_B_BVALID_HardLink : std_logic := '0';
	signal axiSlave_S2M_R_RID_axiSlave_S2M_R_RID_HardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlave_S2M_R_RDATA0_axiSlave_S2M_R_RDATA_HardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlave_S2M_R_RDATA1_axiSlave_S2M_R_RDATA_HardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlave_S2M_R_RDATA2_axiSlave_S2M_R_RDATA_HardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlave_S2M_R_RDATA3_axiSlave_S2M_R_RDATA_HardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlave_S2M_R_RRESP_axiSlave_S2M_R_RRESP_HardLink : unsigned(1 downto 0) := "00";
	signal axiSlave_S2M_R_RLAST_axiSlave_S2M_R_RLAST_HardLink : std_logic := '0';
	signal axiSlave_S2M_R_RUSER_axiSlave_S2M_R_RUSER_HardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlave_S2M_R_RVALID_axiSlave_S2M_R_RVALID_HardLink : std_logic := '0';
	signal axiSlave_S2M_W_WREADY_axiSlave_S2M_W_WREADY_HardLink : std_logic := '0';
	signal axiSlave_outReadTXCompleting_axiSlave_outReadTXCompleting_HardLink : std_logic := '0';
	signal axiSlave_outWriteTXCompleting_axiSlave_outWriteTXCompleting_HardLink : std_logic := '0';
	signal axiSlave_outARREADYConfirming_axiSlave_outARREADYConfirming_HardLink : std_logic := '0';
	signal axiSlave_outARVALID_axiSlave_outARVALID_HardLink : std_logic := '0';
	signal axiSlave_outARADDR_axiSlave_outARADDR_HardLink : unsigned(31 downto 0) := "00000000000000000000000000000000";
	signal axiSlave_outAWREADYConfirming_axiSlave_outAWREADYConfirming_HardLink : std_logic := '0';
	signal axiSlave_outAWVALID_axiSlave_outAWVALID_HardLink : std_logic := '0';
	signal axiSlave_outAWADDR_axiSlave_outAWADDR_HardLink : unsigned(31 downto 0) := "00000000000000000000000000000000";
	signal axiSlave_outWREADYConfirming_axiSlave_outWREADYConfirming_HardLink : std_logic := '0';
	signal axiSlave_outWVALID_axiSlave_outWVALID_HardLink : std_logic := '0';
	signal axiSlave_outWDATA0_axiSlave_outWDATA_HardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlave_outWDATA1_axiSlave_outWDATA_HardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlave_outWDATA2_axiSlave_outWDATA_HardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlave_outWDATA3_axiSlave_outWDATA_HardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlave_outWSTRB_axiSlave_outWSTRB_HardLink : unsigned(3 downto 0) := "0000";
	signal State_Written : std_logic := '0';
	constant State_WrittenDefault : std_logic := '0';
	signal AXI4RegisterModule_L61F28T40_Expr : std_logic := '0';
	signal AXI4RegisterModule_L61F28T40_Expr_1 : std_logic := '0';
	signal AXI4RegisterModule_L67F9L82T10_AXI4RegisterModule_L68F33T76_Expr : std_logic := '0';
	signal AXI4RegisterModule_L67F9L82T10_AXI4RegisterModule_L68F33T76_Expr_1 : std_logic := '0';
	signal AXI4RegisterModule_L67F9L82T10_AXI4RegisterModule_L68F33T76_Expr_2 : std_logic := '0';
	type Inputs_M2S_W_WDATAArray is array (0 to 3) of unsigned (7 downto 0);
	signal Inputs_M2S_W_WDATA : Inputs_M2S_W_WDATAArray := (others => (others => '0'));
	type Inputs_inWDATAArray is array (0 to 3) of unsigned (7 downto 0);
	signal Inputs_inWDATA : Inputs_inWDATAArray := (others => (others => '0'));
	type State_bytesArray is array (0 to 3) of unsigned (7 downto 0);
	signal State_bytes : State_bytesArray := (others => (others => '0'));
	type NextState_bytesArray is array (0 to 3) of unsigned (7 downto 0);
	signal NextState_bytes : NextState_bytesArray := (others => (others => '0'));
	type axiSlave_M2S_W_WDATAArray is array (0 to 3) of unsigned (7 downto 0);
	signal axiSlave_M2S_W_WDATA : axiSlave_M2S_W_WDATAArray := (others => (others => '0'));
	type axiSlave_inRDATAArray is array (0 to 3) of unsigned (7 downto 0);
	signal axiSlave_inRDATA : axiSlave_inRDATAArray := (others => (others => '0'));
	type axiSlave_S2M_R_RDATAArray is array (0 to 3) of unsigned (7 downto 0);
	signal axiSlave_S2M_R_RDATA : axiSlave_S2M_R_RDATAArray := (others => (others => '0'));
	type axiSlave_outWDATAArray is array (0 to 3) of unsigned (7 downto 0);
	signal axiSlave_outWDATA : axiSlave_outWDATAArray := (others => (others => '0'));
begin
	process (BoardSignals, NextState_Written)
	begin
		if rising_edge(BoardSignals.Clock) then
			if BoardSignals.Reset = '1' then
				State_Written <= State_WrittenDefault;
			else
				State_Written <= NextState_Written;
			end if;
		end if;
	end process;
	process (BoardSignals, NextState_bytes)
	begin
		if rising_edge(BoardSignals.Clock) then
			if BoardSignals.Reset = '1' then
				for State_bytes_Iterator in 0 to 3 loop
					State_bytes(State_bytes_Iterator) <= State_bytesDefault;
				end loop;
			else
				for State_bytes_Iterator in 0 to 3 loop
					State_bytes(State_bytes_Iterator) <= NextState_bytes(State_bytes_Iterator);
				end loop;
			end if;
		end if;
	end process;
	process (AXI4RegisterModule_L61F28T40_Expr_1)
	begin
		AXI4RegisterModule_L61F28T40_Expr <= NOT AXI4RegisterModule_L61F28T40_Expr_1;
	end process;
	process (AXI4RegisterModule_L67F9L82T10_AXI4RegisterModule_L68F33T76_Expr_1, AXI4RegisterModule_L67F9L82T10_AXI4RegisterModule_L68F33T76_Expr_2)
	begin
		AXI4RegisterModule_L67F9L82T10_AXI4RegisterModule_L68F33T76_Expr <= AXI4RegisterModule_L67F9L82T10_AXI4RegisterModule_L68F33T76_Expr_1 OR AXI4RegisterModule_L67F9L82T10_AXI4RegisterModule_L68F33T76_Expr_2;
	end process;
	AXI4MasterSlaveTestModule_TopLevel_reg_axiSlave : entity work.AXI4MasterSlaveTestModule_TopLevel_reg_axiSlave
	port map
	(
		-- [BEGIN USER MAP FOR axiSlave]
		-- [END USER MAP FOR axiSlave]
		BoardSignals => BoardSignals,
		M2S_AR_ARID => axiSlave_M2S_AR_ARID_axiSlave_M2S_AR_ARID_HardLink,
		M2S_AR_ARADDR => axiSlave_M2S_AR_ARADDR_axiSlave_M2S_AR_ARADDR_HardLink,
		M2S_AR_ARLEN => axiSlave_M2S_AR_ARLEN_axiSlave_M2S_AR_ARLEN_HardLink,
		M2S_AR_ARSIZE => axiSlave_M2S_AR_ARSIZE_axiSlave_M2S_AR_ARSIZE_HardLink,
		M2S_AR_ARBURST => axiSlave_M2S_AR_ARBURST_axiSlave_M2S_AR_ARBURST_HardLink,
		M2S_AR_ARLOCK => axiSlave_M2S_AR_ARLOCK_axiSlave_M2S_AR_ARLOCK_HardLink,
		M2S_AR_ARCACHE => axiSlave_M2S_AR_ARCACHE_axiSlave_M2S_AR_ARCACHE_HardLink,
		M2S_AR_ARPROT => axiSlave_M2S_AR_ARPROT_axiSlave_M2S_AR_ARPROT_HardLink,
		M2S_AR_ARQOS => axiSlave_M2S_AR_ARQOS_axiSlave_M2S_AR_ARQOS_HardLink,
		M2S_AR_ARREGION => axiSlave_M2S_AR_ARREGION_axiSlave_M2S_AR_ARREGION_HardLink,
		M2S_AR_ARUSER => axiSlave_M2S_AR_ARUSER_axiSlave_M2S_AR_ARUSER_HardLink,
		M2S_AR_ARVALID => axiSlave_M2S_AR_ARVALID_axiSlave_M2S_AR_ARVALID_HardLink,
		M2S_R_RREADY => axiSlave_M2S_R_RREADY_axiSlave_M2S_R_RREADY_HardLink,
		M2S_AW_AWID => axiSlave_M2S_AW_AWID_axiSlave_M2S_AW_AWID_HardLink,
		M2S_AW_AWADDR => axiSlave_M2S_AW_AWADDR_axiSlave_M2S_AW_AWADDR_HardLink,
		M2S_AW_AWLEN => axiSlave_M2S_AW_AWLEN_axiSlave_M2S_AW_AWLEN_HardLink,
		M2S_AW_AWSIZE => axiSlave_M2S_AW_AWSIZE_axiSlave_M2S_AW_AWSIZE_HardLink,
		M2S_AW_AWBURST => axiSlave_M2S_AW_AWBURST_axiSlave_M2S_AW_AWBURST_HardLink,
		M2S_AW_AWLOCK => axiSlave_M2S_AW_AWLOCK_axiSlave_M2S_AW_AWLOCK_HardLink,
		M2S_AW_AWCACHE => axiSlave_M2S_AW_AWCACHE_axiSlave_M2S_AW_AWCACHE_HardLink,
		M2S_AW_AWPROT => axiSlave_M2S_AW_AWPROT_axiSlave_M2S_AW_AWPROT_HardLink,
		M2S_AW_AWQOS => axiSlave_M2S_AW_AWQOS_axiSlave_M2S_AW_AWQOS_HardLink,
		M2S_AW_AWREGION => axiSlave_M2S_AW_AWREGION_axiSlave_M2S_AW_AWREGION_HardLink,
		M2S_AW_AWUSER => axiSlave_M2S_AW_AWUSER_axiSlave_M2S_AW_AWUSER_HardLink,
		M2S_AW_AWVALID => axiSlave_M2S_AW_AWVALID_axiSlave_M2S_AW_AWVALID_HardLink,
		M2S_W_WID => axiSlave_M2S_W_WID_axiSlave_M2S_W_WID_HardLink,
		M2S_W_WDATA0 => axiSlave_M2S_W_WDATA0_axiSlave_M2S_W_WDATA_HardLink,
		M2S_W_WDATA1 => axiSlave_M2S_W_WDATA1_axiSlave_M2S_W_WDATA_HardLink,
		M2S_W_WDATA2 => axiSlave_M2S_W_WDATA2_axiSlave_M2S_W_WDATA_HardLink,
		M2S_W_WDATA3 => axiSlave_M2S_W_WDATA3_axiSlave_M2S_W_WDATA_HardLink,
		M2S_W_WSTRB => axiSlave_M2S_W_WSTRB_axiSlave_M2S_W_WSTRB_HardLink,
		M2S_W_WLAST => axiSlave_M2S_W_WLAST_axiSlave_M2S_W_WLAST_HardLink,
		M2S_W_WUSER => axiSlave_M2S_W_WUSER_axiSlave_M2S_W_WUSER_HardLink,
		M2S_W_WVALID => axiSlave_M2S_W_WVALID_axiSlave_M2S_W_WVALID_HardLink,
		M2S_B_BREADY => axiSlave_M2S_B_BREADY_axiSlave_M2S_B_BREADY_HardLink,
		inRDATA0 => axiSlave_inRDATA0_axiSlave_inRDATA_HardLink,
		inRDATA1 => axiSlave_inRDATA1_axiSlave_inRDATA_HardLink,
		inRDATA2 => axiSlave_inRDATA2_axiSlave_inRDATA_HardLink,
		inRDATA3 => axiSlave_inRDATA3_axiSlave_inRDATA_HardLink,
		inARREADY => axiSlave_inARREADY_axiSlave_inARREADY_HardLink,
		inRVALID => axiSlave_inRVALID_axiSlave_inRVALID_HardLink,
		inAWREADY => axiSlave_inAWREADY_axiSlave_inAWREADY_HardLink,
		inWREADY => axiSlave_inWREADY_axiSlave_inWREADY_HardLink,
		inBVALID => axiSlave_inBVALID_axiSlave_inBVALID_HardLink,
		S2M_AR_ARREADY => axiSlave_S2M_AR_ARREADY_axiSlave_S2M_AR_ARREADY_HardLink,
		S2M_AW_AWREADY => axiSlave_S2M_AW_AWREADY_axiSlave_S2M_AW_AWREADY_HardLink,
		S2M_B_BID => axiSlave_S2M_B_BID_axiSlave_S2M_B_BID_HardLink,
		S2M_B_BRESP => axiSlave_S2M_B_BRESP_axiSlave_S2M_B_BRESP_HardLink,
		S2M_B_BUSER => axiSlave_S2M_B_BUSER_axiSlave_S2M_B_BUSER_HardLink,
		S2M_B_BVALID => axiSlave_S2M_B_BVALID_axiSlave_S2M_B_BVALID_HardLink,
		S2M_R_RID => axiSlave_S2M_R_RID_axiSlave_S2M_R_RID_HardLink,
		S2M_R_RDATA0 => axiSlave_S2M_R_RDATA0_axiSlave_S2M_R_RDATA_HardLink,
		S2M_R_RDATA1 => axiSlave_S2M_R_RDATA1_axiSlave_S2M_R_RDATA_HardLink,
		S2M_R_RDATA2 => axiSlave_S2M_R_RDATA2_axiSlave_S2M_R_RDATA_HardLink,
		S2M_R_RDATA3 => axiSlave_S2M_R_RDATA3_axiSlave_S2M_R_RDATA_HardLink,
		S2M_R_RRESP => axiSlave_S2M_R_RRESP_axiSlave_S2M_R_RRESP_HardLink,
		S2M_R_RLAST => axiSlave_S2M_R_RLAST_axiSlave_S2M_R_RLAST_HardLink,
		S2M_R_RUSER => axiSlave_S2M_R_RUSER_axiSlave_S2M_R_RUSER_HardLink,
		S2M_R_RVALID => axiSlave_S2M_R_RVALID_axiSlave_S2M_R_RVALID_HardLink,
		S2M_W_WREADY => axiSlave_S2M_W_WREADY_axiSlave_S2M_W_WREADY_HardLink,
		outReadTXCompleting => axiSlave_outReadTXCompleting_axiSlave_outReadTXCompleting_HardLink,
		outWriteTXCompleting => axiSlave_outWriteTXCompleting_axiSlave_outWriteTXCompleting_HardLink,
		outARREADYConfirming => axiSlave_outARREADYConfirming_axiSlave_outARREADYConfirming_HardLink,
		outARVALID => axiSlave_outARVALID_axiSlave_outARVALID_HardLink,
		outARADDR => axiSlave_outARADDR_axiSlave_outARADDR_HardLink,
		outAWREADYConfirming => axiSlave_outAWREADYConfirming_axiSlave_outAWREADYConfirming_HardLink,
		outAWVALID => axiSlave_outAWVALID_axiSlave_outAWVALID_HardLink,
		outAWADDR => axiSlave_outAWADDR_axiSlave_outAWADDR_HardLink,
		outWREADYConfirming => axiSlave_outWREADYConfirming_axiSlave_outWREADYConfirming_HardLink,
		outWVALID => axiSlave_outWVALID_axiSlave_outWVALID_HardLink,
		outWDATA0 => axiSlave_outWDATA0_axiSlave_outWDATA_HardLink,
		outWDATA1 => axiSlave_outWDATA1_axiSlave_outWDATA_HardLink,
		outWDATA2 => axiSlave_outWDATA2_axiSlave_outWDATA_HardLink,
		outWDATA3 => axiSlave_outWDATA3_axiSlave_outWDATA_HardLink,
		outWSTRB => axiSlave_outWSTRB_axiSlave_outWSTRB_HardLink
	)
	;
	process (AXI4RegisterModule_L67F9L82T10_AXI4RegisterModule_L68F33T76_Expr, axiSlave_outWDATA, axiSlave_outWREADYConfirming, axiSlave_outWSTRB, Inputs_inWDATA, Inputs_inWE, State_bytes, State_Written)
	begin
		for NextState_bytes_Iterator in 0 to 3 loop
			NextState_bytes(NextState_bytes_Iterator) <= State_bytes(NextState_bytes_Iterator);
		end loop;
		NextState_Written <= State_Written;
		NextState_Written <= AXI4RegisterModule_L67F9L82T10_AXI4RegisterModule_L68F33T76_Expr;
		if Inputs_inWE = '1' then
			NextState_bytes(0) <= Inputs_inWDATA(0);
			NextState_bytes(1) <= Inputs_inWDATA(1);
			NextState_bytes(2) <= Inputs_inWDATA(2);
			NextState_bytes(3) <= Inputs_inWDATA(3);
		elsif axiSlave_outWREADYConfirming = '1' then
			if axiSlave_outWSTRB(0) = '1' then
				NextState_bytes(0) <= axiSlave_outWDATA(0);
			end if;
			if axiSlave_outWSTRB(1) = '1' then
				NextState_bytes(1) <= axiSlave_outWDATA(1);
			end if;
			if axiSlave_outWSTRB(2) = '1' then
				NextState_bytes(2) <= axiSlave_outWDATA(2);
			end if;
			if axiSlave_outWSTRB(3) = '1' then
				NextState_bytes(3) <= axiSlave_outWDATA(3);
			end if;
		end if;
	end process;
	process (AXI4RegisterModule_L61F28T40_Expr, axiSlave_inARREADY, axiSlave_inAWREADY, axiSlave_inBVALID, axiSlave_inRDATA, axiSlave_inRVALID, axiSlave_inWREADY, axiSlave_M2S_AR_ARADDR, axiSlave_M2S_AR_ARBURST, axiSlave_M2S_AR_ARCACHE, axiSlave_M2S_AR_ARID, axiSlave_M2S_AR_ARLEN, axiSlave_M2S_AR_ARLOCK, axiSlave_M2S_AR_ARPROT, axiSlave_M2S_AR_ARQOS, axiSlave_M2S_AR_ARREGION, axiSlave_M2S_AR_ARSIZE, axiSlave_M2S_AR_ARUSER, axiSlave_M2S_AR_ARVALID, axiSlave_M2S_AW_AWADDR, axiSlave_M2S_AW_AWBURST, axiSlave_M2S_AW_AWCACHE, axiSlave_M2S_AW_AWID, axiSlave_M2S_AW_AWLEN, axiSlave_M2S_AW_AWLOCK, axiSlave_M2S_AW_AWPROT, axiSlave_M2S_AW_AWQOS, axiSlave_M2S_AW_AWREGION, axiSlave_M2S_AW_AWSIZE, axiSlave_M2S_AW_AWUSER, axiSlave_M2S_AW_AWVALID, axiSlave_M2S_B_BREADY, axiSlave_M2S_R_RREADY, axiSlave_M2S_W_WDATA, axiSlave_M2S_W_WID, axiSlave_M2S_W_WLAST, axiSlave_M2S_W_WSTRB, axiSlave_M2S_W_WUSER, axiSlave_M2S_W_WVALID, axiSlave_outARADDR_axiSlave_outARADDR_HardLink, axiSlave_outARREADYConfirming_axiSlave_outARREADYConfirming_HardLink, axiSlave_outARVALID_axiSlave_outARVALID_HardLink, axiSlave_outAWADDR_axiSlave_outAWADDR_HardLink, axiSlave_outAWREADYConfirming_axiSlave_outAWREADYConfirming_HardLink, axiSlave_outAWVALID_axiSlave_outAWVALID_HardLink, axiSlave_outReadTXCompleting_axiSlave_outReadTXCompleting_HardLink, axiSlave_outWDATA0_axiSlave_outWDATA_HardLink, axiSlave_outWDATA1_axiSlave_outWDATA_HardLink, axiSlave_outWDATA2_axiSlave_outWDATA_HardLink, axiSlave_outWDATA3_axiSlave_outWDATA_HardLink, axiSlave_outWREADYConfirming, axiSlave_outWREADYConfirming_axiSlave_outWREADYConfirming_HardLink, axiSlave_outWriteTXCompleting_axiSlave_outWriteTXCompleting_HardLink, axiSlave_outWSTRB_axiSlave_outWSTRB_HardLink, axiSlave_outWVALID_axiSlave_outWVALID_HardLink, axiSlave_S2M_AR_ARREADY, axiSlave_S2M_AR_ARREADY_axiSlave_S2M_AR_ARREADY_HardLink, axiSlave_S2M_AW_AWREADY, axiSlave_S2M_AW_AWREADY_axiSlave_S2M_AW_AWREADY_HardLink, axiSlave_S2M_B_BID, axiSlave_S2M_B_BID_axiSlave_S2M_B_BID_HardLink, axiSlave_S2M_B_BRESP, axiSlave_S2M_B_BRESP_axiSlave_S2M_B_BRESP_HardLink, axiSlave_S2M_B_BUSER, axiSlave_S2M_B_BUSER_axiSlave_S2M_B_BUSER_HardLink, axiSlave_S2M_B_BVALID, axiSlave_S2M_B_BVALID_axiSlave_S2M_B_BVALID_HardLink, axiSlave_S2M_R_RDATA, axiSlave_S2M_R_RDATA0_axiSlave_S2M_R_RDATA_HardLink, axiSlave_S2M_R_RDATA1_axiSlave_S2M_R_RDATA_HardLink, axiSlave_S2M_R_RDATA2_axiSlave_S2M_R_RDATA_HardLink, axiSlave_S2M_R_RDATA3_axiSlave_S2M_R_RDATA_HardLink, axiSlave_S2M_R_RID, axiSlave_S2M_R_RID_axiSlave_S2M_R_RID_HardLink, axiSlave_S2M_R_RLAST, axiSlave_S2M_R_RLAST_axiSlave_S2M_R_RLAST_HardLink, axiSlave_S2M_R_RRESP, axiSlave_S2M_R_RRESP_axiSlave_S2M_R_RRESP_HardLink, axiSlave_S2M_R_RUSER, axiSlave_S2M_R_RUSER_axiSlave_S2M_R_RUSER_HardLink, axiSlave_S2M_R_RVALID, axiSlave_S2M_R_RVALID_axiSlave_S2M_R_RVALID_HardLink, axiSlave_S2M_W_WREADY, axiSlave_S2M_W_WREADY_axiSlave_S2M_W_WREADY_HardLink, Inputs_inWE, Inputs_M2S_AR_ARADDR, Inputs_M2S_AR_ARBURST, Inputs_M2S_AR_ARCACHE, Inputs_M2S_AR_ARID, Inputs_M2S_AR_ARLEN, Inputs_M2S_AR_ARLOCK, Inputs_M2S_AR_ARPROT, Inputs_M2S_AR_ARQOS, Inputs_M2S_AR_ARREGION, Inputs_M2S_AR_ARSIZE, Inputs_M2S_AR_ARUSER, Inputs_M2S_AR_ARVALID, Inputs_M2S_AW_AWADDR, Inputs_M2S_AW_AWBURST, Inputs_M2S_AW_AWCACHE, Inputs_M2S_AW_AWID, Inputs_M2S_AW_AWLEN, Inputs_M2S_AW_AWLOCK, Inputs_M2S_AW_AWPROT, Inputs_M2S_AW_AWQOS, Inputs_M2S_AW_AWREGION, Inputs_M2S_AW_AWSIZE, Inputs_M2S_AW_AWUSER, Inputs_M2S_AW_AWVALID, Inputs_M2S_B_BREADY, Inputs_M2S_R_RREADY, Inputs_M2S_W_WDATA, Inputs_M2S_W_WID, Inputs_M2S_W_WLAST, Inputs_M2S_W_WSTRB, Inputs_M2S_W_WUSER, Inputs_M2S_W_WVALID, inWDATA0, inWDATA1, inWDATA2, inWDATA3, inWE, M2S_AR_ARADDR, M2S_AR_ARBURST, M2S_AR_ARCACHE, M2S_AR_ARID, M2S_AR_ARLEN, M2S_AR_ARLOCK, M2S_AR_ARPROT, M2S_AR_ARQOS, M2S_AR_ARREGION, M2S_AR_ARSIZE, M2S_AR_ARUSER, M2S_AR_ARVALID, M2S_AW_AWADDR, M2S_AW_AWBURST, M2S_AW_AWCACHE, M2S_AW_AWID, M2S_AW_AWLEN, M2S_AW_AWLOCK, M2S_AW_AWPROT, M2S_AW_AWQOS, M2S_AW_AWREGION, M2S_AW_AWSIZE, M2S_AW_AWUSER, M2S_AW_AWVALID, M2S_B_BREADY, M2S_R_RREADY, M2S_W_WDATA0, M2S_W_WDATA1, M2S_W_WDATA2, M2S_W_WDATA3, M2S_W_WID, M2S_W_WLAST, M2S_W_WSTRB, M2S_W_WUSER, M2S_W_WVALID, State_bytes, State_Written)
	begin
		AXI4RegisterModule_L61F28T40_Expr_1 <= Inputs_inWE;
		AXI4RegisterModule_L67F9L82T10_AXI4RegisterModule_L68F33T76_Expr_1 <= Inputs_inWE;
		AXI4RegisterModule_L67F9L82T10_AXI4RegisterModule_L68F33T76_Expr_2 <= axiSlave_outWREADYConfirming;
		Inputs_M2S_AR_ARID <= M2S_AR_ARID;
		Inputs_M2S_AR_ARADDR <= M2S_AR_ARADDR;
		Inputs_M2S_AR_ARLEN <= M2S_AR_ARLEN;
		Inputs_M2S_AR_ARSIZE <= M2S_AR_ARSIZE;
		Inputs_M2S_AR_ARBURST <= M2S_AR_ARBURST;
		Inputs_M2S_AR_ARLOCK <= M2S_AR_ARLOCK;
		Inputs_M2S_AR_ARCACHE <= M2S_AR_ARCACHE;
		Inputs_M2S_AR_ARPROT <= M2S_AR_ARPROT;
		Inputs_M2S_AR_ARQOS <= M2S_AR_ARQOS;
		Inputs_M2S_AR_ARREGION <= M2S_AR_ARREGION;
		Inputs_M2S_AR_ARUSER <= M2S_AR_ARUSER;
		Inputs_M2S_AR_ARVALID <= M2S_AR_ARVALID;
		Inputs_M2S_R_RREADY <= M2S_R_RREADY;
		Inputs_M2S_AW_AWID <= M2S_AW_AWID;
		Inputs_M2S_AW_AWADDR <= M2S_AW_AWADDR;
		Inputs_M2S_AW_AWLEN <= M2S_AW_AWLEN;
		Inputs_M2S_AW_AWSIZE <= M2S_AW_AWSIZE;
		Inputs_M2S_AW_AWBURST <= M2S_AW_AWBURST;
		Inputs_M2S_AW_AWLOCK <= M2S_AW_AWLOCK;
		Inputs_M2S_AW_AWCACHE <= M2S_AW_AWCACHE;
		Inputs_M2S_AW_AWPROT <= M2S_AW_AWPROT;
		Inputs_M2S_AW_AWQOS <= M2S_AW_AWQOS;
		Inputs_M2S_AW_AWREGION <= M2S_AW_AWREGION;
		Inputs_M2S_AW_AWUSER <= M2S_AW_AWUSER;
		Inputs_M2S_AW_AWVALID <= M2S_AW_AWVALID;
		Inputs_M2S_W_WID <= M2S_W_WID;
		Inputs_M2S_W_WDATA(0) <= M2S_W_WDATA0;
		Inputs_M2S_W_WDATA(1) <= M2S_W_WDATA1;
		Inputs_M2S_W_WDATA(2) <= M2S_W_WDATA2;
		Inputs_M2S_W_WDATA(3) <= M2S_W_WDATA3;
		Inputs_M2S_W_WSTRB <= M2S_W_WSTRB;
		Inputs_M2S_W_WLAST <= M2S_W_WLAST;
		Inputs_M2S_W_WUSER <= M2S_W_WUSER;
		Inputs_M2S_W_WVALID <= M2S_W_WVALID;
		Inputs_M2S_B_BREADY <= M2S_B_BREADY;
		Inputs_inWE <= inWE;
		Inputs_inWDATA(0) <= inWDATA0;
		Inputs_inWDATA(1) <= inWDATA1;
		Inputs_inWDATA(2) <= inWDATA2;
		Inputs_inWDATA(3) <= inWDATA3;
		axiSlave_M2S_AR_ARID <= Inputs_M2S_AR_ARID;
		axiSlave_M2S_AR_ARADDR <= Inputs_M2S_AR_ARADDR;
		axiSlave_M2S_AR_ARLEN <= Inputs_M2S_AR_ARLEN;
		axiSlave_M2S_AR_ARSIZE <= Inputs_M2S_AR_ARSIZE;
		axiSlave_M2S_AR_ARBURST <= Inputs_M2S_AR_ARBURST;
		axiSlave_M2S_AR_ARLOCK <= Inputs_M2S_AR_ARLOCK;
		axiSlave_M2S_AR_ARCACHE <= Inputs_M2S_AR_ARCACHE;
		axiSlave_M2S_AR_ARPROT <= Inputs_M2S_AR_ARPROT;
		axiSlave_M2S_AR_ARQOS <= Inputs_M2S_AR_ARQOS;
		axiSlave_M2S_AR_ARREGION <= Inputs_M2S_AR_ARREGION;
		axiSlave_M2S_AR_ARUSER <= Inputs_M2S_AR_ARUSER;
		axiSlave_M2S_AR_ARVALID <= Inputs_M2S_AR_ARVALID;
		axiSlave_M2S_R_RREADY <= Inputs_M2S_R_RREADY;
		axiSlave_M2S_AW_AWID <= Inputs_M2S_AW_AWID;
		axiSlave_M2S_AW_AWADDR <= Inputs_M2S_AW_AWADDR;
		axiSlave_M2S_AW_AWLEN <= Inputs_M2S_AW_AWLEN;
		axiSlave_M2S_AW_AWSIZE <= Inputs_M2S_AW_AWSIZE;
		axiSlave_M2S_AW_AWBURST <= Inputs_M2S_AW_AWBURST;
		axiSlave_M2S_AW_AWLOCK <= Inputs_M2S_AW_AWLOCK;
		axiSlave_M2S_AW_AWCACHE <= Inputs_M2S_AW_AWCACHE;
		axiSlave_M2S_AW_AWPROT <= Inputs_M2S_AW_AWPROT;
		axiSlave_M2S_AW_AWQOS <= Inputs_M2S_AW_AWQOS;
		axiSlave_M2S_AW_AWREGION <= Inputs_M2S_AW_AWREGION;
		axiSlave_M2S_AW_AWUSER <= Inputs_M2S_AW_AWUSER;
		axiSlave_M2S_AW_AWVALID <= Inputs_M2S_AW_AWVALID;
		axiSlave_M2S_W_WID <= Inputs_M2S_W_WID;
		axiSlave_M2S_W_WDATA(0) <= Inputs_M2S_W_WDATA(0);
		axiSlave_M2S_W_WDATA(1) <= Inputs_M2S_W_WDATA(1);
		axiSlave_M2S_W_WDATA(2) <= Inputs_M2S_W_WDATA(2);
		axiSlave_M2S_W_WDATA(3) <= Inputs_M2S_W_WDATA(3);
		axiSlave_M2S_W_WSTRB <= Inputs_M2S_W_WSTRB;
		axiSlave_M2S_W_WLAST <= Inputs_M2S_W_WLAST;
		axiSlave_M2S_W_WUSER <= Inputs_M2S_W_WUSER;
		axiSlave_M2S_W_WVALID <= Inputs_M2S_W_WVALID;
		axiSlave_M2S_B_BREADY <= Inputs_M2S_B_BREADY;
		axiSlave_inRDATA(0) <= State_bytes(0);
		axiSlave_inRDATA(1) <= State_bytes(1);
		axiSlave_inRDATA(2) <= State_bytes(2);
		axiSlave_inRDATA(3) <= State_bytes(3);
		axiSlave_inARREADY <= AXI4RegisterModule_L58F29T33_Expr;
		axiSlave_inRVALID <= AXI4RegisterModule_L59F28T32_Expr;
		axiSlave_inAWREADY <= AXI4RegisterModule_L60F29T33_Expr;
		axiSlave_inWREADY <= AXI4RegisterModule_L61F28T40_Expr;
		axiSlave_inBVALID <= AXI4RegisterModule_L62F28T32_Expr;
		outData0 <= State_bytes(0);
		outData1 <= State_bytes(1);
		outData2 <= State_bytes(2);
		outData3 <= State_bytes(3);
		outACK <= Inputs_inWE;
		S2M_AR_ARREADY <= axiSlave_S2M_AR_ARREADY;
		S2M_AW_AWREADY <= axiSlave_S2M_AW_AWREADY;
		S2M_B_BID <= axiSlave_S2M_B_BID;
		S2M_B_BRESP <= axiSlave_S2M_B_BRESP;
		S2M_B_BUSER <= axiSlave_S2M_B_BUSER;
		S2M_B_BVALID <= axiSlave_S2M_B_BVALID;
		S2M_R_RID <= axiSlave_S2M_R_RID;
		S2M_R_RDATA0 <= axiSlave_S2M_R_RDATA(0);
		S2M_R_RDATA1 <= axiSlave_S2M_R_RDATA(1);
		S2M_R_RDATA2 <= axiSlave_S2M_R_RDATA(2);
		S2M_R_RDATA3 <= axiSlave_S2M_R_RDATA(3);
		S2M_R_RRESP <= axiSlave_S2M_R_RRESP;
		S2M_R_RLAST <= axiSlave_S2M_R_RLAST;
		S2M_R_RUSER <= axiSlave_S2M_R_RUSER;
		S2M_R_RVALID <= axiSlave_S2M_R_RVALID;
		S2M_W_WREADY <= axiSlave_S2M_W_WREADY;
		outWritten <= State_Written;
		axiSlave_M2S_AR_ARID_axiSlave_M2S_AR_ARID_HardLink <= axiSlave_M2S_AR_ARID;
		axiSlave_M2S_AR_ARADDR_axiSlave_M2S_AR_ARADDR_HardLink <= axiSlave_M2S_AR_ARADDR;
		axiSlave_M2S_AR_ARLEN_axiSlave_M2S_AR_ARLEN_HardLink <= axiSlave_M2S_AR_ARLEN;
		axiSlave_M2S_AR_ARSIZE_axiSlave_M2S_AR_ARSIZE_HardLink <= axiSlave_M2S_AR_ARSIZE;
		axiSlave_M2S_AR_ARBURST_axiSlave_M2S_AR_ARBURST_HardLink <= axiSlave_M2S_AR_ARBURST;
		axiSlave_M2S_AR_ARLOCK_axiSlave_M2S_AR_ARLOCK_HardLink <= axiSlave_M2S_AR_ARLOCK;
		axiSlave_M2S_AR_ARCACHE_axiSlave_M2S_AR_ARCACHE_HardLink <= axiSlave_M2S_AR_ARCACHE;
		axiSlave_M2S_AR_ARPROT_axiSlave_M2S_AR_ARPROT_HardLink <= axiSlave_M2S_AR_ARPROT;
		axiSlave_M2S_AR_ARQOS_axiSlave_M2S_AR_ARQOS_HardLink <= axiSlave_M2S_AR_ARQOS;
		axiSlave_M2S_AR_ARREGION_axiSlave_M2S_AR_ARREGION_HardLink <= axiSlave_M2S_AR_ARREGION;
		axiSlave_M2S_AR_ARUSER_axiSlave_M2S_AR_ARUSER_HardLink <= axiSlave_M2S_AR_ARUSER;
		axiSlave_M2S_AR_ARVALID_axiSlave_M2S_AR_ARVALID_HardLink <= axiSlave_M2S_AR_ARVALID;
		axiSlave_M2S_R_RREADY_axiSlave_M2S_R_RREADY_HardLink <= axiSlave_M2S_R_RREADY;
		axiSlave_M2S_AW_AWID_axiSlave_M2S_AW_AWID_HardLink <= axiSlave_M2S_AW_AWID;
		axiSlave_M2S_AW_AWADDR_axiSlave_M2S_AW_AWADDR_HardLink <= axiSlave_M2S_AW_AWADDR;
		axiSlave_M2S_AW_AWLEN_axiSlave_M2S_AW_AWLEN_HardLink <= axiSlave_M2S_AW_AWLEN;
		axiSlave_M2S_AW_AWSIZE_axiSlave_M2S_AW_AWSIZE_HardLink <= axiSlave_M2S_AW_AWSIZE;
		axiSlave_M2S_AW_AWBURST_axiSlave_M2S_AW_AWBURST_HardLink <= axiSlave_M2S_AW_AWBURST;
		axiSlave_M2S_AW_AWLOCK_axiSlave_M2S_AW_AWLOCK_HardLink <= axiSlave_M2S_AW_AWLOCK;
		axiSlave_M2S_AW_AWCACHE_axiSlave_M2S_AW_AWCACHE_HardLink <= axiSlave_M2S_AW_AWCACHE;
		axiSlave_M2S_AW_AWPROT_axiSlave_M2S_AW_AWPROT_HardLink <= axiSlave_M2S_AW_AWPROT;
		axiSlave_M2S_AW_AWQOS_axiSlave_M2S_AW_AWQOS_HardLink <= axiSlave_M2S_AW_AWQOS;
		axiSlave_M2S_AW_AWREGION_axiSlave_M2S_AW_AWREGION_HardLink <= axiSlave_M2S_AW_AWREGION;
		axiSlave_M2S_AW_AWUSER_axiSlave_M2S_AW_AWUSER_HardLink <= axiSlave_M2S_AW_AWUSER;
		axiSlave_M2S_AW_AWVALID_axiSlave_M2S_AW_AWVALID_HardLink <= axiSlave_M2S_AW_AWVALID;
		axiSlave_M2S_W_WID_axiSlave_M2S_W_WID_HardLink <= axiSlave_M2S_W_WID;
		axiSlave_M2S_W_WDATA0_axiSlave_M2S_W_WDATA_HardLink <= axiSlave_M2S_W_WDATA(0);
		axiSlave_M2S_W_WDATA1_axiSlave_M2S_W_WDATA_HardLink <= axiSlave_M2S_W_WDATA(1);
		axiSlave_M2S_W_WDATA2_axiSlave_M2S_W_WDATA_HardLink <= axiSlave_M2S_W_WDATA(2);
		axiSlave_M2S_W_WDATA3_axiSlave_M2S_W_WDATA_HardLink <= axiSlave_M2S_W_WDATA(3);
		axiSlave_M2S_W_WSTRB_axiSlave_M2S_W_WSTRB_HardLink <= axiSlave_M2S_W_WSTRB;
		axiSlave_M2S_W_WLAST_axiSlave_M2S_W_WLAST_HardLink <= axiSlave_M2S_W_WLAST;
		axiSlave_M2S_W_WUSER_axiSlave_M2S_W_WUSER_HardLink <= axiSlave_M2S_W_WUSER;
		axiSlave_M2S_W_WVALID_axiSlave_M2S_W_WVALID_HardLink <= axiSlave_M2S_W_WVALID;
		axiSlave_M2S_B_BREADY_axiSlave_M2S_B_BREADY_HardLink <= axiSlave_M2S_B_BREADY;
		axiSlave_inRDATA0_axiSlave_inRDATA_HardLink <= axiSlave_inRDATA(0);
		axiSlave_inRDATA1_axiSlave_inRDATA_HardLink <= axiSlave_inRDATA(1);
		axiSlave_inRDATA2_axiSlave_inRDATA_HardLink <= axiSlave_inRDATA(2);
		axiSlave_inRDATA3_axiSlave_inRDATA_HardLink <= axiSlave_inRDATA(3);
		axiSlave_inARREADY_axiSlave_inARREADY_HardLink <= axiSlave_inARREADY;
		axiSlave_inRVALID_axiSlave_inRVALID_HardLink <= axiSlave_inRVALID;
		axiSlave_inAWREADY_axiSlave_inAWREADY_HardLink <= axiSlave_inAWREADY;
		axiSlave_inWREADY_axiSlave_inWREADY_HardLink <= axiSlave_inWREADY;
		axiSlave_inBVALID_axiSlave_inBVALID_HardLink <= axiSlave_inBVALID;
		axiSlave_S2M_AR_ARREADY <= axiSlave_S2M_AR_ARREADY_axiSlave_S2M_AR_ARREADY_HardLink;
		axiSlave_S2M_AW_AWREADY <= axiSlave_S2M_AW_AWREADY_axiSlave_S2M_AW_AWREADY_HardLink;
		axiSlave_S2M_B_BID <= axiSlave_S2M_B_BID_axiSlave_S2M_B_BID_HardLink;
		axiSlave_S2M_B_BRESP <= axiSlave_S2M_B_BRESP_axiSlave_S2M_B_BRESP_HardLink;
		axiSlave_S2M_B_BUSER <= axiSlave_S2M_B_BUSER_axiSlave_S2M_B_BUSER_HardLink;
		axiSlave_S2M_B_BVALID <= axiSlave_S2M_B_BVALID_axiSlave_S2M_B_BVALID_HardLink;
		axiSlave_S2M_R_RID <= axiSlave_S2M_R_RID_axiSlave_S2M_R_RID_HardLink;
		axiSlave_S2M_R_RDATA(0) <= axiSlave_S2M_R_RDATA0_axiSlave_S2M_R_RDATA_HardLink;
		axiSlave_S2M_R_RDATA(1) <= axiSlave_S2M_R_RDATA1_axiSlave_S2M_R_RDATA_HardLink;
		axiSlave_S2M_R_RDATA(2) <= axiSlave_S2M_R_RDATA2_axiSlave_S2M_R_RDATA_HardLink;
		axiSlave_S2M_R_RDATA(3) <= axiSlave_S2M_R_RDATA3_axiSlave_S2M_R_RDATA_HardLink;
		axiSlave_S2M_R_RRESP <= axiSlave_S2M_R_RRESP_axiSlave_S2M_R_RRESP_HardLink;
		axiSlave_S2M_R_RLAST <= axiSlave_S2M_R_RLAST_axiSlave_S2M_R_RLAST_HardLink;
		axiSlave_S2M_R_RUSER <= axiSlave_S2M_R_RUSER_axiSlave_S2M_R_RUSER_HardLink;
		axiSlave_S2M_R_RVALID <= axiSlave_S2M_R_RVALID_axiSlave_S2M_R_RVALID_HardLink;
		axiSlave_S2M_W_WREADY <= axiSlave_S2M_W_WREADY_axiSlave_S2M_W_WREADY_HardLink;
		axiSlave_outReadTXCompleting <= axiSlave_outReadTXCompleting_axiSlave_outReadTXCompleting_HardLink;
		axiSlave_outWriteTXCompleting <= axiSlave_outWriteTXCompleting_axiSlave_outWriteTXCompleting_HardLink;
		axiSlave_outARREADYConfirming <= axiSlave_outARREADYConfirming_axiSlave_outARREADYConfirming_HardLink;
		axiSlave_outARVALID <= axiSlave_outARVALID_axiSlave_outARVALID_HardLink;
		axiSlave_outARADDR <= axiSlave_outARADDR_axiSlave_outARADDR_HardLink;
		axiSlave_outAWREADYConfirming <= axiSlave_outAWREADYConfirming_axiSlave_outAWREADYConfirming_HardLink;
		axiSlave_outAWVALID <= axiSlave_outAWVALID_axiSlave_outAWVALID_HardLink;
		axiSlave_outAWADDR <= axiSlave_outAWADDR_axiSlave_outAWADDR_HardLink;
		axiSlave_outWREADYConfirming <= axiSlave_outWREADYConfirming_axiSlave_outWREADYConfirming_HardLink;
		axiSlave_outWVALID <= axiSlave_outWVALID_axiSlave_outWVALID_HardLink;
		axiSlave_outWDATA(0) <= axiSlave_outWDATA0_axiSlave_outWDATA_HardLink;
		axiSlave_outWDATA(1) <= axiSlave_outWDATA1_axiSlave_outWDATA_HardLink;
		axiSlave_outWDATA(2) <= axiSlave_outWDATA2_axiSlave_outWDATA_HardLink;
		axiSlave_outWDATA(3) <= axiSlave_outWDATA3_axiSlave_outWDATA_HardLink;
		axiSlave_outWSTRB <= axiSlave_outWSTRB_axiSlave_outWSTRB_HardLink;
	end process;
	-- [BEGIN USER ARCHITECTURE]
	-- [END USER ARCHITECTURE]
end architecture;
