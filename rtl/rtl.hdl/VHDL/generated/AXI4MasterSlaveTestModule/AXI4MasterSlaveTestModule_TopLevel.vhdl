-- PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
-- * This file was generated by Quokka FPGA Toolkit.
-- * Generated code is your property, do whatever you want with it
-- * Place custom code between [BEGIN USER ***] and [END USER ***].
-- * CAUTION: All code outside of [USER] scope is subject to regeneration.
-- * Bad things happen sometimes in developer's life,
--   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
-- * Internal structure of code is subject to change.
--   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
-- * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
-- * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
--
-- DISCLAIMER:
--   Code comes AS-IS, it is your responsibility to make sure it is working as expected
--   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
--
-- System configuration name is AXI4MasterSlaveTestModule_TopLevel, clock frequency is 1Hz, Top-level
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.Quokka.all;
entity AXI4MasterSlaveTestModule_TopLevel is
	port
	(
		-- [BEGIN USER PORTS]
		-- [END USER PORTS]
		Clock : in std_logic;
		Reset : in std_logic;
		InData : in unsigned (31 downto 0);
		MRE : in std_logic;
		MWE : in std_logic;
		SWE : in std_logic;
		WSTRB : in unsigned (3 downto 0);
		BVALID : out std_logic;
		RACK : out std_logic;
		ReadData : out unsigned (31 downto 0);
		RegisterData : out unsigned (31 downto 0);
		RVALID : out std_logic;
		WACK : out std_logic
	);
end entity;
-- FSM summary
-- Packages
architecture rtl of AXI4MasterSlaveTestModule_TopLevel is
	-- [BEGIN USER SIGNALS]
	-- [END USER SIGNALS]
	constant HiSignal : std_logic := '1';
	constant LoSignal : std_logic := '0';
	constant Zero : std_logic := '0';
	constant One : std_logic := '1';
	-- true is a reserved name, declaration skipped
	-- false is a reserved name, declaration skipped
	constant State_ReadDataDefault : unsigned(7 downto 0) := "00000000";
	constant AXI4MasterSlaveTestModule_L56F26T27_Expr : std_logic := '0';
	constant AXI4MasterSlaveTestModule_L57F26T27_Expr : std_logic := '0';
	signal Inputs_InData : unsigned(31 downto 0) := (others => '0');
	signal Inputs_MRE : std_logic := '0';
	signal Inputs_MWE : std_logic := '0';
	signal Inputs_SWE : std_logic := '0';
	signal Inputs_WSTRB : unsigned(3 downto 0) := (others => '0');
	signal master_ARADDR : unsigned(31 downto 0) := (others => '0');
	signal master_AWADDR : unsigned(31 downto 0) := (others => '0');
	signal master_RE : std_logic := '0';
	signal master_S2M : unsigned(73 downto 0) := (others => '0');
	signal master_WE : std_logic := '0';
	signal master_WSTRB : unsigned(3 downto 0) := (others => '0');
	signal master_M2S : unsigned(221 downto 0) := (others => '0');
	signal master_RACK : std_logic := '0';
	signal master_WACK : std_logic := '0';
	signal reg_inWE : std_logic := '0';
	signal reg_M2S : unsigned(221 downto 0) := (others => '0');
	signal reg_outACK : std_logic := '0';
	signal reg_outWritten : std_logic := '0';
	signal reg_S2M : unsigned(73 downto 0) := (others => '0');
	signal master_ARADDR_master_ARADDR_HardLink : unsigned(31 downto 0) := "00000000000000000000000000000000";
	signal master_AWADDR_master_AWADDR_HardLink : unsigned(31 downto 0) := "00000000000000000000000000000000";
	signal master_RE_master_RE_HardLink : std_logic := '0';
	signal master_S2M_master_S2M_HardLink : unsigned(73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000";
	signal master_WDATA0_master_WDATA_HardLink : unsigned(7 downto 0) := "00000000";
	signal master_WDATA1_master_WDATA_HardLink : unsigned(7 downto 0) := "00000000";
	signal master_WDATA2_master_WDATA_HardLink : unsigned(7 downto 0) := "00000000";
	signal master_WDATA3_master_WDATA_HardLink : unsigned(7 downto 0) := "00000000";
	signal master_WE_master_WE_HardLink : std_logic := '0';
	signal master_WSTRB_master_WSTRB_HardLink : unsigned(3 downto 0) := "0000";
	signal master_M2S_master_M2S_HardLink : unsigned(221 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
	signal master_RACK_master_RACK_HardLink : std_logic := '0';
	signal master_RDATA0_master_RDATA_HardLink : unsigned(7 downto 0) := "00000000";
	signal master_RDATA1_master_RDATA_HardLink : unsigned(7 downto 0) := "00000000";
	signal master_RDATA2_master_RDATA_HardLink : unsigned(7 downto 0) := "00000000";
	signal master_RDATA3_master_RDATA_HardLink : unsigned(7 downto 0) := "00000000";
	signal master_WACK_master_WACK_HardLink : std_logic := '0';
	signal reg_inWDATA0_reg_inWDATA_HardLink : unsigned(7 downto 0) := "00000000";
	signal reg_inWDATA1_reg_inWDATA_HardLink : unsigned(7 downto 0) := "00000000";
	signal reg_inWDATA2_reg_inWDATA_HardLink : unsigned(7 downto 0) := "00000000";
	signal reg_inWDATA3_reg_inWDATA_HardLink : unsigned(7 downto 0) := "00000000";
	signal reg_inWE_reg_inWE_HardLink : std_logic := '0';
	signal reg_M2S_reg_M2S_HardLink : unsigned(221 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
	signal reg_outACK_reg_outACK_HardLink : std_logic := '0';
	signal reg_outData0_reg_outData_HardLink : unsigned(7 downto 0) := "00000000";
	signal reg_outData1_reg_outData_HardLink : unsigned(7 downto 0) := "00000000";
	signal reg_outData2_reg_outData_HardLink : unsigned(7 downto 0) := "00000000";
	signal reg_outData3_reg_outData_HardLink : unsigned(7 downto 0) := "00000000";
	signal reg_outWritten_reg_outWritten_HardLink : std_logic := '0';
	signal reg_S2M_reg_S2M_HardLink : unsigned(73 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000";
	type State_ReadDataArray is array (0 to 3) of unsigned (7 downto 0);
	signal State_ReadData : State_ReadDataArray := (others => (others => '0'));
	type NextState_ReadDataArray is array (0 to 3) of unsigned (7 downto 0);
	signal NextState_ReadData : NextState_ReadDataArray := (others => (others => '0'));
	type master_WDATAArray is array (0 to 3) of unsigned (7 downto 0);
	signal master_WDATA : master_WDATAArray := (others => (others => '0'));
	type master_RDATAArray is array (0 to 3) of unsigned (7 downto 0);
	signal master_RDATA : master_RDATAArray := (others => (others => '0'));
	type reg_inWDATAArray is array (0 to 3) of unsigned (7 downto 0);
	signal reg_inWDATA : reg_inWDATAArray := (others => (others => '0'));
	type reg_outDataArray is array (0 to 3) of unsigned (7 downto 0);
	signal reg_outData : reg_outDataArray := (others => (others => '0'));
	signal BoardSignals : BoardSignalsType;
	signal InternalReset : std_logic := '0';
begin
	work.Quokka.BoardSignalsProc(BoardSignals, Clock, Reset, InternalReset);
	process (Clock, NextState_ReadData, Reset)
	begin
		if rising_edge(Clock) then
			if Reset = '1' then
				for State_ReadData_Iterator in 0 to 3 loop
					State_ReadData(State_ReadData_Iterator) <= State_ReadDataDefault;
				end loop;
			else
				for State_ReadData_Iterator in 0 to 3 loop
					State_ReadData(State_ReadData_Iterator) <= NextState_ReadData(State_ReadData_Iterator);
				end loop;
			end if;
		end if;
	end process;
	AXI4MasterSlaveTestModule_TopLevel_master : entity work.AXI4MasterSlaveTestModule_TopLevel_master
	port map
	(
		-- [BEGIN USER MAP FOR master]
		-- [END USER MAP FOR master]
		BoardSignals => BoardSignals,
		ARADDR => master_ARADDR_master_ARADDR_HardLink,
		AWADDR => master_AWADDR_master_AWADDR_HardLink,
		RE => master_RE_master_RE_HardLink,
		S2M => master_S2M_master_S2M_HardLink,
		WDATA0 => master_WDATA0_master_WDATA_HardLink,
		WDATA1 => master_WDATA1_master_WDATA_HardLink,
		WDATA2 => master_WDATA2_master_WDATA_HardLink,
		WDATA3 => master_WDATA3_master_WDATA_HardLink,
		WE => master_WE_master_WE_HardLink,
		WSTRB => master_WSTRB_master_WSTRB_HardLink,
		M2S => master_M2S_master_M2S_HardLink,
		RACK => master_RACK_master_RACK_HardLink,
		RDATA0 => master_RDATA0_master_RDATA_HardLink,
		RDATA1 => master_RDATA1_master_RDATA_HardLink,
		RDATA2 => master_RDATA2_master_RDATA_HardLink,
		RDATA3 => master_RDATA3_master_RDATA_HardLink,
		WACK => master_WACK_master_WACK_HardLink
	)
	;
	AXI4MasterSlaveTestModule_TopLevel_reg : entity work.AXI4MasterSlaveTestModule_TopLevel_reg
	port map
	(
		-- [BEGIN USER MAP FOR reg]
		-- [END USER MAP FOR reg]
		BoardSignals => BoardSignals,
		inWDATA0 => reg_inWDATA0_reg_inWDATA_HardLink,
		inWDATA1 => reg_inWDATA1_reg_inWDATA_HardLink,
		inWDATA2 => reg_inWDATA2_reg_inWDATA_HardLink,
		inWDATA3 => reg_inWDATA3_reg_inWDATA_HardLink,
		inWE => reg_inWE_reg_inWE_HardLink,
		M2S => reg_M2S_reg_M2S_HardLink,
		outACK => reg_outACK_reg_outACK_HardLink,
		outData0 => reg_outData0_reg_outData_HardLink,
		outData1 => reg_outData1_reg_outData_HardLink,
		outData2 => reg_outData2_reg_outData_HardLink,
		outData3 => reg_outData3_reg_outData_HardLink,
		outWritten => reg_outWritten_reg_outWritten_HardLink,
		S2M => reg_S2M_reg_S2M_HardLink
	)
	;
	process (reg_S2M, State_ReadData)
	begin
		for NextState_ReadData_Iterator in 0 to 3 loop
			NextState_ReadData(NextState_ReadData_Iterator) <= State_ReadData(NextState_ReadData_Iterator);
		end loop;
		if reg_S2M(52) = '1' then
			NextState_ReadData(0) <= reg_S2M(16 downto 9);
			NextState_ReadData(1) <= reg_S2M(24 downto 17);
			NextState_ReadData(2) <= reg_S2M(32 downto 25);
			NextState_ReadData(3) <= reg_S2M(40 downto 33);
		end if;
	end process;
	process (InData, Inputs_InData, Inputs_MRE, Inputs_MWE, Inputs_SWE, Inputs_WSTRB, master_ARADDR, master_AWADDR, master_M2S, master_M2S_master_M2S_HardLink, master_RACK, master_RACK_master_RACK_HardLink, master_RDATA0_master_RDATA_HardLink, master_RDATA1_master_RDATA_HardLink, master_RDATA2_master_RDATA_HardLink, master_RDATA3_master_RDATA_HardLink, master_RE, master_S2M, master_WACK, master_WACK_master_WACK_HardLink, master_WDATA, master_WE, master_WSTRB, MRE, MWE, reg_inWDATA, reg_inWE, reg_M2S, reg_outACK_reg_outACK_HardLink, reg_outData, reg_outData0_reg_outData_HardLink, reg_outData1_reg_outData_HardLink, reg_outData2_reg_outData_HardLink, reg_outData3_reg_outData_HardLink, reg_outWritten_reg_outWritten_HardLink, reg_S2M, reg_S2M_reg_S2M_HardLink, State_ReadData, SWE, WSTRB)
	begin
		Inputs_InData <= InData;
		Inputs_MRE <= MRE;
		Inputs_MWE <= MWE;
		Inputs_SWE <= SWE;
		Inputs_WSTRB <= WSTRB;
		reg_inWDATA(3) <= Inputs_InData(31 downto 24);
		reg_inWDATA(2) <= Inputs_InData(23 downto 16);
		reg_inWDATA(1) <= Inputs_InData(15 downto 8);
		reg_inWDATA(0) <= Inputs_InData(7 downto 0);
		reg_inWE <= Inputs_SWE;
		reg_M2S(221) <= master_M2S(221);
		reg_M2S(220 downto 167) <= master_M2S(220 downto 167);
		reg_M2S(166 downto 84) <= master_M2S(166 downto 84);
		reg_M2S(83) <= master_M2S(83);
		reg_M2S(82 downto 0) <= master_M2S(82 downto 0);
		master_ARADDR(31 downto 1) <= (others => '0');
		master_ARADDR(0) <= AXI4MasterSlaveTestModule_L56F26T27_Expr;
		master_AWADDR(31 downto 1) <= (others => '0');
		master_AWADDR(0) <= AXI4MasterSlaveTestModule_L57F26T27_Expr;
		master_RE <= Inputs_MRE;
		master_S2M(73) <= reg_S2M(73);
		master_S2M(72 downto 54) <= reg_S2M(72 downto 54);
		master_S2M(53) <= reg_S2M(53);
		master_S2M(52 downto 1) <= reg_S2M(52 downto 1);
		master_S2M(0) <= reg_S2M(0);
		master_WDATA(3) <= Inputs_InData(31 downto 24);
		master_WDATA(2) <= Inputs_InData(23 downto 16);
		master_WDATA(1) <= Inputs_InData(15 downto 8);
		master_WDATA(0) <= Inputs_InData(7 downto 0);
		master_WE <= Inputs_MWE;
		master_WSTRB <= Inputs_WSTRB;
		BVALID <= reg_S2M(72);
		RACK <= master_RACK;
		ReadData(31 downto 24) <= State_ReadData(3);
		ReadData(23 downto 16) <= State_ReadData(2);
		ReadData(15 downto 8) <= State_ReadData(1);
		ReadData(7 downto 0) <= State_ReadData(0);
		RegisterData(31 downto 24) <= reg_outData(3);
		RegisterData(23 downto 16) <= reg_outData(2);
		RegisterData(15 downto 8) <= reg_outData(1);
		RegisterData(7 downto 0) <= reg_outData(0);
		RVALID <= reg_S2M(52);
		WACK <= master_WACK;
		master_ARADDR_master_ARADDR_HardLink <= master_ARADDR;
		master_AWADDR_master_AWADDR_HardLink <= master_AWADDR;
		master_RE_master_RE_HardLink <= master_RE;
		master_S2M_master_S2M_HardLink <= master_S2M;
		master_WDATA0_master_WDATA_HardLink <= master_WDATA(0);
		master_WDATA1_master_WDATA_HardLink <= master_WDATA(1);
		master_WDATA2_master_WDATA_HardLink <= master_WDATA(2);
		master_WDATA3_master_WDATA_HardLink <= master_WDATA(3);
		master_WE_master_WE_HardLink <= master_WE;
		master_WSTRB_master_WSTRB_HardLink <= master_WSTRB;
		master_M2S <= master_M2S_master_M2S_HardLink;
		master_RACK <= master_RACK_master_RACK_HardLink;
		master_RDATA(0) <= master_RDATA0_master_RDATA_HardLink;
		master_RDATA(1) <= master_RDATA1_master_RDATA_HardLink;
		master_RDATA(2) <= master_RDATA2_master_RDATA_HardLink;
		master_RDATA(3) <= master_RDATA3_master_RDATA_HardLink;
		master_WACK <= master_WACK_master_WACK_HardLink;
		reg_inWDATA0_reg_inWDATA_HardLink <= reg_inWDATA(0);
		reg_inWDATA1_reg_inWDATA_HardLink <= reg_inWDATA(1);
		reg_inWDATA2_reg_inWDATA_HardLink <= reg_inWDATA(2);
		reg_inWDATA3_reg_inWDATA_HardLink <= reg_inWDATA(3);
		reg_inWE_reg_inWE_HardLink <= reg_inWE;
		reg_M2S_reg_M2S_HardLink <= reg_M2S;
		reg_outACK <= reg_outACK_reg_outACK_HardLink;
		reg_outData(0) <= reg_outData0_reg_outData_HardLink;
		reg_outData(1) <= reg_outData1_reg_outData_HardLink;
		reg_outData(2) <= reg_outData2_reg_outData_HardLink;
		reg_outData(3) <= reg_outData3_reg_outData_HardLink;
		reg_outWritten <= reg_outWritten_reg_outWritten_HardLink;
		reg_S2M <= reg_S2M_reg_S2M_HardLink;
	end process;
	-- [BEGIN USER ARCHITECTURE]
	-- [END USER ARCHITECTURE]
end architecture;
