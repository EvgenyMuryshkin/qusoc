-- PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
-- * This file was generated by Quokka FPGA Toolkit.
-- * Generated code is your property, do whatever you want with it
-- * Place custom code between [BEGIN USER ***] and [END USER ***].
-- * CAUTION: All code outside of [USER] scope is subject to regeneration.
-- * Bad things happen sometimes in developer's life,
--   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
-- * Internal structure of code is subject to change.
--   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
-- * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
-- * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
-- 
-- DISCLAIMER:
--   Code comes AS-IS, it is your responsibility to make sure it is working as expected
--   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
-- 
-- System configuration name is PipelinesTestModule_TopLevel, clock frequency is 1Hz, Top-level
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.Quokka.all;

entity PipelinesTestModule_TopLevel is
    port
    (
-- [BEGIN USER PORTS]
-- [END USER PORTS]

Clock : in  std_logic;
Reset : in  std_logic;
inReady : in  std_logic;
inData0 : in  unsigned(7 downto 0);
inData1 : in  unsigned(7 downto 0);
inData2 : in  unsigned(7 downto 0);
inData3 : in  unsigned(7 downto 0);
inData4 : in  unsigned(7 downto 0);
inData5 : in  unsigned(7 downto 0);
inData6 : in  unsigned(7 downto 0);
inData7 : in  unsigned(7 downto 0);
outReady : out  std_logic;
outSum : out  unsigned(15 downto 0)
    );
end entity;

-- FSM summary
-- Packages
architecture rtl of PipelinesTestModule_TopLevel is
-- [BEGIN USER SIGNALS]
-- [END USER SIGNALS]
constant HiSignal : std_logic := '1';
constant LoSignal : std_logic := '0';
constant Zero : std_logic := '0';
constant One : std_logic := '1';
constant true : std_logic := '1';
constant false : std_logic := '0';
constant PipelinesTestModule_L38F77T78_Expr : std_logic := '0';
signal Inputs_inReady : std_logic := '0';
signal Inputs_inData0 : unsigned(7 downto 0) := (others => '0');
signal Inputs_inData1 : unsigned(7 downto 0) := (others => '0');
signal Inputs_inData2 : unsigned(7 downto 0) := (others => '0');
signal Inputs_inData3 : unsigned(7 downto 0) := (others => '0');
signal Inputs_inData4 : unsigned(7 downto 0) := (others => '0');
signal Inputs_inData5 : unsigned(7 downto 0) := (others => '0');
signal Inputs_inData6 : unsigned(7 downto 0) := (others => '0');
signal Inputs_inData7 : unsigned(7 downto 0) := (others => '0');
signal Pipeline_NextState_ready : std_logic := '0';
signal Pipeline_NextState_sum : unsigned(15 downto 0) := (others => '0');
signal Pipeline_Inputs_inReady : std_logic := '0';
signal Pipeline_Inputs_inData0 : unsigned(7 downto 0) := (others => '0');
signal Pipeline_Inputs_inData1 : unsigned(7 downto 0) := (others => '0');
signal Pipeline_Inputs_inData2 : unsigned(7 downto 0) := (others => '0');
signal Pipeline_Inputs_inData3 : unsigned(7 downto 0) := (others => '0');
signal Pipeline_Inputs_inData4 : unsigned(7 downto 0) := (others => '0');
signal Pipeline_Inputs_inData5 : unsigned(7 downto 0) := (others => '0');
signal Pipeline_Inputs_inData6 : unsigned(7 downto 0) := (others => '0');
signal Pipeline_Inputs_inData7 : unsigned(7 downto 0) := (others => '0');
signal Pipeline_State_ready : std_logic := '0';
constant Pipeline_State_readyDefault : std_logic := '0';
signal Pipeline_State_sum : unsigned(15 downto 0)  := "0000000000000000";
constant Pipeline_State_sumDefault : unsigned(15 downto 0)  := "0000000000000000";
begin
process (Clock, Pipeline_NextState_ready, Pipeline_NextState_sum, Reset)
begin
if rising_edge(Clock) then
if ( Reset = '1' ) then
Pipeline_State_ready <= Pipeline_State_readyDefault;
Pipeline_State_sum <= Pipeline_State_sumDefault;
else
Pipeline_State_ready <= Pipeline_NextState_ready;
Pipeline_State_sum <= Pipeline_NextState_sum;
end if;
end if;
end process;
process(Pipeline_Inputs_inReady, Pipeline_State_ready, Pipeline_State_sum)
begin
Pipeline_NextState_ready <= Pipeline_State_ready;
Pipeline_NextState_sum <= Pipeline_State_sum;
Pipeline_NextState_ready <= Pipeline_Inputs_inReady;
Pipeline_NextState_sum <= (0 => PipelinesTestModule_L38F77T78_Expr, others => '0');
end process;
process(inData0, inData1, inData2, inData3, inData4, inData5, inData6, inData7, Inputs_inData0, Inputs_inData1, Inputs_inData2, Inputs_inData3, Inputs_inData4, Inputs_inData5, Inputs_inData6, Inputs_inData7, Inputs_inReady, inReady, Pipeline_State_ready, Pipeline_State_sum)
begin
Inputs_inReady <= inReady;
Inputs_inData0 <= inData0;
Inputs_inData1 <= inData1;
Inputs_inData2 <= inData2;
Inputs_inData3 <= inData3;
Inputs_inData4 <= inData4;
Inputs_inData5 <= inData5;
Inputs_inData6 <= inData6;
Inputs_inData7 <= inData7;
outReady <= Pipeline_State_ready;
outSum <= Pipeline_State_sum;
Pipeline_Inputs_inReady <= Inputs_inReady;
Pipeline_Inputs_inData0 <= Inputs_inData0;
Pipeline_Inputs_inData1 <= Inputs_inData1;
Pipeline_Inputs_inData2 <= Inputs_inData2;
Pipeline_Inputs_inData3 <= Inputs_inData3;
Pipeline_Inputs_inData4 <= Inputs_inData4;
Pipeline_Inputs_inData5 <= Inputs_inData5;
Pipeline_Inputs_inData6 <= Inputs_inData6;
Pipeline_Inputs_inData7 <= Inputs_inData7;
end process;
-- [BEGIN USER ARCHITECTURE]
-- [END USER ARCHITECTURE]
end architecture;
