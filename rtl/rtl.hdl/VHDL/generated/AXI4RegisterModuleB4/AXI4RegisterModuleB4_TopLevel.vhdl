-- PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
-- * This file was generated by Quokka FPGA Toolkit.
-- * Generated code is your property, do whatever you want with it
-- * Place custom code between [BEGIN USER ***] and [END USER ***].
-- * CAUTION: All code outside of [USER] scope is subject to regeneration.
-- * Bad things happen sometimes in developer's life,
--   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
-- * Internal structure of code is subject to change.
--   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
-- * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
-- * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
--
-- DISCLAIMER:
--   Code comes AS-IS, it is your responsibility to make sure it is working as expected
--   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
--
-- System configuration name is AXI4RegisterModuleB4_TopLevel, clock frequency is 1Hz, Top-level
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.Quokka.all;
entity AXI4RegisterModuleB4_TopLevel is
	port
	(
		-- [BEGIN USER PORTS]
		-- [END USER PORTS]
		Clock : in std_logic;
		Reset : in std_logic;
		M2S_AR_ARID : in unsigned (7 downto 0);
		M2S_AR_ARADDR : in unsigned (31 downto 0);
		M2S_AR_ARLEN : in unsigned (7 downto 0);
		M2S_AR_ARSIZE : in unsigned (2 downto 0);
		M2S_AR_ARBURST : in unsigned (1 downto 0);
		M2S_AR_ARLOCK : in unsigned (1 downto 0);
		M2S_AR_ARCACHE : in unsigned (3 downto 0);
		M2S_AR_ARPROT : in unsigned (2 downto 0);
		M2S_AR_ARQOS : in unsigned (3 downto 0);
		M2S_AR_ARREGION : in unsigned (7 downto 0);
		M2S_AR_ARUSER : in unsigned (7 downto 0);
		M2S_AR_ARVALID : in std_logic;
		M2S_R_RREADY : in std_logic;
		M2S_AW_AWID : in unsigned (7 downto 0);
		M2S_AW_AWADDR : in unsigned (31 downto 0);
		M2S_AW_AWLEN : in unsigned (7 downto 0);
		M2S_AW_AWSIZE : in unsigned (2 downto 0);
		M2S_AW_AWBURST : in unsigned (1 downto 0);
		M2S_AW_AWLOCK : in unsigned (1 downto 0);
		M2S_AW_AWCACHE : in unsigned (3 downto 0);
		M2S_AW_AWPROT : in unsigned (2 downto 0);
		M2S_AW_AWQOS : in unsigned (3 downto 0);
		M2S_AW_AWREGION : in unsigned (7 downto 0);
		M2S_AW_AWUSER : in unsigned (7 downto 0);
		M2S_AW_AWVALID : in std_logic;
		M2S_W_WID : in unsigned (7 downto 0);
		M2S_W_WDATA0 : in unsigned (7 downto 0);
		M2S_W_WDATA1 : in unsigned (7 downto 0);
		M2S_W_WDATA2 : in unsigned (7 downto 0);
		M2S_W_WDATA3 : in unsigned (7 downto 0);
		M2S_W_WSTRB : in unsigned (3 downto 0);
		M2S_W_WLAST : in std_logic;
		M2S_W_WUSER : in unsigned (7 downto 0);
		M2S_W_WVALID : in std_logic;
		M2S_B_BREADY : in std_logic;
		WE : in std_logic;
		WDATA0 : in unsigned (7 downto 0);
		WDATA1 : in unsigned (7 downto 0);
		WDATA2 : in unsigned (7 downto 0);
		WDATA3 : in unsigned (7 downto 0);
		OutData0 : out unsigned (7 downto 0);
		OutData1 : out unsigned (7 downto 0);
		OutData2 : out unsigned (7 downto 0);
		OutData3 : out unsigned (7 downto 0);
		OutACK : out std_logic;
		S2M_AR_ARREADY : out std_logic;
		S2M_AW_AWREADY : out std_logic;
		S2M_B_BID : out unsigned (7 downto 0);
		S2M_B_BRESP : out unsigned (1 downto 0);
		S2M_B_BUSER : out unsigned (7 downto 0);
		S2M_B_BVALID : out std_logic;
		S2M_R_RID : out unsigned (7 downto 0);
		S2M_R_RDATA0 : out unsigned (7 downto 0);
		S2M_R_RDATA1 : out unsigned (7 downto 0);
		S2M_R_RDATA2 : out unsigned (7 downto 0);
		S2M_R_RDATA3 : out unsigned (7 downto 0);
		S2M_R_RRESP : out unsigned (1 downto 0);
		S2M_R_RLAST : out std_logic;
		S2M_R_RUSER : out unsigned (7 downto 0);
		S2M_R_RVALID : out std_logic;
		S2M_W_WREADY : out std_logic
	);
end entity;
-- FSM summary
-- Packages
architecture rtl of AXI4RegisterModuleB4_TopLevel is
	-- [BEGIN USER SIGNALS]
	-- [END USER SIGNALS]
	constant HiSignal : std_logic := '1';
	constant LoSignal : std_logic := '0';
	constant Zero : std_logic := '0';
	constant One : std_logic := '1';
	constant true : std_logic := '1';
	constant false : std_logic := '0';
	constant size : unsigned(1 downto 0) := "10";
	constant AXI4RegisterModule_L56F24T28_Expr : std_logic := '1';
	constant AXI4RegisterModule_L58F24T28_Expr : std_logic := '1';
	constant AXI4RegisterModule_L62F9L75T10_AXI4RegisterModule_L68F13L74T14_AXI4RegisterModule_L69F17L73T18_0_w : std_logic := '0';
	constant AXI4RegisterModule_L62F9L75T10_AXI4RegisterModule_L68F13L74T14_AXI4RegisterModule_L69F17L73T18_1_w : std_logic := '1';
	constant AXI4RegisterModule_L62F9L75T10_AXI4RegisterModule_L68F13L74T14_AXI4RegisterModule_L69F17L73T18_2_w : unsigned(1 downto 0) := "10";
	constant AXI4RegisterModule_L62F9L75T10_AXI4RegisterModule_L68F13L74T14_AXI4RegisterModule_L69F17L73T18_3_w : unsigned(1 downto 0) := "11";
	signal Inputs_M2S_AR_ARID : unsigned(7 downto 0) := (others => '0');
	signal Inputs_M2S_AR_ARADDR : unsigned(31 downto 0) := (others => '0');
	signal Inputs_M2S_AR_ARLEN : unsigned(7 downto 0) := (others => '0');
	signal Inputs_M2S_AR_ARSIZE : unsigned(2 downto 0) := (others => '0');
	signal Inputs_M2S_AR_ARBURST : unsigned(1 downto 0) := (others => '0');
	signal Inputs_M2S_AR_ARLOCK : unsigned(1 downto 0) := (others => '0');
	signal Inputs_M2S_AR_ARCACHE : unsigned(3 downto 0) := (others => '0');
	signal Inputs_M2S_AR_ARPROT : unsigned(2 downto 0) := (others => '0');
	signal Inputs_M2S_AR_ARQOS : unsigned(3 downto 0) := (others => '0');
	signal Inputs_M2S_AR_ARREGION : unsigned(7 downto 0) := (others => '0');
	signal Inputs_M2S_AR_ARUSER : unsigned(7 downto 0) := (others => '0');
	signal Inputs_M2S_AR_ARVALID : std_logic := '0';
	signal Inputs_M2S_R_RREADY : std_logic := '0';
	signal Inputs_M2S_AW_AWID : unsigned(7 downto 0) := (others => '0');
	signal Inputs_M2S_AW_AWADDR : unsigned(31 downto 0) := (others => '0');
	signal Inputs_M2S_AW_AWLEN : unsigned(7 downto 0) := (others => '0');
	signal Inputs_M2S_AW_AWSIZE : unsigned(2 downto 0) := (others => '0');
	signal Inputs_M2S_AW_AWBURST : unsigned(1 downto 0) := (others => '0');
	signal Inputs_M2S_AW_AWLOCK : unsigned(1 downto 0) := (others => '0');
	signal Inputs_M2S_AW_AWCACHE : unsigned(3 downto 0) := (others => '0');
	signal Inputs_M2S_AW_AWPROT : unsigned(2 downto 0) := (others => '0');
	signal Inputs_M2S_AW_AWQOS : unsigned(3 downto 0) := (others => '0');
	signal Inputs_M2S_AW_AWREGION : unsigned(7 downto 0) := (others => '0');
	signal Inputs_M2S_AW_AWUSER : unsigned(7 downto 0) := (others => '0');
	signal Inputs_M2S_AW_AWVALID : std_logic := '0';
	signal Inputs_M2S_W_WID : unsigned(7 downto 0) := (others => '0');
	signal Inputs_M2S_W_WSTRB : unsigned(3 downto 0) := (others => '0');
	signal Inputs_M2S_W_WLAST : std_logic := '0';
	signal Inputs_M2S_W_WUSER : unsigned(7 downto 0) := (others => '0');
	signal Inputs_M2S_W_WVALID : std_logic := '0';
	signal Inputs_M2S_B_BREADY : std_logic := '0';
	signal Inputs_WE : std_logic := '0';
	signal axiSlave_M2S_AR_ARID : unsigned(7 downto 0) := (others => '0');
	signal axiSlave_M2S_AR_ARADDR : unsigned(31 downto 0) := (others => '0');
	signal axiSlave_M2S_AR_ARLEN : unsigned(7 downto 0) := (others => '0');
	signal axiSlave_M2S_AR_ARSIZE : unsigned(2 downto 0) := (others => '0');
	signal axiSlave_M2S_AR_ARBURST : unsigned(1 downto 0) := (others => '0');
	signal axiSlave_M2S_AR_ARLOCK : unsigned(1 downto 0) := (others => '0');
	signal axiSlave_M2S_AR_ARCACHE : unsigned(3 downto 0) := (others => '0');
	signal axiSlave_M2S_AR_ARPROT : unsigned(2 downto 0) := (others => '0');
	signal axiSlave_M2S_AR_ARQOS : unsigned(3 downto 0) := (others => '0');
	signal axiSlave_M2S_AR_ARREGION : unsigned(7 downto 0) := (others => '0');
	signal axiSlave_M2S_AR_ARUSER : unsigned(7 downto 0) := (others => '0');
	signal axiSlave_M2S_AR_ARVALID : std_logic := '0';
	signal axiSlave_M2S_R_RREADY : std_logic := '0';
	signal axiSlave_M2S_AW_AWID : unsigned(7 downto 0) := (others => '0');
	signal axiSlave_M2S_AW_AWADDR : unsigned(31 downto 0) := (others => '0');
	signal axiSlave_M2S_AW_AWLEN : unsigned(7 downto 0) := (others => '0');
	signal axiSlave_M2S_AW_AWSIZE : unsigned(2 downto 0) := (others => '0');
	signal axiSlave_M2S_AW_AWBURST : unsigned(1 downto 0) := (others => '0');
	signal axiSlave_M2S_AW_AWLOCK : unsigned(1 downto 0) := (others => '0');
	signal axiSlave_M2S_AW_AWCACHE : unsigned(3 downto 0) := (others => '0');
	signal axiSlave_M2S_AW_AWPROT : unsigned(2 downto 0) := (others => '0');
	signal axiSlave_M2S_AW_AWQOS : unsigned(3 downto 0) := (others => '0');
	signal axiSlave_M2S_AW_AWREGION : unsigned(7 downto 0) := (others => '0');
	signal axiSlave_M2S_AW_AWUSER : unsigned(7 downto 0) := (others => '0');
	signal axiSlave_M2S_AW_AWVALID : std_logic := '0';
	signal axiSlave_M2S_W_WID : unsigned(7 downto 0) := (others => '0');
	signal axiSlave_M2S_W_WSTRB : unsigned(3 downto 0) := (others => '0');
	signal axiSlave_M2S_W_WLAST : std_logic := '0';
	signal axiSlave_M2S_W_WUSER : unsigned(7 downto 0) := (others => '0');
	signal axiSlave_M2S_W_WVALID : std_logic := '0';
	signal axiSlave_M2S_B_BREADY : std_logic := '0';
	signal axiSlave_RACK : std_logic := '0';
	signal axiSlave_WACK : std_logic := '0';
	signal axiSlave_S2M_AR_ARREADY : std_logic := '0';
	signal axiSlave_S2M_AW_AWREADY : std_logic := '0';
	signal axiSlave_S2M_B_BID : unsigned(7 downto 0) := (others => '0');
	signal axiSlave_S2M_B_BRESP : unsigned(1 downto 0) := (others => '0');
	signal axiSlave_S2M_B_BUSER : unsigned(7 downto 0) := (others => '0');
	signal axiSlave_S2M_B_BVALID : std_logic := '0';
	signal axiSlave_S2M_R_RID : unsigned(7 downto 0) := (others => '0');
	signal axiSlave_S2M_R_RRESP : unsigned(1 downto 0) := (others => '0');
	signal axiSlave_S2M_R_RLAST : std_logic := '0';
	signal axiSlave_S2M_R_RUSER : unsigned(7 downto 0) := (others => '0');
	signal axiSlave_S2M_R_RVALID : std_logic := '0';
	signal axiSlave_S2M_W_WREADY : std_logic := '0';
	signal axiSlave_WSTRB : unsigned(3 downto 0) := (others => '0');
	signal axiSlave_WVALID : std_logic := '0';
	signal axiSlave_RVALID : std_logic := '0';
	signal axiSlave_ARADDR : unsigned(31 downto 0) := (others => '0');
	signal axiSlave_AWADDR : unsigned(31 downto 0) := (others => '0');
	signal State_bytesDefault : unsigned(7 downto 0) := "00000000";
	signal axiSlaveM2S_AR_ARIDaxiSlave_M2S_AR_ARIDHardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlaveM2S_AR_ARADDRaxiSlave_M2S_AR_ARADDRHardLink : unsigned(31 downto 0) := "00000000000000000000000000000000";
	signal axiSlaveM2S_AR_ARLENaxiSlave_M2S_AR_ARLENHardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlaveM2S_AR_ARSIZEaxiSlave_M2S_AR_ARSIZEHardLink : unsigned(2 downto 0) := "000";
	signal axiSlaveM2S_AR_ARBURSTaxiSlave_M2S_AR_ARBURSTHardLink : unsigned(1 downto 0) := "00";
	signal axiSlaveM2S_AR_ARLOCKaxiSlave_M2S_AR_ARLOCKHardLink : unsigned(1 downto 0) := "00";
	signal axiSlaveM2S_AR_ARCACHEaxiSlave_M2S_AR_ARCACHEHardLink : unsigned(3 downto 0) := "0000";
	signal axiSlaveM2S_AR_ARPROTaxiSlave_M2S_AR_ARPROTHardLink : unsigned(2 downto 0) := "000";
	signal axiSlaveM2S_AR_ARQOSaxiSlave_M2S_AR_ARQOSHardLink : unsigned(3 downto 0) := "0000";
	signal axiSlaveM2S_AR_ARREGIONaxiSlave_M2S_AR_ARREGIONHardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlaveM2S_AR_ARUSERaxiSlave_M2S_AR_ARUSERHardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlaveM2S_AR_ARVALIDaxiSlave_M2S_AR_ARVALIDHardLink : std_logic := '0';
	signal axiSlaveM2S_R_RREADYaxiSlave_M2S_R_RREADYHardLink : std_logic := '0';
	signal axiSlaveM2S_AW_AWIDaxiSlave_M2S_AW_AWIDHardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlaveM2S_AW_AWADDRaxiSlave_M2S_AW_AWADDRHardLink : unsigned(31 downto 0) := "00000000000000000000000000000000";
	signal axiSlaveM2S_AW_AWLENaxiSlave_M2S_AW_AWLENHardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlaveM2S_AW_AWSIZEaxiSlave_M2S_AW_AWSIZEHardLink : unsigned(2 downto 0) := "000";
	signal axiSlaveM2S_AW_AWBURSTaxiSlave_M2S_AW_AWBURSTHardLink : unsigned(1 downto 0) := "00";
	signal axiSlaveM2S_AW_AWLOCKaxiSlave_M2S_AW_AWLOCKHardLink : unsigned(1 downto 0) := "00";
	signal axiSlaveM2S_AW_AWCACHEaxiSlave_M2S_AW_AWCACHEHardLink : unsigned(3 downto 0) := "0000";
	signal axiSlaveM2S_AW_AWPROTaxiSlave_M2S_AW_AWPROTHardLink : unsigned(2 downto 0) := "000";
	signal axiSlaveM2S_AW_AWQOSaxiSlave_M2S_AW_AWQOSHardLink : unsigned(3 downto 0) := "0000";
	signal axiSlaveM2S_AW_AWREGIONaxiSlave_M2S_AW_AWREGIONHardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlaveM2S_AW_AWUSERaxiSlave_M2S_AW_AWUSERHardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlaveM2S_AW_AWVALIDaxiSlave_M2S_AW_AWVALIDHardLink : std_logic := '0';
	signal axiSlaveM2S_W_WIDaxiSlave_M2S_W_WIDHardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlaveM2S_W_WDATA0axiSlave_M2S_W_WDATAHardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlaveM2S_W_WDATA1axiSlave_M2S_W_WDATAHardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlaveM2S_W_WDATA2axiSlave_M2S_W_WDATAHardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlaveM2S_W_WDATA3axiSlave_M2S_W_WDATAHardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlaveM2S_W_WSTRBaxiSlave_M2S_W_WSTRBHardLink : unsigned(3 downto 0) := "0000";
	signal axiSlaveM2S_W_WLASTaxiSlave_M2S_W_WLASTHardLink : std_logic := '0';
	signal axiSlaveM2S_W_WUSERaxiSlave_M2S_W_WUSERHardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlaveM2S_W_WVALIDaxiSlave_M2S_W_WVALIDHardLink : std_logic := '0';
	signal axiSlaveM2S_B_BREADYaxiSlave_M2S_B_BREADYHardLink : std_logic := '0';
	signal axiSlaveRDATA0axiSlave_RDATAHardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlaveRDATA1axiSlave_RDATAHardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlaveRDATA2axiSlave_RDATAHardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlaveRDATA3axiSlave_RDATAHardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlaveRACKaxiSlave_RACKHardLink : std_logic := '0';
	signal axiSlaveWACKaxiSlave_WACKHardLink : std_logic := '0';
	signal axiSlaveS2M_AR_ARREADYaxiSlave_S2M_AR_ARREADYHardLink : std_logic := '0';
	signal axiSlaveS2M_AW_AWREADYaxiSlave_S2M_AW_AWREADYHardLink : std_logic := '0';
	signal axiSlaveS2M_B_BIDaxiSlave_S2M_B_BIDHardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlaveS2M_B_BRESPaxiSlave_S2M_B_BRESPHardLink : unsigned(1 downto 0) := "00";
	signal axiSlaveS2M_B_BUSERaxiSlave_S2M_B_BUSERHardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlaveS2M_B_BVALIDaxiSlave_S2M_B_BVALIDHardLink : std_logic := '0';
	signal axiSlaveS2M_R_RIDaxiSlave_S2M_R_RIDHardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlaveS2M_R_RDATA0axiSlave_S2M_R_RDATAHardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlaveS2M_R_RDATA1axiSlave_S2M_R_RDATAHardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlaveS2M_R_RDATA2axiSlave_S2M_R_RDATAHardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlaveS2M_R_RDATA3axiSlave_S2M_R_RDATAHardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlaveS2M_R_RRESPaxiSlave_S2M_R_RRESPHardLink : unsigned(1 downto 0) := "00";
	signal axiSlaveS2M_R_RLASTaxiSlave_S2M_R_RLASTHardLink : std_logic := '0';
	signal axiSlaveS2M_R_RUSERaxiSlave_S2M_R_RUSERHardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlaveS2M_R_RVALIDaxiSlave_S2M_R_RVALIDHardLink : std_logic := '0';
	signal axiSlaveS2M_W_WREADYaxiSlave_S2M_W_WREADYHardLink : std_logic := '0';
	signal axiSlaveWSTRBaxiSlave_WSTRBHardLink : unsigned(3 downto 0) := "0000";
	signal axiSlaveWDATA0axiSlave_WDATAHardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlaveWDATA1axiSlave_WDATAHardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlaveWDATA2axiSlave_WDATAHardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlaveWDATA3axiSlave_WDATAHardLink : unsigned(7 downto 0) := "00000000";
	signal axiSlaveWVALIDaxiSlave_WVALIDHardLink : std_logic := '0';
	signal axiSlaveRVALIDaxiSlave_RVALIDHardLink : std_logic := '0';
	signal axiSlaveARADDRaxiSlave_ARADDRHardLink : unsigned(31 downto 0) := "00000000000000000000000000000000";
	signal axiSlaveAWADDRaxiSlave_AWADDRHardLink : unsigned(31 downto 0) := "00000000000000000000000000000000";
	type Inputs_M2S_W_WDATAArray is array (0 to 3) of unsigned (7 downto 0);
	signal Inputs_M2S_W_WDATA : Inputs_M2S_W_WDATAArray := (others => (others => '0'));
	type Inputs_WDATAArray is array (0 to 3) of unsigned (7 downto 0);
	signal Inputs_WDATA : Inputs_WDATAArray := (others => (others => '0'));
	type State_bytesArray is array (0 to 3) of unsigned (7 downto 0);
	signal State_bytes : State_bytesArray := (others => (others => '0'));
	type NextState_bytesArray is array (0 to 3) of unsigned (7 downto 0);
	signal NextState_bytes : NextState_bytesArray := (others => (others => '0'));
	type axiSlave_M2S_W_WDATAArray is array (0 to 3) of unsigned (7 downto 0);
	signal axiSlave_M2S_W_WDATA : axiSlave_M2S_W_WDATAArray := (others => (others => '0'));
	type axiSlave_RDATAArray is array (0 to 3) of unsigned (7 downto 0);
	signal axiSlave_RDATA : axiSlave_RDATAArray := (others => (others => '0'));
	type axiSlave_S2M_R_RDATAArray is array (0 to 3) of unsigned (7 downto 0);
	signal axiSlave_S2M_R_RDATA : axiSlave_S2M_R_RDATAArray := (others => (others => '0'));
	type axiSlave_WDATAArray is array (0 to 3) of unsigned (7 downto 0);
	signal axiSlave_WDATA : axiSlave_WDATAArray := (others => (others => '0'));
	signal BoardSignals : BoardSignalsType;
	signal InternalReset : std_logic := '0';
begin
	work.Quokka.BoardSignalsProc(BoardSignals, Clock, Reset, InternalReset);
	process (Clock, NextState_bytes, Reset, State_bytesDefault)
	begin
		if rising_edge(Clock) then
			if Reset = '1' then
				for State_bytes_Iterator in 0 to 3 loop
					State_bytes(State_bytes_Iterator) <= State_bytesDefault;
				end loop;
			else
				for State_bytes_Iterator in 0 to 3 loop
					State_bytes(State_bytes_Iterator) <= NextState_bytes(State_bytes_Iterator);
				end loop;
			end if;
		end if;
	end process;
	AXI4RegisterModuleB4_TopLevel_AXI4RegisterModuleB4_axiSlave : entity work.AXI4RegisterModuleB4_TopLevel_AXI4RegisterModuleB4_axiSlave
	port map
	(
		-- [BEGIN USER MAP FOR axiSlave]
		-- [END USER MAP FOR axiSlave]
BoardSignals => BoardSignals,
M2S_AR_ARID => axiSlaveM2S_AR_ARIDaxiSlave_M2S_AR_ARIDHardLink,
M2S_AR_ARADDR => axiSlaveM2S_AR_ARADDRaxiSlave_M2S_AR_ARADDRHardLink,
M2S_AR_ARLEN => axiSlaveM2S_AR_ARLENaxiSlave_M2S_AR_ARLENHardLink,
M2S_AR_ARSIZE => axiSlaveM2S_AR_ARSIZEaxiSlave_M2S_AR_ARSIZEHardLink,
M2S_AR_ARBURST => axiSlaveM2S_AR_ARBURSTaxiSlave_M2S_AR_ARBURSTHardLink,
M2S_AR_ARLOCK => axiSlaveM2S_AR_ARLOCKaxiSlave_M2S_AR_ARLOCKHardLink,
M2S_AR_ARCACHE => axiSlaveM2S_AR_ARCACHEaxiSlave_M2S_AR_ARCACHEHardLink,
M2S_AR_ARPROT => axiSlaveM2S_AR_ARPROTaxiSlave_M2S_AR_ARPROTHardLink,
M2S_AR_ARQOS => axiSlaveM2S_AR_ARQOSaxiSlave_M2S_AR_ARQOSHardLink,
M2S_AR_ARREGION => axiSlaveM2S_AR_ARREGIONaxiSlave_M2S_AR_ARREGIONHardLink,
M2S_AR_ARUSER => axiSlaveM2S_AR_ARUSERaxiSlave_M2S_AR_ARUSERHardLink,
M2S_AR_ARVALID => axiSlaveM2S_AR_ARVALIDaxiSlave_M2S_AR_ARVALIDHardLink,
M2S_R_RREADY => axiSlaveM2S_R_RREADYaxiSlave_M2S_R_RREADYHardLink,
M2S_AW_AWID => axiSlaveM2S_AW_AWIDaxiSlave_M2S_AW_AWIDHardLink,
M2S_AW_AWADDR => axiSlaveM2S_AW_AWADDRaxiSlave_M2S_AW_AWADDRHardLink,
M2S_AW_AWLEN => axiSlaveM2S_AW_AWLENaxiSlave_M2S_AW_AWLENHardLink,
M2S_AW_AWSIZE => axiSlaveM2S_AW_AWSIZEaxiSlave_M2S_AW_AWSIZEHardLink,
M2S_AW_AWBURST => axiSlaveM2S_AW_AWBURSTaxiSlave_M2S_AW_AWBURSTHardLink,
M2S_AW_AWLOCK => axiSlaveM2S_AW_AWLOCKaxiSlave_M2S_AW_AWLOCKHardLink,
M2S_AW_AWCACHE => axiSlaveM2S_AW_AWCACHEaxiSlave_M2S_AW_AWCACHEHardLink,
M2S_AW_AWPROT => axiSlaveM2S_AW_AWPROTaxiSlave_M2S_AW_AWPROTHardLink,
M2S_AW_AWQOS => axiSlaveM2S_AW_AWQOSaxiSlave_M2S_AW_AWQOSHardLink,
M2S_AW_AWREGION => axiSlaveM2S_AW_AWREGIONaxiSlave_M2S_AW_AWREGIONHardLink,
M2S_AW_AWUSER => axiSlaveM2S_AW_AWUSERaxiSlave_M2S_AW_AWUSERHardLink,
M2S_AW_AWVALID => axiSlaveM2S_AW_AWVALIDaxiSlave_M2S_AW_AWVALIDHardLink,
M2S_W_WID => axiSlaveM2S_W_WIDaxiSlave_M2S_W_WIDHardLink,
M2S_W_WDATA0 => axiSlaveM2S_W_WDATA0axiSlave_M2S_W_WDATAHardLink,
M2S_W_WDATA1 => axiSlaveM2S_W_WDATA1axiSlave_M2S_W_WDATAHardLink,
M2S_W_WDATA2 => axiSlaveM2S_W_WDATA2axiSlave_M2S_W_WDATAHardLink,
M2S_W_WDATA3 => axiSlaveM2S_W_WDATA3axiSlave_M2S_W_WDATAHardLink,
M2S_W_WSTRB => axiSlaveM2S_W_WSTRBaxiSlave_M2S_W_WSTRBHardLink,
M2S_W_WLAST => axiSlaveM2S_W_WLASTaxiSlave_M2S_W_WLASTHardLink,
M2S_W_WUSER => axiSlaveM2S_W_WUSERaxiSlave_M2S_W_WUSERHardLink,
M2S_W_WVALID => axiSlaveM2S_W_WVALIDaxiSlave_M2S_W_WVALIDHardLink,
M2S_B_BREADY => axiSlaveM2S_B_BREADYaxiSlave_M2S_B_BREADYHardLink,
RDATA0 => axiSlaveRDATA0axiSlave_RDATAHardLink,
RDATA1 => axiSlaveRDATA1axiSlave_RDATAHardLink,
RDATA2 => axiSlaveRDATA2axiSlave_RDATAHardLink,
RDATA3 => axiSlaveRDATA3axiSlave_RDATAHardLink,
RACK => axiSlaveRACKaxiSlave_RACKHardLink,
WACK => axiSlaveWACKaxiSlave_WACKHardLink,
S2M_AR_ARREADY => axiSlaveS2M_AR_ARREADYaxiSlave_S2M_AR_ARREADYHardLink,
S2M_AW_AWREADY => axiSlaveS2M_AW_AWREADYaxiSlave_S2M_AW_AWREADYHardLink,
S2M_B_BID => axiSlaveS2M_B_BIDaxiSlave_S2M_B_BIDHardLink,
S2M_B_BRESP => axiSlaveS2M_B_BRESPaxiSlave_S2M_B_BRESPHardLink,
S2M_B_BUSER => axiSlaveS2M_B_BUSERaxiSlave_S2M_B_BUSERHardLink,
S2M_B_BVALID => axiSlaveS2M_B_BVALIDaxiSlave_S2M_B_BVALIDHardLink,
S2M_R_RID => axiSlaveS2M_R_RIDaxiSlave_S2M_R_RIDHardLink,
S2M_R_RDATA0 => axiSlaveS2M_R_RDATA0axiSlave_S2M_R_RDATAHardLink,
S2M_R_RDATA1 => axiSlaveS2M_R_RDATA1axiSlave_S2M_R_RDATAHardLink,
S2M_R_RDATA2 => axiSlaveS2M_R_RDATA2axiSlave_S2M_R_RDATAHardLink,
S2M_R_RDATA3 => axiSlaveS2M_R_RDATA3axiSlave_S2M_R_RDATAHardLink,
S2M_R_RRESP => axiSlaveS2M_R_RRESPaxiSlave_S2M_R_RRESPHardLink,
S2M_R_RLAST => axiSlaveS2M_R_RLASTaxiSlave_S2M_R_RLASTHardLink,
S2M_R_RUSER => axiSlaveS2M_R_RUSERaxiSlave_S2M_R_RUSERHardLink,
S2M_R_RVALID => axiSlaveS2M_R_RVALIDaxiSlave_S2M_R_RVALIDHardLink,
S2M_W_WREADY => axiSlaveS2M_W_WREADYaxiSlave_S2M_W_WREADYHardLink,
WSTRB => axiSlaveWSTRBaxiSlave_WSTRBHardLink,
WDATA0 => axiSlaveWDATA0axiSlave_WDATAHardLink,
WDATA1 => axiSlaveWDATA1axiSlave_WDATAHardLink,
WDATA2 => axiSlaveWDATA2axiSlave_WDATAHardLink,
WDATA3 => axiSlaveWDATA3axiSlave_WDATAHardLink,
WVALID => axiSlaveWVALIDaxiSlave_WVALIDHardLink,
RVALID => axiSlaveRVALIDaxiSlave_RVALIDHardLink,
ARADDR => axiSlaveARADDRaxiSlave_ARADDRHardLink,
AWADDR => axiSlaveAWADDRaxiSlave_AWADDRHardLink
	);
	process (axiSlave_WDATA, axiSlave_WSTRB, axiSlave_WVALID, Inputs_WDATA, Inputs_WE, State_bytes)
	begin
		for NextState_bytes_Iterator in 0 to 3 loop
			NextState_bytes(NextState_bytes_Iterator) <= State_bytes(NextState_bytes_Iterator);
		end loop;
		if Inputs_WE = '1' then
			NextState_bytes(0) <= Inputs_WDATA(0);
			NextState_bytes(1) <= Inputs_WDATA(1);
			NextState_bytes(2) <= Inputs_WDATA(2);
			NextState_bytes(3) <= Inputs_WDATA(3);
		elsif axiSlave_WVALID = '1' then
			if axiSlave_WSTRB(0) = '1' then
				NextState_bytes(0) <= axiSlave_WDATA(0);
			end if;
			if axiSlave_WSTRB(1) = '1' then
				NextState_bytes(1) <= axiSlave_WDATA(1);
			end if;
			if axiSlave_WSTRB(2) = '1' then
				NextState_bytes(2) <= axiSlave_WDATA(2);
			end if;
			if axiSlave_WSTRB(3) = '1' then
				NextState_bytes(3) <= axiSlave_WDATA(3);
			end if;
		end if;
	end process;
	process (axiSlave_M2S_AR_ARADDR, axiSlave_M2S_AR_ARBURST, axiSlave_M2S_AR_ARCACHE, axiSlave_M2S_AR_ARID, axiSlave_M2S_AR_ARLEN, axiSlave_M2S_AR_ARLOCK, axiSlave_M2S_AR_ARPROT, axiSlave_M2S_AR_ARQOS, axiSlave_M2S_AR_ARREGION, axiSlave_M2S_AR_ARSIZE, axiSlave_M2S_AR_ARUSER, axiSlave_M2S_AR_ARVALID, axiSlave_M2S_AW_AWADDR, axiSlave_M2S_AW_AWBURST, axiSlave_M2S_AW_AWCACHE, axiSlave_M2S_AW_AWID, axiSlave_M2S_AW_AWLEN, axiSlave_M2S_AW_AWLOCK, axiSlave_M2S_AW_AWPROT, axiSlave_M2S_AW_AWQOS, axiSlave_M2S_AW_AWREGION, axiSlave_M2S_AW_AWSIZE, axiSlave_M2S_AW_AWUSER, axiSlave_M2S_AW_AWVALID, axiSlave_M2S_B_BREADY, axiSlave_M2S_R_RREADY, axiSlave_M2S_W_WDATA, axiSlave_M2S_W_WID, axiSlave_M2S_W_WLAST, axiSlave_M2S_W_WSTRB, axiSlave_M2S_W_WUSER, axiSlave_M2S_W_WVALID, axiSlave_RACK, axiSlave_RDATA, axiSlave_S2M_AR_ARREADY, axiSlave_S2M_AW_AWREADY, axiSlave_S2M_B_BID, axiSlave_S2M_B_BRESP, axiSlave_S2M_B_BUSER, axiSlave_S2M_B_BVALID, axiSlave_S2M_R_RDATA, axiSlave_S2M_R_RID, axiSlave_S2M_R_RLAST, axiSlave_S2M_R_RRESP, axiSlave_S2M_R_RUSER, axiSlave_S2M_R_RVALID, axiSlave_S2M_W_WREADY, axiSlave_WACK, axiSlaveARADDRaxiSlave_ARADDRHardLink, axiSlaveAWADDRaxiSlave_AWADDRHardLink, axiSlaveRVALIDaxiSlave_RVALIDHardLink, axiSlaveS2M_AR_ARREADYaxiSlave_S2M_AR_ARREADYHardLink, axiSlaveS2M_AW_AWREADYaxiSlave_S2M_AW_AWREADYHardLink, axiSlaveS2M_B_BIDaxiSlave_S2M_B_BIDHardLink, axiSlaveS2M_B_BRESPaxiSlave_S2M_B_BRESPHardLink, axiSlaveS2M_B_BUSERaxiSlave_S2M_B_BUSERHardLink, axiSlaveS2M_B_BVALIDaxiSlave_S2M_B_BVALIDHardLink, axiSlaveS2M_R_RDATA0axiSlave_S2M_R_RDATAHardLink, axiSlaveS2M_R_RDATA1axiSlave_S2M_R_RDATAHardLink, axiSlaveS2M_R_RDATA2axiSlave_S2M_R_RDATAHardLink, axiSlaveS2M_R_RDATA3axiSlave_S2M_R_RDATAHardLink, axiSlaveS2M_R_RIDaxiSlave_S2M_R_RIDHardLink, axiSlaveS2M_R_RLASTaxiSlave_S2M_R_RLASTHardLink, axiSlaveS2M_R_RRESPaxiSlave_S2M_R_RRESPHardLink, axiSlaveS2M_R_RUSERaxiSlave_S2M_R_RUSERHardLink, axiSlaveS2M_R_RVALIDaxiSlave_S2M_R_RVALIDHardLink, axiSlaveS2M_W_WREADYaxiSlave_S2M_W_WREADYHardLink, axiSlaveWDATA0axiSlave_WDATAHardLink, axiSlaveWDATA1axiSlave_WDATAHardLink, axiSlaveWDATA2axiSlave_WDATAHardLink, axiSlaveWDATA3axiSlave_WDATAHardLink, axiSlaveWSTRBaxiSlave_WSTRBHardLink, axiSlaveWVALIDaxiSlave_WVALIDHardLink, Inputs_M2S_AR_ARADDR, Inputs_M2S_AR_ARBURST, Inputs_M2S_AR_ARCACHE, Inputs_M2S_AR_ARID, Inputs_M2S_AR_ARLEN, Inputs_M2S_AR_ARLOCK, Inputs_M2S_AR_ARPROT, Inputs_M2S_AR_ARQOS, Inputs_M2S_AR_ARREGION, Inputs_M2S_AR_ARSIZE, Inputs_M2S_AR_ARUSER, Inputs_M2S_AR_ARVALID, Inputs_M2S_AW_AWADDR, Inputs_M2S_AW_AWBURST, Inputs_M2S_AW_AWCACHE, Inputs_M2S_AW_AWID, Inputs_M2S_AW_AWLEN, Inputs_M2S_AW_AWLOCK, Inputs_M2S_AW_AWPROT, Inputs_M2S_AW_AWQOS, Inputs_M2S_AW_AWREGION, Inputs_M2S_AW_AWSIZE, Inputs_M2S_AW_AWUSER, Inputs_M2S_AW_AWVALID, Inputs_M2S_B_BREADY, Inputs_M2S_R_RREADY, Inputs_M2S_W_WDATA, Inputs_M2S_W_WID, Inputs_M2S_W_WLAST, Inputs_M2S_W_WSTRB, Inputs_M2S_W_WUSER, Inputs_M2S_W_WVALID, Inputs_WE, M2S_AR_ARADDR, M2S_AR_ARBURST, M2S_AR_ARCACHE, M2S_AR_ARID, M2S_AR_ARLEN, M2S_AR_ARLOCK, M2S_AR_ARPROT, M2S_AR_ARQOS, M2S_AR_ARREGION, M2S_AR_ARSIZE, M2S_AR_ARUSER, M2S_AR_ARVALID, M2S_AW_AWADDR, M2S_AW_AWBURST, M2S_AW_AWCACHE, M2S_AW_AWID, M2S_AW_AWLEN, M2S_AW_AWLOCK, M2S_AW_AWPROT, M2S_AW_AWQOS, M2S_AW_AWREGION, M2S_AW_AWSIZE, M2S_AW_AWUSER, M2S_AW_AWVALID, M2S_B_BREADY, M2S_R_RREADY, M2S_W_WDATA0, M2S_W_WDATA1, M2S_W_WDATA2, M2S_W_WDATA3, M2S_W_WID, M2S_W_WLAST, M2S_W_WSTRB, M2S_W_WUSER, M2S_W_WVALID, State_bytes, WDATA0, WDATA1, WDATA2, WDATA3, WE)
	begin
		Inputs_M2S_AR_ARID <= M2S_AR_ARID;
		Inputs_M2S_AR_ARADDR <= M2S_AR_ARADDR;
		Inputs_M2S_AR_ARLEN <= M2S_AR_ARLEN;
		Inputs_M2S_AR_ARSIZE <= M2S_AR_ARSIZE;
		Inputs_M2S_AR_ARBURST <= M2S_AR_ARBURST;
		Inputs_M2S_AR_ARLOCK <= M2S_AR_ARLOCK;
		Inputs_M2S_AR_ARCACHE <= M2S_AR_ARCACHE;
		Inputs_M2S_AR_ARPROT <= M2S_AR_ARPROT;
		Inputs_M2S_AR_ARQOS <= M2S_AR_ARQOS;
		Inputs_M2S_AR_ARREGION <= M2S_AR_ARREGION;
		Inputs_M2S_AR_ARUSER <= M2S_AR_ARUSER;
		Inputs_M2S_AR_ARVALID <= M2S_AR_ARVALID;
		Inputs_M2S_R_RREADY <= M2S_R_RREADY;
		Inputs_M2S_AW_AWID <= M2S_AW_AWID;
		Inputs_M2S_AW_AWADDR <= M2S_AW_AWADDR;
		Inputs_M2S_AW_AWLEN <= M2S_AW_AWLEN;
		Inputs_M2S_AW_AWSIZE <= M2S_AW_AWSIZE;
		Inputs_M2S_AW_AWBURST <= M2S_AW_AWBURST;
		Inputs_M2S_AW_AWLOCK <= M2S_AW_AWLOCK;
		Inputs_M2S_AW_AWCACHE <= M2S_AW_AWCACHE;
		Inputs_M2S_AW_AWPROT <= M2S_AW_AWPROT;
		Inputs_M2S_AW_AWQOS <= M2S_AW_AWQOS;
		Inputs_M2S_AW_AWREGION <= M2S_AW_AWREGION;
		Inputs_M2S_AW_AWUSER <= M2S_AW_AWUSER;
		Inputs_M2S_AW_AWVALID <= M2S_AW_AWVALID;
		Inputs_M2S_W_WID <= M2S_W_WID;
		Inputs_M2S_W_WDATA(0) <= M2S_W_WDATA0;
		Inputs_M2S_W_WDATA(1) <= M2S_W_WDATA1;
		Inputs_M2S_W_WDATA(2) <= M2S_W_WDATA2;
		Inputs_M2S_W_WDATA(3) <= M2S_W_WDATA3;
		Inputs_M2S_W_WSTRB <= M2S_W_WSTRB;
		Inputs_M2S_W_WLAST <= M2S_W_WLAST;
		Inputs_M2S_W_WUSER <= M2S_W_WUSER;
		Inputs_M2S_W_WVALID <= M2S_W_WVALID;
		Inputs_M2S_B_BREADY <= M2S_B_BREADY;
		Inputs_WE <= WE;
		Inputs_WDATA(0) <= WDATA0;
		Inputs_WDATA(1) <= WDATA1;
		Inputs_WDATA(2) <= WDATA2;
		Inputs_WDATA(3) <= WDATA3;
		axiSlave_M2S_AR_ARID <= Inputs_M2S_AR_ARID;
		axiSlave_M2S_AR_ARADDR <= Inputs_M2S_AR_ARADDR;
		axiSlave_M2S_AR_ARLEN <= Inputs_M2S_AR_ARLEN;
		axiSlave_M2S_AR_ARSIZE <= Inputs_M2S_AR_ARSIZE;
		axiSlave_M2S_AR_ARBURST <= Inputs_M2S_AR_ARBURST;
		axiSlave_M2S_AR_ARLOCK <= Inputs_M2S_AR_ARLOCK;
		axiSlave_M2S_AR_ARCACHE <= Inputs_M2S_AR_ARCACHE;
		axiSlave_M2S_AR_ARPROT <= Inputs_M2S_AR_ARPROT;
		axiSlave_M2S_AR_ARQOS <= Inputs_M2S_AR_ARQOS;
		axiSlave_M2S_AR_ARREGION <= Inputs_M2S_AR_ARREGION;
		axiSlave_M2S_AR_ARUSER <= Inputs_M2S_AR_ARUSER;
		axiSlave_M2S_AR_ARVALID <= Inputs_M2S_AR_ARVALID;
		axiSlave_M2S_R_RREADY <= Inputs_M2S_R_RREADY;
		axiSlave_M2S_AW_AWID <= Inputs_M2S_AW_AWID;
		axiSlave_M2S_AW_AWADDR <= Inputs_M2S_AW_AWADDR;
		axiSlave_M2S_AW_AWLEN <= Inputs_M2S_AW_AWLEN;
		axiSlave_M2S_AW_AWSIZE <= Inputs_M2S_AW_AWSIZE;
		axiSlave_M2S_AW_AWBURST <= Inputs_M2S_AW_AWBURST;
		axiSlave_M2S_AW_AWLOCK <= Inputs_M2S_AW_AWLOCK;
		axiSlave_M2S_AW_AWCACHE <= Inputs_M2S_AW_AWCACHE;
		axiSlave_M2S_AW_AWPROT <= Inputs_M2S_AW_AWPROT;
		axiSlave_M2S_AW_AWQOS <= Inputs_M2S_AW_AWQOS;
		axiSlave_M2S_AW_AWREGION <= Inputs_M2S_AW_AWREGION;
		axiSlave_M2S_AW_AWUSER <= Inputs_M2S_AW_AWUSER;
		axiSlave_M2S_AW_AWVALID <= Inputs_M2S_AW_AWVALID;
		axiSlave_M2S_W_WID <= Inputs_M2S_W_WID;
		axiSlave_M2S_W_WDATA(0) <= Inputs_M2S_W_WDATA(0);
		axiSlave_M2S_W_WDATA(1) <= Inputs_M2S_W_WDATA(1);
		axiSlave_M2S_W_WDATA(2) <= Inputs_M2S_W_WDATA(2);
		axiSlave_M2S_W_WDATA(3) <= Inputs_M2S_W_WDATA(3);
		axiSlave_M2S_W_WSTRB <= Inputs_M2S_W_WSTRB;
		axiSlave_M2S_W_WLAST <= Inputs_M2S_W_WLAST;
		axiSlave_M2S_W_WUSER <= Inputs_M2S_W_WUSER;
		axiSlave_M2S_W_WVALID <= Inputs_M2S_W_WVALID;
		axiSlave_M2S_B_BREADY <= Inputs_M2S_B_BREADY;
		axiSlave_RDATA(0) <= State_bytes(0);
		axiSlave_RDATA(1) <= State_bytes(1);
		axiSlave_RDATA(2) <= State_bytes(2);
		axiSlave_RDATA(3) <= State_bytes(3);
		axiSlave_RACK <= AXI4RegisterModule_L56F24T28_Expr;
		axiSlave_WACK <= AXI4RegisterModule_L58F24T28_Expr;
		OutData0 <= State_bytes(0);
		OutData1 <= State_bytes(1);
		OutData2 <= State_bytes(2);
		OutData3 <= State_bytes(3);
		OutACK <= Inputs_WE;
		S2M_AR_ARREADY <= axiSlave_S2M_AR_ARREADY;
		S2M_AW_AWREADY <= axiSlave_S2M_AW_AWREADY;
		S2M_B_BID <= axiSlave_S2M_B_BID;
		S2M_B_BRESP <= axiSlave_S2M_B_BRESP;
		S2M_B_BUSER <= axiSlave_S2M_B_BUSER;
		S2M_B_BVALID <= axiSlave_S2M_B_BVALID;
		S2M_R_RID <= axiSlave_S2M_R_RID;
		S2M_R_RDATA0 <= axiSlave_S2M_R_RDATA(0);
		S2M_R_RDATA1 <= axiSlave_S2M_R_RDATA(1);
		S2M_R_RDATA2 <= axiSlave_S2M_R_RDATA(2);
		S2M_R_RDATA3 <= axiSlave_S2M_R_RDATA(3);
		S2M_R_RRESP <= axiSlave_S2M_R_RRESP;
		S2M_R_RLAST <= axiSlave_S2M_R_RLAST;
		S2M_R_RUSER <= axiSlave_S2M_R_RUSER;
		S2M_R_RVALID <= axiSlave_S2M_R_RVALID;
		S2M_W_WREADY <= axiSlave_S2M_W_WREADY;
		axiSlaveM2S_AR_ARIDaxiSlave_M2S_AR_ARIDHardLink <= axiSlave_M2S_AR_ARID;
		axiSlaveM2S_AR_ARADDRaxiSlave_M2S_AR_ARADDRHardLink <= axiSlave_M2S_AR_ARADDR;
		axiSlaveM2S_AR_ARLENaxiSlave_M2S_AR_ARLENHardLink <= axiSlave_M2S_AR_ARLEN;
		axiSlaveM2S_AR_ARSIZEaxiSlave_M2S_AR_ARSIZEHardLink <= axiSlave_M2S_AR_ARSIZE;
		axiSlaveM2S_AR_ARBURSTaxiSlave_M2S_AR_ARBURSTHardLink <= axiSlave_M2S_AR_ARBURST;
		axiSlaveM2S_AR_ARLOCKaxiSlave_M2S_AR_ARLOCKHardLink <= axiSlave_M2S_AR_ARLOCK;
		axiSlaveM2S_AR_ARCACHEaxiSlave_M2S_AR_ARCACHEHardLink <= axiSlave_M2S_AR_ARCACHE;
		axiSlaveM2S_AR_ARPROTaxiSlave_M2S_AR_ARPROTHardLink <= axiSlave_M2S_AR_ARPROT;
		axiSlaveM2S_AR_ARQOSaxiSlave_M2S_AR_ARQOSHardLink <= axiSlave_M2S_AR_ARQOS;
		axiSlaveM2S_AR_ARREGIONaxiSlave_M2S_AR_ARREGIONHardLink <= axiSlave_M2S_AR_ARREGION;
		axiSlaveM2S_AR_ARUSERaxiSlave_M2S_AR_ARUSERHardLink <= axiSlave_M2S_AR_ARUSER;
		axiSlaveM2S_AR_ARVALIDaxiSlave_M2S_AR_ARVALIDHardLink <= axiSlave_M2S_AR_ARVALID;
		axiSlaveM2S_R_RREADYaxiSlave_M2S_R_RREADYHardLink <= axiSlave_M2S_R_RREADY;
		axiSlaveM2S_AW_AWIDaxiSlave_M2S_AW_AWIDHardLink <= axiSlave_M2S_AW_AWID;
		axiSlaveM2S_AW_AWADDRaxiSlave_M2S_AW_AWADDRHardLink <= axiSlave_M2S_AW_AWADDR;
		axiSlaveM2S_AW_AWLENaxiSlave_M2S_AW_AWLENHardLink <= axiSlave_M2S_AW_AWLEN;
		axiSlaveM2S_AW_AWSIZEaxiSlave_M2S_AW_AWSIZEHardLink <= axiSlave_M2S_AW_AWSIZE;
		axiSlaveM2S_AW_AWBURSTaxiSlave_M2S_AW_AWBURSTHardLink <= axiSlave_M2S_AW_AWBURST;
		axiSlaveM2S_AW_AWLOCKaxiSlave_M2S_AW_AWLOCKHardLink <= axiSlave_M2S_AW_AWLOCK;
		axiSlaveM2S_AW_AWCACHEaxiSlave_M2S_AW_AWCACHEHardLink <= axiSlave_M2S_AW_AWCACHE;
		axiSlaveM2S_AW_AWPROTaxiSlave_M2S_AW_AWPROTHardLink <= axiSlave_M2S_AW_AWPROT;
		axiSlaveM2S_AW_AWQOSaxiSlave_M2S_AW_AWQOSHardLink <= axiSlave_M2S_AW_AWQOS;
		axiSlaveM2S_AW_AWREGIONaxiSlave_M2S_AW_AWREGIONHardLink <= axiSlave_M2S_AW_AWREGION;
		axiSlaveM2S_AW_AWUSERaxiSlave_M2S_AW_AWUSERHardLink <= axiSlave_M2S_AW_AWUSER;
		axiSlaveM2S_AW_AWVALIDaxiSlave_M2S_AW_AWVALIDHardLink <= axiSlave_M2S_AW_AWVALID;
		axiSlaveM2S_W_WIDaxiSlave_M2S_W_WIDHardLink <= axiSlave_M2S_W_WID;
		axiSlaveM2S_W_WDATA0axiSlave_M2S_W_WDATAHardLink <= axiSlave_M2S_W_WDATA(0);
		axiSlaveM2S_W_WDATA1axiSlave_M2S_W_WDATAHardLink <= axiSlave_M2S_W_WDATA(1);
		axiSlaveM2S_W_WDATA2axiSlave_M2S_W_WDATAHardLink <= axiSlave_M2S_W_WDATA(2);
		axiSlaveM2S_W_WDATA3axiSlave_M2S_W_WDATAHardLink <= axiSlave_M2S_W_WDATA(3);
		axiSlaveM2S_W_WSTRBaxiSlave_M2S_W_WSTRBHardLink <= axiSlave_M2S_W_WSTRB;
		axiSlaveM2S_W_WLASTaxiSlave_M2S_W_WLASTHardLink <= axiSlave_M2S_W_WLAST;
		axiSlaveM2S_W_WUSERaxiSlave_M2S_W_WUSERHardLink <= axiSlave_M2S_W_WUSER;
		axiSlaveM2S_W_WVALIDaxiSlave_M2S_W_WVALIDHardLink <= axiSlave_M2S_W_WVALID;
		axiSlaveM2S_B_BREADYaxiSlave_M2S_B_BREADYHardLink <= axiSlave_M2S_B_BREADY;
		axiSlaveRDATA0axiSlave_RDATAHardLink <= axiSlave_RDATA(0);
		axiSlaveRDATA1axiSlave_RDATAHardLink <= axiSlave_RDATA(1);
		axiSlaveRDATA2axiSlave_RDATAHardLink <= axiSlave_RDATA(2);
		axiSlaveRDATA3axiSlave_RDATAHardLink <= axiSlave_RDATA(3);
		axiSlaveRACKaxiSlave_RACKHardLink <= axiSlave_RACK;
		axiSlaveWACKaxiSlave_WACKHardLink <= axiSlave_WACK;
		axiSlave_S2M_AR_ARREADY <= axiSlaveS2M_AR_ARREADYaxiSlave_S2M_AR_ARREADYHardLink;
		axiSlave_S2M_AW_AWREADY <= axiSlaveS2M_AW_AWREADYaxiSlave_S2M_AW_AWREADYHardLink;
		axiSlave_S2M_B_BID <= axiSlaveS2M_B_BIDaxiSlave_S2M_B_BIDHardLink;
		axiSlave_S2M_B_BRESP <= axiSlaveS2M_B_BRESPaxiSlave_S2M_B_BRESPHardLink;
		axiSlave_S2M_B_BUSER <= axiSlaveS2M_B_BUSERaxiSlave_S2M_B_BUSERHardLink;
		axiSlave_S2M_B_BVALID <= axiSlaveS2M_B_BVALIDaxiSlave_S2M_B_BVALIDHardLink;
		axiSlave_S2M_R_RID <= axiSlaveS2M_R_RIDaxiSlave_S2M_R_RIDHardLink;
		axiSlave_S2M_R_RDATA(0) <= axiSlaveS2M_R_RDATA0axiSlave_S2M_R_RDATAHardLink;
		axiSlave_S2M_R_RDATA(1) <= axiSlaveS2M_R_RDATA1axiSlave_S2M_R_RDATAHardLink;
		axiSlave_S2M_R_RDATA(2) <= axiSlaveS2M_R_RDATA2axiSlave_S2M_R_RDATAHardLink;
		axiSlave_S2M_R_RDATA(3) <= axiSlaveS2M_R_RDATA3axiSlave_S2M_R_RDATAHardLink;
		axiSlave_S2M_R_RRESP <= axiSlaveS2M_R_RRESPaxiSlave_S2M_R_RRESPHardLink;
		axiSlave_S2M_R_RLAST <= axiSlaveS2M_R_RLASTaxiSlave_S2M_R_RLASTHardLink;
		axiSlave_S2M_R_RUSER <= axiSlaveS2M_R_RUSERaxiSlave_S2M_R_RUSERHardLink;
		axiSlave_S2M_R_RVALID <= axiSlaveS2M_R_RVALIDaxiSlave_S2M_R_RVALIDHardLink;
		axiSlave_S2M_W_WREADY <= axiSlaveS2M_W_WREADYaxiSlave_S2M_W_WREADYHardLink;
		axiSlave_WSTRB <= axiSlaveWSTRBaxiSlave_WSTRBHardLink;
		axiSlave_WDATA(0) <= axiSlaveWDATA0axiSlave_WDATAHardLink;
		axiSlave_WDATA(1) <= axiSlaveWDATA1axiSlave_WDATAHardLink;
		axiSlave_WDATA(2) <= axiSlaveWDATA2axiSlave_WDATAHardLink;
		axiSlave_WDATA(3) <= axiSlaveWDATA3axiSlave_WDATAHardLink;
		axiSlave_WVALID <= axiSlaveWVALIDaxiSlave_WVALIDHardLink;
		axiSlave_RVALID <= axiSlaveRVALIDaxiSlave_RVALIDHardLink;
		axiSlave_ARADDR <= axiSlaveARADDRaxiSlave_ARADDRHardLink;
		axiSlave_AWADDR <= axiSlaveAWADDRaxiSlave_AWADDRHardLink;
	end process;
	-- [BEGIN USER ARCHITECTURE]
	-- [END USER ARCHITECTURE]
end architecture;
