-- PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
-- * This file was generated by Quokka FPGA Toolkit.
-- * Generated code is your property, do whatever you want with it
-- * Place custom code between [BEGIN USER ***] and [END USER ***].
-- * CAUTION: All code outside of [USER] scope is subject to regeneration.
-- * Bad things happen sometimes in developer's life,
--   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
-- * Internal structure of code is subject to change.
--   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
-- * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
-- * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
--
-- DISCLAIMER:
--   Code comes AS-IS, it is your responsibility to make sure it is working as expected
--   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
--
-- System configuration name is SP_WF_WSTRB_RAMModule_TopLevel, clock frequency is 1Hz, Top-level
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.Quokka.all;
entity SP_WF_WSTRB_RAMModule_TopLevel is
	port
	(
		-- [BEGIN USER PORTS]
		-- [END USER PORTS]
		Clock : in std_logic;
		Reset : in std_logic;
		Address : in unsigned (7 downto 0);
		WE : in std_logic;
		WriteData0 : in unsigned (7 downto 0);
		WriteData1 : in unsigned (7 downto 0);
		WriteData2 : in unsigned (7 downto 0);
		WriteData3 : in unsigned (7 downto 0);
		WSTRB : in unsigned (3 downto 0);
		Data : out unsigned (31 downto 0)
	);
end entity;
-- FSM summary
-- Packages
architecture rtl of SP_WF_WSTRB_RAMModule_TopLevel is
	-- [BEGIN USER SIGNALS]
	-- [END USER SIGNALS]
	constant HiSignal : std_logic := '1';
	constant LoSignal : std_logic := '0';
	constant Zero : std_logic := '0';
	constant One : std_logic := '1';
	-- true is a reserved name, declaration skipped
	-- false is a reserved name, declaration skipped
	constant SP_WF_WSTRB_RAMModule_L30F9L38T10_SP_WF_WSTRB_RAMModule_L31F13L37T14_0_w : std_logic := '0';
	constant SP_WF_WSTRB_RAMModule_L30F9L38T10_SP_WF_WSTRB_RAMModule_L31F13L37T14_1_w : std_logic := '1';
	constant SP_WF_WSTRB_RAMModule_L30F9L38T10_SP_WF_WSTRB_RAMModule_L31F13L37T14_2_w : unsigned(1 downto 0) := "10";
	constant SP_WF_WSTRB_RAMModule_L30F9L38T10_SP_WF_WSTRB_RAMModule_L31F13L37T14_3_w : unsigned(1 downto 0) := "11";
	signal Inputs_Address : unsigned(7 downto 0) := (others => '0');
	signal Inputs_WE : std_logic := '0';
	signal Inputs_WSTRB : unsigned(3 downto 0) := (others => '0');
	signal SP_WF_WSTRB_RAMModule_L27F29T60_Source : unsigned(31 downto 0) := (others => '0');
	type Inputs_WriteDataArray is array (0 to 3) of unsigned (7 downto 0);
	signal Inputs_WriteData : Inputs_WriteDataArray := (others => (others => '0'));
	type State_ReadDataArray is array (0 to 3) of unsigned (7 downto 0);
	signal State_ReadData : State_ReadDataArray := (others => (others => '0'));
	type State_Buff0Array is array (0 to 31) of unsigned (7 downto 0);
	signal State_Buff0 : State_Buff0Array := (others => (others => '0'));
	type State_Buff1Array is array (0 to 31) of unsigned (7 downto 0);
	signal State_Buff1 : State_Buff1Array := (others => (others => '0'));
	type State_Buff2Array is array (0 to 31) of unsigned (7 downto 0);
	signal State_Buff2 : State_Buff2Array := (others => (others => '0'));
	type State_Buff3Array is array (0 to 31) of unsigned (7 downto 0);
	signal State_Buff3 : State_Buff3Array := (others => (others => '0'));
	signal Inputs_Address_reg0 : unsigned(4 downto 0);
	signal Inputs_Address_reg1 : unsigned(4 downto 0);
	signal Inputs_Address_reg2 : unsigned(4 downto 0);
	signal Inputs_Address_reg3 : unsigned(4 downto 0);
begin
	process (Address, SP_WF_WSTRB_RAMModule_L27F29T60_Source, State_ReadData, WE, WriteData0, WriteData1, WriteData2, WriteData3, WSTRB)
	begin
		Inputs_Address <= Address;
		Inputs_WE <= WE;
		Inputs_WriteData(0) <= WriteData0;
		Inputs_WriteData(1) <= WriteData1;
		Inputs_WriteData(2) <= WriteData2;
		Inputs_WriteData(3) <= WriteData3;
		Inputs_WSTRB <= WSTRB;
		SP_WF_WSTRB_RAMModule_L27F29T60_Source(31 downto 24) <= State_ReadData(3);
		SP_WF_WSTRB_RAMModule_L27F29T60_Source(23 downto 16) <= State_ReadData(2);
		SP_WF_WSTRB_RAMModule_L27F29T60_Source(15 downto 8) <= State_ReadData(1);
		SP_WF_WSTRB_RAMModule_L27F29T60_Source(7 downto 0) <= State_ReadData(0);
		Data <= SP_WF_WSTRB_RAMModule_L27F29T60_Source;
	end process;
	-- inferred single port RAM with write-first behaviour
	process (Clock, Inputs_WSTRB(0), Inputs_Address, Inputs_WriteData, Inputs_Address_reg0, State_Buff0)
	begin
		if rising_edge(Clock) then
			if Inputs_WSTRB(0) = '1' then
				State_Buff0(TO_INTEGER(Inputs_Address)) <= Inputs_WriteData(0);
			end if;
			Inputs_Address_reg0 <= Inputs_Address(4 downto 0);
		end if;
		State_ReadData(0) <= State_Buff0(TO_INTEGER(Inputs_Address_reg0));
	end process;
	-- inferred single port RAM with write-first behaviour
	process (Clock, Inputs_WSTRB(1), Inputs_Address, Inputs_WriteData, Inputs_Address_reg1, State_Buff1)
	begin
		if rising_edge(Clock) then
			if Inputs_WSTRB(1) = '1' then
				State_Buff1(TO_INTEGER(Inputs_Address)) <= Inputs_WriteData(1);
			end if;
			Inputs_Address_reg1 <= Inputs_Address(4 downto 0);
		end if;
		State_ReadData(1) <= State_Buff1(TO_INTEGER(Inputs_Address_reg1));
	end process;
	-- inferred single port RAM with write-first behaviour
	process (Clock, Inputs_WSTRB(2), Inputs_Address, Inputs_WriteData, Inputs_Address_reg2, State_Buff2)
	begin
		if rising_edge(Clock) then
			if Inputs_WSTRB(2) = '1' then
				State_Buff2(TO_INTEGER(Inputs_Address)) <= Inputs_WriteData(2);
			end if;
			Inputs_Address_reg2 <= Inputs_Address(4 downto 0);
		end if;
		State_ReadData(2) <= State_Buff2(TO_INTEGER(Inputs_Address_reg2));
	end process;
	-- inferred single port RAM with write-first behaviour
	process (Clock, Inputs_WSTRB(3), Inputs_Address, Inputs_WriteData, Inputs_Address_reg3, State_Buff3)
	begin
		if rising_edge(Clock) then
			if Inputs_WSTRB(3) = '1' then
				State_Buff3(TO_INTEGER(Inputs_Address)) <= Inputs_WriteData(3);
			end if;
			Inputs_Address_reg3 <= Inputs_Address(4 downto 0);
		end if;
		State_ReadData(3) <= State_Buff3(TO_INTEGER(Inputs_Address_reg3));
	end process;
	-- [BEGIN USER ARCHITECTURE]
	-- [END USER ARCHITECTURE]
end architecture;
