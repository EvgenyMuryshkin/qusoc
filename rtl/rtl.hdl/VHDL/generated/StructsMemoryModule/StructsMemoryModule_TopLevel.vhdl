-- PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
-- * This file was generated by Quokka FPGA Toolkit.
-- * Generated code is your property, do whatever you want with it
-- * Place custom code between [BEGIN USER ***] and [END USER ***].
-- * CAUTION: All code outside of [USER] scope is subject to regeneration.
-- * Bad things happen sometimes in developer's life,
--   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
-- * Internal structure of code is subject to change.
--   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
-- * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
-- * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
--
-- DISCLAIMER:
--   Code comes AS-IS, it is your responsibility to make sure it is working as expected
--   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
--
-- System configuration name is StructsMemoryModule_TopLevel, clock frequency is 1Hz, Top-level
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.Quokka.all;
entity StructsMemoryModule_TopLevel is
	port
	(
		-- [BEGIN USER PORTS]
		-- [END USER PORTS]
		Clock : in std_logic;
		Reset : in std_logic;
		In_Op1 : in unsigned (7 downto 0);
		In_Op2 : in unsigned (7 downto 0);
		Out_Op1 : out unsigned (7 downto 0);
		Out_Op2 : out unsigned (7 downto 0)
	);
end entity;
-- FSM summary
-- Packages
architecture rtl of StructsMemoryModule_TopLevel is
	-- [BEGIN USER SIGNALS]
	-- [END USER SIGNALS]
	constant HiSignal : std_logic := '1';
	constant LoSignal : std_logic := '0';
	constant Zero : std_logic := '0';
	constant One : std_logic := '1';
	-- true is a reserved name, declaration skipped
	-- false is a reserved name, declaration skipped
	constant State_BuffDefault : unsigned(15 downto 0) := "0000000000000000";
	signal Inputs_In_Op1 : unsigned(7 downto 0) := (others => '0');
	signal Inputs_In_Op2 : unsigned(7 downto 0) := (others => '0');
	signal NextState_Out_Op1 : unsigned(7 downto 0) := (others => '0');
	signal NextState_Out_Op2 : unsigned(7 downto 0) := (others => '0');
	signal State_Out_Op1 : unsigned(7 downto 0) := "00000000";
	constant State_Out_Op1Default : unsigned(7 downto 0) := "00001010";
	signal State_Out_Op2 : unsigned(7 downto 0) := "00000000";
	constant State_Out_Op2Default : unsigned(7 downto 0) := "00010100";
	type State_BuffArray is array (0 to 3) of unsigned (15 downto 0);
	constant State_BuffArrayInit : State_BuffArray := (
		"0001010000001010",
		"0001010000001010",
		"0001010000001010",
		"0001010000001010"
	);
	signal State_Buff : State_BuffArray := State_BuffArrayInit;
	type NextState_BuffArray is array (0 to 3) of unsigned (15 downto 0);
	signal NextState_Buff : NextState_BuffArray := (others => (others => '0'));
begin
	process (Clock, NextState_Out_Op1, NextState_Out_Op2, Reset)
	begin
		if rising_edge(Clock) then
			if Reset = '1' then
				State_Out_Op1 <= State_Out_Op1Default;
				State_Out_Op2 <= State_Out_Op2Default;
			else
				State_Out_Op1 <= NextState_Out_Op1;
				State_Out_Op2 <= NextState_Out_Op2;
			end if;
		end if;
	end process;
	process (Clock, NextState_Buff, Reset)
	begin
		if rising_edge(Clock) then
			if Reset = '1' then
				null;
			else
				for State_Buff_Iterator in 0 to 3 loop
					State_Buff(State_Buff_Iterator) <= NextState_Buff(State_Buff_Iterator);
				end loop;
			end if;
		end if;
	end process;
	process (Inputs_In_Op1, Inputs_In_Op2, State_Buff, State_Out_Op1, State_Out_Op2)
	begin
		for NextState_Buff_Iterator in 0 to 3 loop
			NextState_Buff(NextState_Buff_Iterator) <= State_Buff(NextState_Buff_Iterator);
		end loop;
		NextState_Out_Op1 <= State_Out_Op1;
		NextState_Out_Op2 <= State_Out_Op2;
		NextState_Buff(0)(15 downto 8) <= Inputs_In_Op2;
		NextState_Buff(0)(7 downto 0) <= Inputs_In_Op1;
		NextState_Buff(1) <= State_Buff(0);
		NextState_Buff(2) <= State_Buff(1);
		NextState_Buff(3) <= State_Buff(2);
		NextState_Out_Op2 <= State_Buff(3)(15 downto 8);
		NextState_Out_Op1 <= State_Buff(3)(7 downto 0);
	end process;
	process (In_Op1, In_Op2, State_Out_Op1, State_Out_Op2)
	begin
		Inputs_In_Op1 <= In_Op1;
		Inputs_In_Op2 <= In_Op2;
		Out_Op1 <= State_Out_Op1;
		Out_Op2 <= State_Out_Op2;
	end process;
	-- [BEGIN USER ARCHITECTURE]
	-- [END USER ARCHITECTURE]
end architecture;
