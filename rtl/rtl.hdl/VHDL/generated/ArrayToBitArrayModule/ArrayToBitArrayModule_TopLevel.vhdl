-- PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
-- * This file was generated by Quokka FPGA Toolkit.
-- * Generated code is your property, do whatever you want with it
-- * Place custom code between [BEGIN USER ***] and [END USER ***].
-- * CAUTION: All code outside of [USER] scope is subject to regeneration.
-- * Bad things happen sometimes in developer's life,
--   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
-- * Internal structure of code is subject to change.
--   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
-- * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
-- * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
--
-- DISCLAIMER:
--   Code comes AS-IS, it is your responsibility to make sure it is working as expected
--   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
--
-- System configuration name is ArrayToBitArrayModule_TopLevel, clock frequency is 1Hz, Top-level
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.Quokka.all;
entity ArrayToBitArrayModule_TopLevel is
	port
	(
		-- [BEGIN USER PORTS]
		-- [END USER PORTS]
		Clock : in std_logic;
		Reset : in std_logic;
		InArray0 : in unsigned (7 downto 0);
		InArray1 : in unsigned (7 downto 0);
		InArray2 : in unsigned (7 downto 0);
		InArray3 : in unsigned (7 downto 0);
		OutInputsArray0 : out unsigned (7 downto 0);
		OutInputsArray1 : out unsigned (7 downto 0);
		OutInputsArray2 : out unsigned (7 downto 0);
		OutInputsArray3 : out unsigned (7 downto 0);
		OutDataArray0 : out unsigned (7 downto 0);
		OutDataArray1 : out unsigned (7 downto 0);
		OutDataArray2 : out unsigned (7 downto 0);
		OutDataArray3 : out unsigned (7 downto 0);
		OutInputsBitArray : out unsigned (31 downto 0);
		OutDataBitArray : out unsigned (31 downto 0)
	);
end entity;
-- FSM summary
-- Packages
architecture rtl of ArrayToBitArrayModule_TopLevel is
	-- [BEGIN USER SIGNALS]
	-- [END USER SIGNALS]
	constant HiSignal : std_logic := '1';
	constant LoSignal : std_logic := '0';
	constant Zero : std_logic := '0';
	constant One : std_logic := '1';
	-- true is a reserved name, declaration skipped
	-- false is a reserved name, declaration skipped
	constant State_ReadDataDefault : unsigned(7 downto 0) := "00000000";
	type Inputs_InArrayArray is array (0 to 3) of unsigned (7 downto 0);
	signal Inputs_InArray : Inputs_InArrayArray := (others => (others => '0'));
	type State_ReadDataArray is array (0 to 3) of unsigned (7 downto 0);
	signal State_ReadData : State_ReadDataArray := (others => (others => '0'));
	type NextState_ReadDataArray is array (0 to 3) of unsigned (7 downto 0);
	signal NextState_ReadData : NextState_ReadDataArray := (others => (others => '0'));
begin
	process (Clock, NextState_ReadData, Reset)
	begin
		if rising_edge(Clock) then
			if Reset = '1' then
				for State_ReadData_Iterator in 0 to 3 loop
					State_ReadData(State_ReadData_Iterator) <= State_ReadDataDefault;
				end loop;
			else
				for State_ReadData_Iterator in 0 to 3 loop
					State_ReadData(State_ReadData_Iterator) <= NextState_ReadData(State_ReadData_Iterator);
				end loop;
			end if;
		end if;
	end process;
	process (Inputs_InArray, State_ReadData)
	begin
		for NextState_ReadData_Iterator in 0 to 3 loop
			NextState_ReadData(NextState_ReadData_Iterator) <= State_ReadData(NextState_ReadData_Iterator);
		end loop;
		NextState_ReadData(0) <= Inputs_InArray(0);
		NextState_ReadData(1) <= Inputs_InArray(1);
		NextState_ReadData(2) <= Inputs_InArray(2);
		NextState_ReadData(3) <= Inputs_InArray(3);
	end process;
	process (InArray0, InArray1, InArray2, InArray3, Inputs_InArray, State_ReadData)
	begin
		Inputs_InArray(0) <= InArray0;
		Inputs_InArray(1) <= InArray1;
		Inputs_InArray(2) <= InArray2;
		Inputs_InArray(3) <= InArray3;
		OutInputsArray0 <= Inputs_InArray(0);
		OutInputsArray1 <= Inputs_InArray(1);
		OutInputsArray2 <= Inputs_InArray(2);
		OutInputsArray3 <= Inputs_InArray(3);
		OutDataArray0 <= State_ReadData(0);
		OutDataArray1 <= State_ReadData(1);
		OutDataArray2 <= State_ReadData(2);
		OutDataArray3 <= State_ReadData(3);
		OutInputsBitArray(31 downto 24) <= Inputs_InArray(3);
		OutInputsBitArray(23 downto 16) <= Inputs_InArray(2);
		OutInputsBitArray(15 downto 8) <= Inputs_InArray(1);
		OutInputsBitArray(7 downto 0) <= Inputs_InArray(0);
		OutDataBitArray(31 downto 24) <= State_ReadData(3);
		OutDataBitArray(23 downto 16) <= State_ReadData(2);
		OutDataBitArray(15 downto 8) <= State_ReadData(1);
		OutDataBitArray(7 downto 0) <= State_ReadData(0);
	end process;
	-- [BEGIN USER ARCHITECTURE]
	-- [END USER ARCHITECTURE]
end architecture;
