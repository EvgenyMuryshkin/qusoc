-- PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
-- * This file was generated by Quokka FPGA Toolkit.
-- * Generated code is your property, do whatever you want with it
-- * Place custom code between [BEGIN USER ***] and [END USER ***].
-- * CAUTION: All code outside of [USER] scope is subject to regeneration.
-- * Bad things happen sometimes in developer's life,
--   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
-- * Internal structure of code is subject to change.
--   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
-- * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
-- * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
-- 
-- DISCLAIMER:
--   Code comes AS-IS, it is your responsibility to make sure it is working as expected
--   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
-- 
-- System configuration name is AXI4MasterSlaveMemoryTestModule_TopLevel, clock frequency is 1Hz, Top-level
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.Quokka.all;

entity AXI4MasterSlaveMemoryTestModule_TopLevel is
    port
    (
-- [BEGIN USER PORTS]
-- [END USER PORTS]

Clock : in  std_logic;
Reset : in  std_logic;
AXADDR : in  unsigned(31 downto 0);
InData : in  unsigned(31 downto 0);
WE : in  std_logic;
RE : in  std_logic;
SWE : in  std_logic;
OutACK : out  std_logic;
OutMasterData0 : out  unsigned(7 downto 0);
OutMasterData1 : out  unsigned(7 downto 0);
OutMasterData2 : out  unsigned(7 downto 0);
OutMasterData3 : out  unsigned(7 downto 0);
OutMasterWord : out  unsigned(31 downto 0)
    );
end entity;

-- FSM summary
-- Packages
architecture rtl of AXI4MasterSlaveMemoryTestModule_TopLevel is
-- [BEGIN USER SIGNALS]
-- [END USER SIGNALS]
constant HiSignal : std_logic := '1';
constant LoSignal : std_logic := '0';
constant Zero : std_logic := '0';
constant One : std_logic := '1';
constant true : std_logic := '1';
constant false : std_logic := '0';
constant AXI4MasterSlaveMemoryTestModule_L53F41T54_Expr : unsigned(7 downto 0)  := "11111111";
signal Inputs_AXADDR : unsigned(31 downto 0) := (others => '0');
signal Inputs_InData : unsigned(31 downto 0) := (others => '0');
signal Inputs_WE : std_logic := '0';
signal Inputs_RE : std_logic := '0';
signal Inputs_SWE : std_logic := '0';
signal s_M2S_AR_ARID : unsigned(7 downto 0) := (others => '0');
signal s_M2S_AR_ARADDR : unsigned(31 downto 0) := (others => '0');
signal s_M2S_AR_ARLEN : unsigned(7 downto 0) := (others => '0');
signal s_M2S_AR_ARSIZE : unsigned(2 downto 0) := (others => '0');
signal s_M2S_AR_ARBURST : unsigned(1 downto 0) := (others => '0');
signal s_M2S_AR_ARLOCK : unsigned(1 downto 0) := (others => '0');
signal s_M2S_AR_ARCACHE : unsigned(3 downto 0) := (others => '0');
signal s_M2S_AR_ARPROT : unsigned(2 downto 0) := (others => '0');
signal s_M2S_AR_ARQOS : unsigned(3 downto 0) := (others => '0');
signal s_M2S_AR_ARREGION : unsigned(7 downto 0) := (others => '0');
signal s_M2S_AR_ARUSER : unsigned(7 downto 0) := (others => '0');
signal s_M2S_AR_ARVALID : std_logic := '0';
signal s_M2S_R_RREADY : std_logic := '0';
signal s_M2S_AW_AWID : unsigned(7 downto 0) := (others => '0');
signal s_M2S_AW_AWADDR : unsigned(31 downto 0) := (others => '0');
signal s_M2S_AW_AWLEN : unsigned(7 downto 0) := (others => '0');
signal s_M2S_AW_AWSIZE : unsigned(2 downto 0) := (others => '0');
signal s_M2S_AW_AWBURST : unsigned(1 downto 0) := (others => '0');
signal s_M2S_AW_AWLOCK : unsigned(1 downto 0) := (others => '0');
signal s_M2S_AW_AWCACHE : unsigned(3 downto 0) := (others => '0');
signal s_M2S_AW_AWPROT : unsigned(2 downto 0) := (others => '0');
signal s_M2S_AW_AWQOS : unsigned(3 downto 0) := (others => '0');
signal s_M2S_AW_AWREGION : unsigned(7 downto 0) := (others => '0');
signal s_M2S_AW_AWUSER : unsigned(7 downto 0) := (others => '0');
signal s_M2S_AW_AWVALID : std_logic := '0';
signal s_M2S_W_WID : unsigned(7 downto 0) := (others => '0');
signal s_M2S_W_WDATA0 : unsigned(7 downto 0) := (others => '0');
signal s_M2S_W_WDATA1 : unsigned(7 downto 0) := (others => '0');
signal s_M2S_W_WDATA2 : unsigned(7 downto 0) := (others => '0');
signal s_M2S_W_WDATA3 : unsigned(7 downto 0) := (others => '0');
signal s_M2S_W_WSTRB : unsigned(3 downto 0) := (others => '0');
signal s_M2S_W_WLAST : std_logic := '0';
signal s_M2S_W_WUSER : unsigned(7 downto 0) := (others => '0');
signal s_M2S_W_WVALID : std_logic := '0';
signal s_M2S_B_BREADY : std_logic := '0';
signal s_S2M_AR_ARREADY : std_logic := '0';
signal s_S2M_AW_AWREADY : std_logic := '0';
signal s_S2M_B_BID : unsigned(7 downto 0) := (others => '0');
signal s_S2M_B_BRESP : unsigned(1 downto 0) := (others => '0');
signal s_S2M_B_BUSER : unsigned(7 downto 0) := (others => '0');
signal s_S2M_B_BVALID : std_logic := '0';
signal s_S2M_R_RID : unsigned(7 downto 0) := (others => '0');
signal s_S2M_R_RDATA0 : unsigned(7 downto 0) := (others => '0');
signal s_S2M_R_RDATA1 : unsigned(7 downto 0) := (others => '0');
signal s_S2M_R_RDATA2 : unsigned(7 downto 0) := (others => '0');
signal s_S2M_R_RDATA3 : unsigned(7 downto 0) := (others => '0');
signal s_S2M_R_RRESP : unsigned(1 downto 0) := (others => '0');
signal s_S2M_R_RLAST : std_logic := '0';
signal s_S2M_R_RUSER : unsigned(7 downto 0) := (others => '0');
signal s_S2M_R_RVALID : std_logic := '0';
signal s_S2M_W_WREADY : std_logic := '0';
signal m_S2M_AR_ARREADY : std_logic := '0';
signal m_S2M_AW_AWREADY : std_logic := '0';
signal m_S2M_B_BID : unsigned(7 downto 0) := (others => '0');
signal m_S2M_B_BRESP : unsigned(1 downto 0) := (others => '0');
signal m_S2M_B_BUSER : unsigned(7 downto 0) := (others => '0');
signal m_S2M_B_BVALID : std_logic := '0';
signal m_S2M_R_RID : unsigned(7 downto 0) := (others => '0');
signal m_S2M_R_RDATA0 : unsigned(7 downto 0) := (others => '0');
signal m_S2M_R_RDATA1 : unsigned(7 downto 0) := (others => '0');
signal m_S2M_R_RDATA2 : unsigned(7 downto 0) := (others => '0');
signal m_S2M_R_RDATA3 : unsigned(7 downto 0) := (others => '0');
signal m_S2M_R_RRESP : unsigned(1 downto 0) := (others => '0');
signal m_S2M_R_RLAST : std_logic := '0';
signal m_S2M_R_RUSER : unsigned(7 downto 0) := (others => '0');
signal m_S2M_R_RVALID : std_logic := '0';
signal m_S2M_W_WREADY : std_logic := '0';
signal m_AXADDR : unsigned(31 downto 0) := (others => '0');
signal m_RE : std_logic := '0';
signal m_WE : std_logic := '0';
signal m_WDATA0 : unsigned(7 downto 0) := (others => '0');
signal m_WDATA1 : unsigned(7 downto 0) := (others => '0');
signal m_WDATA2 : unsigned(7 downto 0) := (others => '0');
signal m_WDATA3 : unsigned(7 downto 0) := (others => '0');
signal m_WSTRB : unsigned(3 downto 0) := (others => '0');
signal m_InvalidInputs : std_logic := '0';
signal m_OutACK : std_logic := '0';
signal m_RDATA0 : unsigned(7 downto 0) := (others => '0');
signal m_RDATA1 : unsigned(7 downto 0) := (others => '0');
signal m_RDATA2 : unsigned(7 downto 0) := (others => '0');
signal m_RDATA3 : unsigned(7 downto 0) := (others => '0');
signal m_M2S_AR_ARID : unsigned(7 downto 0) := (others => '0');
signal m_M2S_AR_ARADDR : unsigned(31 downto 0) := (others => '0');
signal m_M2S_AR_ARLEN : unsigned(7 downto 0) := (others => '0');
signal m_M2S_AR_ARSIZE : unsigned(2 downto 0) := (others => '0');
signal m_M2S_AR_ARBURST : unsigned(1 downto 0) := (others => '0');
signal m_M2S_AR_ARLOCK : unsigned(1 downto 0) := (others => '0');
signal m_M2S_AR_ARCACHE : unsigned(3 downto 0) := (others => '0');
signal m_M2S_AR_ARPROT : unsigned(2 downto 0) := (others => '0');
signal m_M2S_AR_ARQOS : unsigned(3 downto 0) := (others => '0');
signal m_M2S_AR_ARREGION : unsigned(7 downto 0) := (others => '0');
signal m_M2S_AR_ARUSER : unsigned(7 downto 0) := (others => '0');
signal m_M2S_AR_ARVALID : std_logic := '0';
signal m_M2S_R_RREADY : std_logic := '0';
signal m_M2S_AW_AWID : unsigned(7 downto 0) := (others => '0');
signal m_M2S_AW_AWADDR : unsigned(31 downto 0) := (others => '0');
signal m_M2S_AW_AWLEN : unsigned(7 downto 0) := (others => '0');
signal m_M2S_AW_AWSIZE : unsigned(2 downto 0) := (others => '0');
signal m_M2S_AW_AWBURST : unsigned(1 downto 0) := (others => '0');
signal m_M2S_AW_AWLOCK : unsigned(1 downto 0) := (others => '0');
signal m_M2S_AW_AWCACHE : unsigned(3 downto 0) := (others => '0');
signal m_M2S_AW_AWPROT : unsigned(2 downto 0) := (others => '0');
signal m_M2S_AW_AWQOS : unsigned(3 downto 0) := (others => '0');
signal m_M2S_AW_AWREGION : unsigned(7 downto 0) := (others => '0');
signal m_M2S_AW_AWUSER : unsigned(7 downto 0) := (others => '0');
signal m_M2S_AW_AWVALID : std_logic := '0';
signal m_M2S_W_WID : unsigned(7 downto 0) := (others => '0');
signal m_M2S_W_WDATA0 : unsigned(7 downto 0) := (others => '0');
signal m_M2S_W_WDATA1 : unsigned(7 downto 0) := (others => '0');
signal m_M2S_W_WDATA2 : unsigned(7 downto 0) := (others => '0');
signal m_M2S_W_WDATA3 : unsigned(7 downto 0) := (others => '0');
signal m_M2S_W_WSTRB : unsigned(3 downto 0) := (others => '0');
signal m_M2S_W_WLAST : std_logic := '0';
signal m_M2S_W_WUSER : unsigned(7 downto 0) := (others => '0');
signal m_M2S_W_WVALID : std_logic := '0';
signal m_M2S_B_BREADY : std_logic := '0';
signal AXI4MasterSlaveMemoryTestModule_L52F25T55_Source : unsigned(31 downto 0) := (others => '0');
signal AXI4MasterSlaveMemoryTestModule_L53F25T55_Source : unsigned(7 downto 0) := (others => '0');
signal AXI4MasterSlaveMemoryTestModule_L53F25T60_Index : unsigned(3 downto 0) := (others => '0');
signal State_ReadDataDefault : unsigned(7 downto 0)  := "00000000";
signal AXI4MasterSlaveMemoryTestModule_L34F45T69_Source : unsigned(31 downto 0) := (others => '0');
signal sM2S_AR_ARIDs_M2S_AR_ARIDHardLink : unsigned(7 downto 0)  := "00000000";
signal sM2S_AR_ARADDRs_M2S_AR_ARADDRHardLink : unsigned(31 downto 0)  := "00000000000000000000000000000000";
signal sM2S_AR_ARLENs_M2S_AR_ARLENHardLink : unsigned(7 downto 0)  := "00000000";
signal sM2S_AR_ARSIZEs_M2S_AR_ARSIZEHardLink : unsigned(2 downto 0)  := "000";
signal sM2S_AR_ARBURSTs_M2S_AR_ARBURSTHardLink : unsigned(1 downto 0)  := "00";
signal sM2S_AR_ARLOCKs_M2S_AR_ARLOCKHardLink : unsigned(1 downto 0)  := "00";
signal sM2S_AR_ARCACHEs_M2S_AR_ARCACHEHardLink : unsigned(3 downto 0)  := "0000";
signal sM2S_AR_ARPROTs_M2S_AR_ARPROTHardLink : unsigned(2 downto 0)  := "000";
signal sM2S_AR_ARQOSs_M2S_AR_ARQOSHardLink : unsigned(3 downto 0)  := "0000";
signal sM2S_AR_ARREGIONs_M2S_AR_ARREGIONHardLink : unsigned(7 downto 0)  := "00000000";
signal sM2S_AR_ARUSERs_M2S_AR_ARUSERHardLink : unsigned(7 downto 0)  := "00000000";
signal sM2S_AR_ARVALIDs_M2S_AR_ARVALIDHardLink : std_logic := '0';
signal sM2S_R_RREADYs_M2S_R_RREADYHardLink : std_logic := '0';
signal sM2S_AW_AWIDs_M2S_AW_AWIDHardLink : unsigned(7 downto 0)  := "00000000";
signal sM2S_AW_AWADDRs_M2S_AW_AWADDRHardLink : unsigned(31 downto 0)  := "00000000000000000000000000000000";
signal sM2S_AW_AWLENs_M2S_AW_AWLENHardLink : unsigned(7 downto 0)  := "00000000";
signal sM2S_AW_AWSIZEs_M2S_AW_AWSIZEHardLink : unsigned(2 downto 0)  := "000";
signal sM2S_AW_AWBURSTs_M2S_AW_AWBURSTHardLink : unsigned(1 downto 0)  := "00";
signal sM2S_AW_AWLOCKs_M2S_AW_AWLOCKHardLink : unsigned(1 downto 0)  := "00";
signal sM2S_AW_AWCACHEs_M2S_AW_AWCACHEHardLink : unsigned(3 downto 0)  := "0000";
signal sM2S_AW_AWPROTs_M2S_AW_AWPROTHardLink : unsigned(2 downto 0)  := "000";
signal sM2S_AW_AWQOSs_M2S_AW_AWQOSHardLink : unsigned(3 downto 0)  := "0000";
signal sM2S_AW_AWREGIONs_M2S_AW_AWREGIONHardLink : unsigned(7 downto 0)  := "00000000";
signal sM2S_AW_AWUSERs_M2S_AW_AWUSERHardLink : unsigned(7 downto 0)  := "00000000";
signal sM2S_AW_AWVALIDs_M2S_AW_AWVALIDHardLink : std_logic := '0';
signal sM2S_W_WIDs_M2S_W_WIDHardLink : unsigned(7 downto 0)  := "00000000";
signal sM2S_W_WDATA0s_M2S_W_WDATA0HardLink : unsigned(7 downto 0)  := "00000000";
signal sM2S_W_WDATA1s_M2S_W_WDATA1HardLink : unsigned(7 downto 0)  := "00000000";
signal sM2S_W_WDATA2s_M2S_W_WDATA2HardLink : unsigned(7 downto 0)  := "00000000";
signal sM2S_W_WDATA3s_M2S_W_WDATA3HardLink : unsigned(7 downto 0)  := "00000000";
signal sM2S_W_WSTRBs_M2S_W_WSTRBHardLink : unsigned(3 downto 0)  := "0000";
signal sM2S_W_WLASTs_M2S_W_WLASTHardLink : std_logic := '0';
signal sM2S_W_WUSERs_M2S_W_WUSERHardLink : unsigned(7 downto 0)  := "00000000";
signal sM2S_W_WVALIDs_M2S_W_WVALIDHardLink : std_logic := '0';
signal sM2S_B_BREADYs_M2S_B_BREADYHardLink : std_logic := '0';
signal sS2M_AR_ARREADYs_S2M_AR_ARREADYHardLink : std_logic := '0';
signal sS2M_AW_AWREADYs_S2M_AW_AWREADYHardLink : std_logic := '0';
signal sS2M_B_BIDs_S2M_B_BIDHardLink : unsigned(7 downto 0)  := "00000000";
signal sS2M_B_BRESPs_S2M_B_BRESPHardLink : unsigned(1 downto 0)  := "00";
signal sS2M_B_BUSERs_S2M_B_BUSERHardLink : unsigned(7 downto 0)  := "00000000";
signal sS2M_B_BVALIDs_S2M_B_BVALIDHardLink : std_logic := '0';
signal sS2M_R_RIDs_S2M_R_RIDHardLink : unsigned(7 downto 0)  := "00000000";
signal sS2M_R_RDATA0s_S2M_R_RDATA0HardLink : unsigned(7 downto 0)  := "00000000";
signal sS2M_R_RDATA1s_S2M_R_RDATA1HardLink : unsigned(7 downto 0)  := "00000000";
signal sS2M_R_RDATA2s_S2M_R_RDATA2HardLink : unsigned(7 downto 0)  := "00000000";
signal sS2M_R_RDATA3s_S2M_R_RDATA3HardLink : unsigned(7 downto 0)  := "00000000";
signal sS2M_R_RRESPs_S2M_R_RRESPHardLink : unsigned(1 downto 0)  := "00";
signal sS2M_R_RLASTs_S2M_R_RLASTHardLink : std_logic := '0';
signal sS2M_R_RUSERs_S2M_R_RUSERHardLink : unsigned(7 downto 0)  := "00000000";
signal sS2M_R_RVALIDs_S2M_R_RVALIDHardLink : std_logic := '0';
signal sS2M_W_WREADYs_S2M_W_WREADYHardLink : std_logic := '0';
signal mS2M_AR_ARREADYm_S2M_AR_ARREADYHardLink : std_logic := '0';
signal mS2M_AW_AWREADYm_S2M_AW_AWREADYHardLink : std_logic := '0';
signal mS2M_B_BIDm_S2M_B_BIDHardLink : unsigned(7 downto 0)  := "00000000";
signal mS2M_B_BRESPm_S2M_B_BRESPHardLink : unsigned(1 downto 0)  := "00";
signal mS2M_B_BUSERm_S2M_B_BUSERHardLink : unsigned(7 downto 0)  := "00000000";
signal mS2M_B_BVALIDm_S2M_B_BVALIDHardLink : std_logic := '0';
signal mS2M_R_RIDm_S2M_R_RIDHardLink : unsigned(7 downto 0)  := "00000000";
signal mS2M_R_RDATA0m_S2M_R_RDATA0HardLink : unsigned(7 downto 0)  := "00000000";
signal mS2M_R_RDATA1m_S2M_R_RDATA1HardLink : unsigned(7 downto 0)  := "00000000";
signal mS2M_R_RDATA2m_S2M_R_RDATA2HardLink : unsigned(7 downto 0)  := "00000000";
signal mS2M_R_RDATA3m_S2M_R_RDATA3HardLink : unsigned(7 downto 0)  := "00000000";
signal mS2M_R_RRESPm_S2M_R_RRESPHardLink : unsigned(1 downto 0)  := "00";
signal mS2M_R_RLASTm_S2M_R_RLASTHardLink : std_logic := '0';
signal mS2M_R_RUSERm_S2M_R_RUSERHardLink : unsigned(7 downto 0)  := "00000000";
signal mS2M_R_RVALIDm_S2M_R_RVALIDHardLink : std_logic := '0';
signal mS2M_W_WREADYm_S2M_W_WREADYHardLink : std_logic := '0';
signal mAXADDRm_AXADDRHardLink : unsigned(31 downto 0)  := "00000000000000000000000000000000";
signal mREm_REHardLink : std_logic := '0';
signal mWEm_WEHardLink : std_logic := '0';
signal mWDATA0m_WDATA0HardLink : unsigned(7 downto 0)  := "00000000";
signal mWDATA1m_WDATA1HardLink : unsigned(7 downto 0)  := "00000000";
signal mWDATA2m_WDATA2HardLink : unsigned(7 downto 0)  := "00000000";
signal mWDATA3m_WDATA3HardLink : unsigned(7 downto 0)  := "00000000";
signal mWSTRBm_WSTRBHardLink : unsigned(3 downto 0)  := "0000";
signal mInvalidInputsm_InvalidInputsHardLink : std_logic := '0';
signal mOutACKm_OutACKHardLink : std_logic := '0';
signal mRDATA0m_RDATA0HardLink : unsigned(7 downto 0)  := "00000000";
signal mRDATA1m_RDATA1HardLink : unsigned(7 downto 0)  := "00000000";
signal mRDATA2m_RDATA2HardLink : unsigned(7 downto 0)  := "00000000";
signal mRDATA3m_RDATA3HardLink : unsigned(7 downto 0)  := "00000000";
signal mM2S_AR_ARIDm_M2S_AR_ARIDHardLink : unsigned(7 downto 0)  := "00000000";
signal mM2S_AR_ARADDRm_M2S_AR_ARADDRHardLink : unsigned(31 downto 0)  := "00000000000000000000000000000000";
signal mM2S_AR_ARLENm_M2S_AR_ARLENHardLink : unsigned(7 downto 0)  := "00000000";
signal mM2S_AR_ARSIZEm_M2S_AR_ARSIZEHardLink : unsigned(2 downto 0)  := "000";
signal mM2S_AR_ARBURSTm_M2S_AR_ARBURSTHardLink : unsigned(1 downto 0)  := "00";
signal mM2S_AR_ARLOCKm_M2S_AR_ARLOCKHardLink : unsigned(1 downto 0)  := "00";
signal mM2S_AR_ARCACHEm_M2S_AR_ARCACHEHardLink : unsigned(3 downto 0)  := "0000";
signal mM2S_AR_ARPROTm_M2S_AR_ARPROTHardLink : unsigned(2 downto 0)  := "000";
signal mM2S_AR_ARQOSm_M2S_AR_ARQOSHardLink : unsigned(3 downto 0)  := "0000";
signal mM2S_AR_ARREGIONm_M2S_AR_ARREGIONHardLink : unsigned(7 downto 0)  := "00000000";
signal mM2S_AR_ARUSERm_M2S_AR_ARUSERHardLink : unsigned(7 downto 0)  := "00000000";
signal mM2S_AR_ARVALIDm_M2S_AR_ARVALIDHardLink : std_logic := '0';
signal mM2S_R_RREADYm_M2S_R_RREADYHardLink : std_logic := '0';
signal mM2S_AW_AWIDm_M2S_AW_AWIDHardLink : unsigned(7 downto 0)  := "00000000";
signal mM2S_AW_AWADDRm_M2S_AW_AWADDRHardLink : unsigned(31 downto 0)  := "00000000000000000000000000000000";
signal mM2S_AW_AWLENm_M2S_AW_AWLENHardLink : unsigned(7 downto 0)  := "00000000";
signal mM2S_AW_AWSIZEm_M2S_AW_AWSIZEHardLink : unsigned(2 downto 0)  := "000";
signal mM2S_AW_AWBURSTm_M2S_AW_AWBURSTHardLink : unsigned(1 downto 0)  := "00";
signal mM2S_AW_AWLOCKm_M2S_AW_AWLOCKHardLink : unsigned(1 downto 0)  := "00";
signal mM2S_AW_AWCACHEm_M2S_AW_AWCACHEHardLink : unsigned(3 downto 0)  := "0000";
signal mM2S_AW_AWPROTm_M2S_AW_AWPROTHardLink : unsigned(2 downto 0)  := "000";
signal mM2S_AW_AWQOSm_M2S_AW_AWQOSHardLink : unsigned(3 downto 0)  := "0000";
signal mM2S_AW_AWREGIONm_M2S_AW_AWREGIONHardLink : unsigned(7 downto 0)  := "00000000";
signal mM2S_AW_AWUSERm_M2S_AW_AWUSERHardLink : unsigned(7 downto 0)  := "00000000";
signal mM2S_AW_AWVALIDm_M2S_AW_AWVALIDHardLink : std_logic := '0';
signal mM2S_W_WIDm_M2S_W_WIDHardLink : unsigned(7 downto 0)  := "00000000";
signal mM2S_W_WDATA0m_M2S_W_WDATA0HardLink : unsigned(7 downto 0)  := "00000000";
signal mM2S_W_WDATA1m_M2S_W_WDATA1HardLink : unsigned(7 downto 0)  := "00000000";
signal mM2S_W_WDATA2m_M2S_W_WDATA2HardLink : unsigned(7 downto 0)  := "00000000";
signal mM2S_W_WDATA3m_M2S_W_WDATA3HardLink : unsigned(7 downto 0)  := "00000000";
signal mM2S_W_WSTRBm_M2S_W_WSTRBHardLink : unsigned(3 downto 0)  := "0000";
signal mM2S_W_WLASTm_M2S_W_WLASTHardLink : std_logic := '0';
signal mM2S_W_WUSERm_M2S_W_WUSERHardLink : unsigned(7 downto 0)  := "00000000";
signal mM2S_W_WVALIDm_M2S_W_WVALIDHardLink : std_logic := '0';
signal mM2S_B_BREADYm_M2S_B_BREADYHardLink : std_logic := '0';
type State_ReadDataArray is array(0 to 3) of unsigned(7 downto 0);
signal State_ReadData : State_ReadDataArray := (others => (others => '0'));
type NextState_ReadDataArray is array(0 to 3) of unsigned(7 downto 0);
signal NextState_ReadData : NextState_ReadDataArray := (others => (others => '0'));
signal BoardSignals : BoardSignalsType;
signal InternalReset : std_logic := '0';
begin
work.Quokka.BoardSignalsProc(BoardSignals,Clock,Reset,InternalReset);
process (Clock, NextState_ReadData, Reset, State_ReadDataDefault)
begin
if rising_edge(Clock) then
if ( Reset = '1' ) then
for State_ReadData_Iterator in 0 to 3 loop
State_ReadData(State_ReadData_Iterator) <= State_ReadDataDefault;
end loop;
else
for State_ReadData_Iterator in 0 to 3 loop
State_ReadData(State_ReadData_Iterator) <= NextState_ReadData(State_ReadData_Iterator);
end loop;
end if;
end if;
end process;
AXI4MasterSlaveMemoryTestModule_TopLevel_AXI4MasterSlaveMemoryTestModule_s : entity work.AXI4MasterSlaveMemoryTestModule_TopLevel_AXI4MasterSlaveMemoryTestModule_s port map
(
--[BEGIN USER MAP FOR s]
--[END USER MAP FOR s]
BoardSignals => BoardSignals,
M2S_AR_ARID => sM2S_AR_ARIDs_M2S_AR_ARIDHardLink,
M2S_AR_ARADDR => sM2S_AR_ARADDRs_M2S_AR_ARADDRHardLink,
M2S_AR_ARLEN => sM2S_AR_ARLENs_M2S_AR_ARLENHardLink,
M2S_AR_ARSIZE => sM2S_AR_ARSIZEs_M2S_AR_ARSIZEHardLink,
M2S_AR_ARBURST => sM2S_AR_ARBURSTs_M2S_AR_ARBURSTHardLink,
M2S_AR_ARLOCK => sM2S_AR_ARLOCKs_M2S_AR_ARLOCKHardLink,
M2S_AR_ARCACHE => sM2S_AR_ARCACHEs_M2S_AR_ARCACHEHardLink,
M2S_AR_ARPROT => sM2S_AR_ARPROTs_M2S_AR_ARPROTHardLink,
M2S_AR_ARQOS => sM2S_AR_ARQOSs_M2S_AR_ARQOSHardLink,
M2S_AR_ARREGION => sM2S_AR_ARREGIONs_M2S_AR_ARREGIONHardLink,
M2S_AR_ARUSER => sM2S_AR_ARUSERs_M2S_AR_ARUSERHardLink,
M2S_AR_ARVALID => sM2S_AR_ARVALIDs_M2S_AR_ARVALIDHardLink,
M2S_R_RREADY => sM2S_R_RREADYs_M2S_R_RREADYHardLink,
M2S_AW_AWID => sM2S_AW_AWIDs_M2S_AW_AWIDHardLink,
M2S_AW_AWADDR => sM2S_AW_AWADDRs_M2S_AW_AWADDRHardLink,
M2S_AW_AWLEN => sM2S_AW_AWLENs_M2S_AW_AWLENHardLink,
M2S_AW_AWSIZE => sM2S_AW_AWSIZEs_M2S_AW_AWSIZEHardLink,
M2S_AW_AWBURST => sM2S_AW_AWBURSTs_M2S_AW_AWBURSTHardLink,
M2S_AW_AWLOCK => sM2S_AW_AWLOCKs_M2S_AW_AWLOCKHardLink,
M2S_AW_AWCACHE => sM2S_AW_AWCACHEs_M2S_AW_AWCACHEHardLink,
M2S_AW_AWPROT => sM2S_AW_AWPROTs_M2S_AW_AWPROTHardLink,
M2S_AW_AWQOS => sM2S_AW_AWQOSs_M2S_AW_AWQOSHardLink,
M2S_AW_AWREGION => sM2S_AW_AWREGIONs_M2S_AW_AWREGIONHardLink,
M2S_AW_AWUSER => sM2S_AW_AWUSERs_M2S_AW_AWUSERHardLink,
M2S_AW_AWVALID => sM2S_AW_AWVALIDs_M2S_AW_AWVALIDHardLink,
M2S_W_WID => sM2S_W_WIDs_M2S_W_WIDHardLink,
M2S_W_WDATA0 => sM2S_W_WDATA0s_M2S_W_WDATA0HardLink,
M2S_W_WDATA1 => sM2S_W_WDATA1s_M2S_W_WDATA1HardLink,
M2S_W_WDATA2 => sM2S_W_WDATA2s_M2S_W_WDATA2HardLink,
M2S_W_WDATA3 => sM2S_W_WDATA3s_M2S_W_WDATA3HardLink,
M2S_W_WSTRB => sM2S_W_WSTRBs_M2S_W_WSTRBHardLink,
M2S_W_WLAST => sM2S_W_WLASTs_M2S_W_WLASTHardLink,
M2S_W_WUSER => sM2S_W_WUSERs_M2S_W_WUSERHardLink,
M2S_W_WVALID => sM2S_W_WVALIDs_M2S_W_WVALIDHardLink,
M2S_B_BREADY => sM2S_B_BREADYs_M2S_B_BREADYHardLink,
S2M_AR_ARREADY => sS2M_AR_ARREADYs_S2M_AR_ARREADYHardLink,
S2M_AW_AWREADY => sS2M_AW_AWREADYs_S2M_AW_AWREADYHardLink,
S2M_B_BID => sS2M_B_BIDs_S2M_B_BIDHardLink,
S2M_B_BRESP => sS2M_B_BRESPs_S2M_B_BRESPHardLink,
S2M_B_BUSER => sS2M_B_BUSERs_S2M_B_BUSERHardLink,
S2M_B_BVALID => sS2M_B_BVALIDs_S2M_B_BVALIDHardLink,
S2M_R_RID => sS2M_R_RIDs_S2M_R_RIDHardLink,
S2M_R_RDATA0 => sS2M_R_RDATA0s_S2M_R_RDATA0HardLink,
S2M_R_RDATA1 => sS2M_R_RDATA1s_S2M_R_RDATA1HardLink,
S2M_R_RDATA2 => sS2M_R_RDATA2s_S2M_R_RDATA2HardLink,
S2M_R_RDATA3 => sS2M_R_RDATA3s_S2M_R_RDATA3HardLink,
S2M_R_RRESP => sS2M_R_RRESPs_S2M_R_RRESPHardLink,
S2M_R_RLAST => sS2M_R_RLASTs_S2M_R_RLASTHardLink,
S2M_R_RUSER => sS2M_R_RUSERs_S2M_R_RUSERHardLink,
S2M_R_RVALID => sS2M_R_RVALIDs_S2M_R_RVALIDHardLink,
S2M_W_WREADY => sS2M_W_WREADYs_S2M_W_WREADYHardLink

);
AXI4MasterSlaveMemoryTestModule_TopLevel_AXI4MasterSlaveMemoryTestModule_m : entity work.AXI4MasterSlaveMemoryTestModule_TopLevel_AXI4MasterSlaveMemoryTestModule_m port map
(
--[BEGIN USER MAP FOR m]
--[END USER MAP FOR m]
BoardSignals => BoardSignals,
S2M_AR_ARREADY => mS2M_AR_ARREADYm_S2M_AR_ARREADYHardLink,
S2M_AW_AWREADY => mS2M_AW_AWREADYm_S2M_AW_AWREADYHardLink,
S2M_B_BID => mS2M_B_BIDm_S2M_B_BIDHardLink,
S2M_B_BRESP => mS2M_B_BRESPm_S2M_B_BRESPHardLink,
S2M_B_BUSER => mS2M_B_BUSERm_S2M_B_BUSERHardLink,
S2M_B_BVALID => mS2M_B_BVALIDm_S2M_B_BVALIDHardLink,
S2M_R_RID => mS2M_R_RIDm_S2M_R_RIDHardLink,
S2M_R_RDATA0 => mS2M_R_RDATA0m_S2M_R_RDATA0HardLink,
S2M_R_RDATA1 => mS2M_R_RDATA1m_S2M_R_RDATA1HardLink,
S2M_R_RDATA2 => mS2M_R_RDATA2m_S2M_R_RDATA2HardLink,
S2M_R_RDATA3 => mS2M_R_RDATA3m_S2M_R_RDATA3HardLink,
S2M_R_RRESP => mS2M_R_RRESPm_S2M_R_RRESPHardLink,
S2M_R_RLAST => mS2M_R_RLASTm_S2M_R_RLASTHardLink,
S2M_R_RUSER => mS2M_R_RUSERm_S2M_R_RUSERHardLink,
S2M_R_RVALID => mS2M_R_RVALIDm_S2M_R_RVALIDHardLink,
S2M_W_WREADY => mS2M_W_WREADYm_S2M_W_WREADYHardLink,
AXADDR => mAXADDRm_AXADDRHardLink,
RE => mREm_REHardLink,
WE => mWEm_WEHardLink,
WDATA0 => mWDATA0m_WDATA0HardLink,
WDATA1 => mWDATA1m_WDATA1HardLink,
WDATA2 => mWDATA2m_WDATA2HardLink,
WDATA3 => mWDATA3m_WDATA3HardLink,
WSTRB => mWSTRBm_WSTRBHardLink,
InvalidInputs => mInvalidInputsm_InvalidInputsHardLink,
OutACK => mOutACKm_OutACKHardLink,
RDATA0 => mRDATA0m_RDATA0HardLink,
RDATA1 => mRDATA1m_RDATA1HardLink,
RDATA2 => mRDATA2m_RDATA2HardLink,
RDATA3 => mRDATA3m_RDATA3HardLink,
M2S_AR_ARID => mM2S_AR_ARIDm_M2S_AR_ARIDHardLink,
M2S_AR_ARADDR => mM2S_AR_ARADDRm_M2S_AR_ARADDRHardLink,
M2S_AR_ARLEN => mM2S_AR_ARLENm_M2S_AR_ARLENHardLink,
M2S_AR_ARSIZE => mM2S_AR_ARSIZEm_M2S_AR_ARSIZEHardLink,
M2S_AR_ARBURST => mM2S_AR_ARBURSTm_M2S_AR_ARBURSTHardLink,
M2S_AR_ARLOCK => mM2S_AR_ARLOCKm_M2S_AR_ARLOCKHardLink,
M2S_AR_ARCACHE => mM2S_AR_ARCACHEm_M2S_AR_ARCACHEHardLink,
M2S_AR_ARPROT => mM2S_AR_ARPROTm_M2S_AR_ARPROTHardLink,
M2S_AR_ARQOS => mM2S_AR_ARQOSm_M2S_AR_ARQOSHardLink,
M2S_AR_ARREGION => mM2S_AR_ARREGIONm_M2S_AR_ARREGIONHardLink,
M2S_AR_ARUSER => mM2S_AR_ARUSERm_M2S_AR_ARUSERHardLink,
M2S_AR_ARVALID => mM2S_AR_ARVALIDm_M2S_AR_ARVALIDHardLink,
M2S_R_RREADY => mM2S_R_RREADYm_M2S_R_RREADYHardLink,
M2S_AW_AWID => mM2S_AW_AWIDm_M2S_AW_AWIDHardLink,
M2S_AW_AWADDR => mM2S_AW_AWADDRm_M2S_AW_AWADDRHardLink,
M2S_AW_AWLEN => mM2S_AW_AWLENm_M2S_AW_AWLENHardLink,
M2S_AW_AWSIZE => mM2S_AW_AWSIZEm_M2S_AW_AWSIZEHardLink,
M2S_AW_AWBURST => mM2S_AW_AWBURSTm_M2S_AW_AWBURSTHardLink,
M2S_AW_AWLOCK => mM2S_AW_AWLOCKm_M2S_AW_AWLOCKHardLink,
M2S_AW_AWCACHE => mM2S_AW_AWCACHEm_M2S_AW_AWCACHEHardLink,
M2S_AW_AWPROT => mM2S_AW_AWPROTm_M2S_AW_AWPROTHardLink,
M2S_AW_AWQOS => mM2S_AW_AWQOSm_M2S_AW_AWQOSHardLink,
M2S_AW_AWREGION => mM2S_AW_AWREGIONm_M2S_AW_AWREGIONHardLink,
M2S_AW_AWUSER => mM2S_AW_AWUSERm_M2S_AW_AWUSERHardLink,
M2S_AW_AWVALID => mM2S_AW_AWVALIDm_M2S_AW_AWVALIDHardLink,
M2S_W_WID => mM2S_W_WIDm_M2S_W_WIDHardLink,
M2S_W_WDATA0 => mM2S_W_WDATA0m_M2S_W_WDATA0HardLink,
M2S_W_WDATA1 => mM2S_W_WDATA1m_M2S_W_WDATA1HardLink,
M2S_W_WDATA2 => mM2S_W_WDATA2m_M2S_W_WDATA2HardLink,
M2S_W_WDATA3 => mM2S_W_WDATA3m_M2S_W_WDATA3HardLink,
M2S_W_WSTRB => mM2S_W_WSTRBm_M2S_W_WSTRBHardLink,
M2S_W_WLAST => mM2S_W_WLASTm_M2S_W_WLASTHardLink,
M2S_W_WUSER => mM2S_W_WUSERm_M2S_W_WUSERHardLink,
M2S_W_WVALID => mM2S_W_WVALIDm_M2S_W_WVALIDHardLink,
M2S_B_BREADY => mM2S_B_BREADYm_M2S_B_BREADYHardLink

);
process(s_S2M_R_RDATA0, s_S2M_R_RDATA1, s_S2M_R_RDATA2, s_S2M_R_RDATA3, s_S2M_R_RVALID, State_ReadData)
begin
for NextState_ReadData_Iterator in 0 to 3 loop
NextState_ReadData(NextState_ReadData_Iterator) <= State_ReadData(NextState_ReadData_Iterator);
end loop;
if ( s_S2M_R_RVALID = '1' ) then
NextState_ReadData(0) <= s_S2M_R_RDATA0;
NextState_ReadData(1) <= s_S2M_R_RDATA1;
NextState_ReadData(2) <= s_S2M_R_RDATA2;
NextState_ReadData(3) <= s_S2M_R_RDATA3;
end if;
end process;
process(AXADDR, AXI4MasterSlaveMemoryTestModule_L34F45T69_Source, AXI4MasterSlaveMemoryTestModule_L52F25T55_Source, AXI4MasterSlaveMemoryTestModule_L53F25T55_Source, AXI4MasterSlaveMemoryTestModule_L53F25T60_Index, InData, Inputs_AXADDR, Inputs_InData, Inputs_RE, Inputs_WE, m_AXADDR, m_M2S_AR_ARADDR, m_M2S_AR_ARBURST, m_M2S_AR_ARCACHE, m_M2S_AR_ARID, m_M2S_AR_ARLEN, m_M2S_AR_ARLOCK, m_M2S_AR_ARPROT, m_M2S_AR_ARQOS, m_M2S_AR_ARREGION, m_M2S_AR_ARSIZE, m_M2S_AR_ARUSER, m_M2S_AR_ARVALID, m_M2S_AW_AWADDR, m_M2S_AW_AWBURST, m_M2S_AW_AWCACHE, m_M2S_AW_AWID, m_M2S_AW_AWLEN, m_M2S_AW_AWLOCK, m_M2S_AW_AWPROT, m_M2S_AW_AWQOS, m_M2S_AW_AWREGION, m_M2S_AW_AWSIZE, m_M2S_AW_AWUSER, m_M2S_AW_AWVALID, m_M2S_B_BREADY, m_M2S_R_RREADY, m_M2S_W_WDATA0, m_M2S_W_WDATA1, m_M2S_W_WDATA2, m_M2S_W_WDATA3, m_M2S_W_WID, m_M2S_W_WLAST, m_M2S_W_WSTRB, m_M2S_W_WUSER, m_M2S_W_WVALID, m_OutACK, m_RDATA0, m_RDATA1, m_RDATA2, m_RDATA3, m_RE, m_S2M_AR_ARREADY, m_S2M_AW_AWREADY, m_S2M_B_BID, m_S2M_B_BRESP, m_S2M_B_BUSER, m_S2M_B_BVALID, m_S2M_R_RDATA0, m_S2M_R_RDATA1, m_S2M_R_RDATA2, m_S2M_R_RDATA3, m_S2M_R_RID, m_S2M_R_RLAST, m_S2M_R_RRESP, m_S2M_R_RUSER, m_S2M_R_RVALID, m_S2M_W_WREADY, m_WDATA0, m_WDATA1, m_WDATA2, m_WDATA3, m_WE, m_WSTRB, mInvalidInputsm_InvalidInputsHardLink, mM2S_AR_ARADDRm_M2S_AR_ARADDRHardLink, mM2S_AR_ARBURSTm_M2S_AR_ARBURSTHardLink, mM2S_AR_ARCACHEm_M2S_AR_ARCACHEHardLink, mM2S_AR_ARIDm_M2S_AR_ARIDHardLink, mM2S_AR_ARLENm_M2S_AR_ARLENHardLink, mM2S_AR_ARLOCKm_M2S_AR_ARLOCKHardLink, mM2S_AR_ARPROTm_M2S_AR_ARPROTHardLink, mM2S_AR_ARQOSm_M2S_AR_ARQOSHardLink, mM2S_AR_ARREGIONm_M2S_AR_ARREGIONHardLink, mM2S_AR_ARSIZEm_M2S_AR_ARSIZEHardLink, mM2S_AR_ARUSERm_M2S_AR_ARUSERHardLink, mM2S_AR_ARVALIDm_M2S_AR_ARVALIDHardLink, mM2S_AW_AWADDRm_M2S_AW_AWADDRHardLink, mM2S_AW_AWBURSTm_M2S_AW_AWBURSTHardLink, mM2S_AW_AWCACHEm_M2S_AW_AWCACHEHardLink, mM2S_AW_AWIDm_M2S_AW_AWIDHardLink, mM2S_AW_AWLENm_M2S_AW_AWLENHardLink, mM2S_AW_AWLOCKm_M2S_AW_AWLOCKHardLink, mM2S_AW_AWPROTm_M2S_AW_AWPROTHardLink, mM2S_AW_AWQOSm_M2S_AW_AWQOSHardLink, mM2S_AW_AWREGIONm_M2S_AW_AWREGIONHardLink, mM2S_AW_AWSIZEm_M2S_AW_AWSIZEHardLink, mM2S_AW_AWUSERm_M2S_AW_AWUSERHardLink, mM2S_AW_AWVALIDm_M2S_AW_AWVALIDHardLink, mM2S_B_BREADYm_M2S_B_BREADYHardLink, mM2S_R_RREADYm_M2S_R_RREADYHardLink, mM2S_W_WDATA0m_M2S_W_WDATA0HardLink, mM2S_W_WDATA1m_M2S_W_WDATA1HardLink, mM2S_W_WDATA2m_M2S_W_WDATA2HardLink, mM2S_W_WDATA3m_M2S_W_WDATA3HardLink, mM2S_W_WIDm_M2S_W_WIDHardLink, mM2S_W_WLASTm_M2S_W_WLASTHardLink, mM2S_W_WSTRBm_M2S_W_WSTRBHardLink, mM2S_W_WUSERm_M2S_W_WUSERHardLink, mM2S_W_WVALIDm_M2S_W_WVALIDHardLink, mOutACKm_OutACKHardLink, mRDATA0m_RDATA0HardLink, mRDATA1m_RDATA1HardLink, mRDATA2m_RDATA2HardLink, mRDATA3m_RDATA3HardLink, RE, s_M2S_AR_ARADDR, s_M2S_AR_ARBURST, s_M2S_AR_ARCACHE, s_M2S_AR_ARID, s_M2S_AR_ARLEN, s_M2S_AR_ARLOCK, s_M2S_AR_ARPROT, s_M2S_AR_ARQOS, s_M2S_AR_ARREGION, s_M2S_AR_ARSIZE, s_M2S_AR_ARUSER, s_M2S_AR_ARVALID, s_M2S_AW_AWADDR, s_M2S_AW_AWBURST, s_M2S_AW_AWCACHE, s_M2S_AW_AWID, s_M2S_AW_AWLEN, s_M2S_AW_AWLOCK, s_M2S_AW_AWPROT, s_M2S_AW_AWQOS, s_M2S_AW_AWREGION, s_M2S_AW_AWSIZE, s_M2S_AW_AWUSER, s_M2S_AW_AWVALID, s_M2S_B_BREADY, s_M2S_R_RREADY, s_M2S_W_WDATA0, s_M2S_W_WDATA1, s_M2S_W_WDATA2, s_M2S_W_WDATA3, s_M2S_W_WID, s_M2S_W_WLAST, s_M2S_W_WSTRB, s_M2S_W_WUSER, s_M2S_W_WVALID, s_S2M_AR_ARREADY, s_S2M_AW_AWREADY, s_S2M_B_BID, s_S2M_B_BRESP, s_S2M_B_BUSER, s_S2M_B_BVALID, s_S2M_R_RDATA0, s_S2M_R_RDATA1, s_S2M_R_RDATA2, s_S2M_R_RDATA3, s_S2M_R_RID, s_S2M_R_RLAST, s_S2M_R_RRESP, s_S2M_R_RUSER, s_S2M_R_RVALID, s_S2M_W_WREADY, sS2M_AR_ARREADYs_S2M_AR_ARREADYHardLink, sS2M_AW_AWREADYs_S2M_AW_AWREADYHardLink, sS2M_B_BIDs_S2M_B_BIDHardLink, sS2M_B_BRESPs_S2M_B_BRESPHardLink, sS2M_B_BUSERs_S2M_B_BUSERHardLink, sS2M_B_BVALIDs_S2M_B_BVALIDHardLink, sS2M_R_RDATA0s_S2M_R_RDATA0HardLink, sS2M_R_RDATA1s_S2M_R_RDATA1HardLink, sS2M_R_RDATA2s_S2M_R_RDATA2HardLink, sS2M_R_RDATA3s_S2M_R_RDATA3HardLink, sS2M_R_RIDs_S2M_R_RIDHardLink, sS2M_R_RLASTs_S2M_R_RLASTHardLink, sS2M_R_RRESPs_S2M_R_RRESPHardLink, sS2M_R_RUSERs_S2M_R_RUSERHardLink, sS2M_R_RVALIDs_S2M_R_RVALIDHardLink, sS2M_W_WREADYs_S2M_W_WREADYHardLink, SWE, WE)
begin
Inputs_AXADDR <= AXADDR;
Inputs_InData <= InData;
Inputs_WE <= WE;
Inputs_RE <= RE;
Inputs_SWE <= SWE;
s_M2S_AR_ARID <= m_M2S_AR_ARID;
s_M2S_AR_ARADDR <= m_M2S_AR_ARADDR;
s_M2S_AR_ARLEN <= m_M2S_AR_ARLEN;
s_M2S_AR_ARSIZE <= m_M2S_AR_ARSIZE;
s_M2S_AR_ARBURST <= m_M2S_AR_ARBURST;
s_M2S_AR_ARLOCK <= m_M2S_AR_ARLOCK;
s_M2S_AR_ARCACHE <= m_M2S_AR_ARCACHE;
s_M2S_AR_ARPROT <= m_M2S_AR_ARPROT;
s_M2S_AR_ARQOS <= m_M2S_AR_ARQOS;
s_M2S_AR_ARREGION <= m_M2S_AR_ARREGION;
s_M2S_AR_ARUSER <= m_M2S_AR_ARUSER;
s_M2S_AR_ARVALID <= m_M2S_AR_ARVALID;
s_M2S_R_RREADY <= m_M2S_R_RREADY;
s_M2S_AW_AWID <= m_M2S_AW_AWID;
s_M2S_AW_AWADDR <= m_M2S_AW_AWADDR;
s_M2S_AW_AWLEN <= m_M2S_AW_AWLEN;
s_M2S_AW_AWSIZE <= m_M2S_AW_AWSIZE;
s_M2S_AW_AWBURST <= m_M2S_AW_AWBURST;
s_M2S_AW_AWLOCK <= m_M2S_AW_AWLOCK;
s_M2S_AW_AWCACHE <= m_M2S_AW_AWCACHE;
s_M2S_AW_AWPROT <= m_M2S_AW_AWPROT;
s_M2S_AW_AWQOS <= m_M2S_AW_AWQOS;
s_M2S_AW_AWREGION <= m_M2S_AW_AWREGION;
s_M2S_AW_AWUSER <= m_M2S_AW_AWUSER;
s_M2S_AW_AWVALID <= m_M2S_AW_AWVALID;
s_M2S_W_WID <= m_M2S_W_WID;
s_M2S_W_WDATA0 <= m_M2S_W_WDATA0;
s_M2S_W_WDATA1 <= m_M2S_W_WDATA1;
s_M2S_W_WDATA2 <= m_M2S_W_WDATA2;
s_M2S_W_WDATA3 <= m_M2S_W_WDATA3;
s_M2S_W_WSTRB <= m_M2S_W_WSTRB;
s_M2S_W_WLAST <= m_M2S_W_WLAST;
s_M2S_W_WUSER <= m_M2S_W_WUSER;
s_M2S_W_WVALID <= m_M2S_W_WVALID;
s_M2S_B_BREADY <= m_M2S_B_BREADY;
AXI4MasterSlaveMemoryTestModule_L52F25T55_Source <= Inputs_InData;
AXI4MasterSlaveMemoryTestModule_L53F25T55_Source <= AXI4MasterSlaveMemoryTestModule_L53F41T54_Expr;
AXI4MasterSlaveMemoryTestModule_L53F25T60_Index <= AXI4MasterSlaveMemoryTestModule_L53F25T55_Source(3 downto 0);
m_S2M_AR_ARREADY <= s_S2M_AR_ARREADY;
m_S2M_AW_AWREADY <= s_S2M_AW_AWREADY;
m_S2M_B_BID <= s_S2M_B_BID;
m_S2M_B_BRESP <= s_S2M_B_BRESP;
m_S2M_B_BUSER <= s_S2M_B_BUSER;
m_S2M_B_BVALID <= s_S2M_B_BVALID;
m_S2M_R_RID <= s_S2M_R_RID;
m_S2M_R_RDATA0 <= s_S2M_R_RDATA0;
m_S2M_R_RDATA1 <= s_S2M_R_RDATA1;
m_S2M_R_RDATA2 <= s_S2M_R_RDATA2;
m_S2M_R_RDATA3 <= s_S2M_R_RDATA3;
m_S2M_R_RRESP <= s_S2M_R_RRESP;
m_S2M_R_RLAST <= s_S2M_R_RLAST;
m_S2M_R_RUSER <= s_S2M_R_RUSER;
m_S2M_R_RVALID <= s_S2M_R_RVALID;
m_S2M_W_WREADY <= s_S2M_W_WREADY;
m_AXADDR <= Inputs_AXADDR;
m_RE <= Inputs_RE;
m_WE <= Inputs_WE;
m_WDATA0 <= AXI4MasterSlaveMemoryTestModule_L52F25T55_Source(7 downto 0);
m_WDATA1 <= AXI4MasterSlaveMemoryTestModule_L52F25T55_Source(15 downto 8);
m_WDATA2 <= AXI4MasterSlaveMemoryTestModule_L52F25T55_Source(23 downto 16);
m_WDATA3 <= AXI4MasterSlaveMemoryTestModule_L52F25T55_Source(31 downto 24);
m_WSTRB <= AXI4MasterSlaveMemoryTestModule_L53F25T60_Index;
OutACK <= m_OutACK;
OutMasterData0 <= m_RDATA0;
OutMasterData1 <= m_RDATA1;
OutMasterData2 <= m_RDATA2;
OutMasterData3 <= m_RDATA3;
AXI4MasterSlaveMemoryTestModule_L34F45T69_Source <= (0 => m_RDATA0(0), 1 => m_RDATA0(1), 2 => m_RDATA0(2), 3 => m_RDATA0(3), 4 => m_RDATA0(4), 5 => m_RDATA0(5), 6 => m_RDATA0(6), 7 => m_RDATA0(7), 8 => m_RDATA1(0), 9 => m_RDATA1(1), 10 => m_RDATA1(2), 11 => m_RDATA1(3), 12 => m_RDATA1(4), 13 => m_RDATA1(5), 14 => m_RDATA1(6), 15 => m_RDATA1(7), 16 => m_RDATA2(0), 17 => m_RDATA2(1), 18 => m_RDATA2(2), 19 => m_RDATA2(3), 20 => m_RDATA2(4), 21 => m_RDATA2(5), 22 => m_RDATA2(6), 23 => m_RDATA2(7), 24 => m_RDATA3(0), 25 => m_RDATA3(1), 26 => m_RDATA3(2), 27 => m_RDATA3(3), 28 => m_RDATA3(4), 29 => m_RDATA3(5), 30 => m_RDATA3(6), 31 => m_RDATA3(7), others => '0');
OutMasterWord <= AXI4MasterSlaveMemoryTestModule_L34F45T69_Source;
sM2S_AR_ARIDs_M2S_AR_ARIDHardLink <= s_M2S_AR_ARID;
sM2S_AR_ARADDRs_M2S_AR_ARADDRHardLink <= s_M2S_AR_ARADDR;
sM2S_AR_ARLENs_M2S_AR_ARLENHardLink <= s_M2S_AR_ARLEN;
sM2S_AR_ARSIZEs_M2S_AR_ARSIZEHardLink <= s_M2S_AR_ARSIZE;
sM2S_AR_ARBURSTs_M2S_AR_ARBURSTHardLink <= s_M2S_AR_ARBURST;
sM2S_AR_ARLOCKs_M2S_AR_ARLOCKHardLink <= s_M2S_AR_ARLOCK;
sM2S_AR_ARCACHEs_M2S_AR_ARCACHEHardLink <= s_M2S_AR_ARCACHE;
sM2S_AR_ARPROTs_M2S_AR_ARPROTHardLink <= s_M2S_AR_ARPROT;
sM2S_AR_ARQOSs_M2S_AR_ARQOSHardLink <= s_M2S_AR_ARQOS;
sM2S_AR_ARREGIONs_M2S_AR_ARREGIONHardLink <= s_M2S_AR_ARREGION;
sM2S_AR_ARUSERs_M2S_AR_ARUSERHardLink <= s_M2S_AR_ARUSER;
sM2S_AR_ARVALIDs_M2S_AR_ARVALIDHardLink <= s_M2S_AR_ARVALID;
sM2S_R_RREADYs_M2S_R_RREADYHardLink <= s_M2S_R_RREADY;
sM2S_AW_AWIDs_M2S_AW_AWIDHardLink <= s_M2S_AW_AWID;
sM2S_AW_AWADDRs_M2S_AW_AWADDRHardLink <= s_M2S_AW_AWADDR;
sM2S_AW_AWLENs_M2S_AW_AWLENHardLink <= s_M2S_AW_AWLEN;
sM2S_AW_AWSIZEs_M2S_AW_AWSIZEHardLink <= s_M2S_AW_AWSIZE;
sM2S_AW_AWBURSTs_M2S_AW_AWBURSTHardLink <= s_M2S_AW_AWBURST;
sM2S_AW_AWLOCKs_M2S_AW_AWLOCKHardLink <= s_M2S_AW_AWLOCK;
sM2S_AW_AWCACHEs_M2S_AW_AWCACHEHardLink <= s_M2S_AW_AWCACHE;
sM2S_AW_AWPROTs_M2S_AW_AWPROTHardLink <= s_M2S_AW_AWPROT;
sM2S_AW_AWQOSs_M2S_AW_AWQOSHardLink <= s_M2S_AW_AWQOS;
sM2S_AW_AWREGIONs_M2S_AW_AWREGIONHardLink <= s_M2S_AW_AWREGION;
sM2S_AW_AWUSERs_M2S_AW_AWUSERHardLink <= s_M2S_AW_AWUSER;
sM2S_AW_AWVALIDs_M2S_AW_AWVALIDHardLink <= s_M2S_AW_AWVALID;
sM2S_W_WIDs_M2S_W_WIDHardLink <= s_M2S_W_WID;
sM2S_W_WDATA0s_M2S_W_WDATA0HardLink <= s_M2S_W_WDATA0;
sM2S_W_WDATA1s_M2S_W_WDATA1HardLink <= s_M2S_W_WDATA1;
sM2S_W_WDATA2s_M2S_W_WDATA2HardLink <= s_M2S_W_WDATA2;
sM2S_W_WDATA3s_M2S_W_WDATA3HardLink <= s_M2S_W_WDATA3;
sM2S_W_WSTRBs_M2S_W_WSTRBHardLink <= s_M2S_W_WSTRB;
sM2S_W_WLASTs_M2S_W_WLASTHardLink <= s_M2S_W_WLAST;
sM2S_W_WUSERs_M2S_W_WUSERHardLink <= s_M2S_W_WUSER;
sM2S_W_WVALIDs_M2S_W_WVALIDHardLink <= s_M2S_W_WVALID;
sM2S_B_BREADYs_M2S_B_BREADYHardLink <= s_M2S_B_BREADY;
s_S2M_AR_ARREADY <= sS2M_AR_ARREADYs_S2M_AR_ARREADYHardLink;
s_S2M_AW_AWREADY <= sS2M_AW_AWREADYs_S2M_AW_AWREADYHardLink;
s_S2M_B_BID <= sS2M_B_BIDs_S2M_B_BIDHardLink;
s_S2M_B_BRESP <= sS2M_B_BRESPs_S2M_B_BRESPHardLink;
s_S2M_B_BUSER <= sS2M_B_BUSERs_S2M_B_BUSERHardLink;
s_S2M_B_BVALID <= sS2M_B_BVALIDs_S2M_B_BVALIDHardLink;
s_S2M_R_RID <= sS2M_R_RIDs_S2M_R_RIDHardLink;
s_S2M_R_RDATA0 <= sS2M_R_RDATA0s_S2M_R_RDATA0HardLink;
s_S2M_R_RDATA1 <= sS2M_R_RDATA1s_S2M_R_RDATA1HardLink;
s_S2M_R_RDATA2 <= sS2M_R_RDATA2s_S2M_R_RDATA2HardLink;
s_S2M_R_RDATA3 <= sS2M_R_RDATA3s_S2M_R_RDATA3HardLink;
s_S2M_R_RRESP <= sS2M_R_RRESPs_S2M_R_RRESPHardLink;
s_S2M_R_RLAST <= sS2M_R_RLASTs_S2M_R_RLASTHardLink;
s_S2M_R_RUSER <= sS2M_R_RUSERs_S2M_R_RUSERHardLink;
s_S2M_R_RVALID <= sS2M_R_RVALIDs_S2M_R_RVALIDHardLink;
s_S2M_W_WREADY <= sS2M_W_WREADYs_S2M_W_WREADYHardLink;
mS2M_AR_ARREADYm_S2M_AR_ARREADYHardLink <= m_S2M_AR_ARREADY;
mS2M_AW_AWREADYm_S2M_AW_AWREADYHardLink <= m_S2M_AW_AWREADY;
mS2M_B_BIDm_S2M_B_BIDHardLink <= m_S2M_B_BID;
mS2M_B_BRESPm_S2M_B_BRESPHardLink <= m_S2M_B_BRESP;
mS2M_B_BUSERm_S2M_B_BUSERHardLink <= m_S2M_B_BUSER;
mS2M_B_BVALIDm_S2M_B_BVALIDHardLink <= m_S2M_B_BVALID;
mS2M_R_RIDm_S2M_R_RIDHardLink <= m_S2M_R_RID;
mS2M_R_RDATA0m_S2M_R_RDATA0HardLink <= m_S2M_R_RDATA0;
mS2M_R_RDATA1m_S2M_R_RDATA1HardLink <= m_S2M_R_RDATA1;
mS2M_R_RDATA2m_S2M_R_RDATA2HardLink <= m_S2M_R_RDATA2;
mS2M_R_RDATA3m_S2M_R_RDATA3HardLink <= m_S2M_R_RDATA3;
mS2M_R_RRESPm_S2M_R_RRESPHardLink <= m_S2M_R_RRESP;
mS2M_R_RLASTm_S2M_R_RLASTHardLink <= m_S2M_R_RLAST;
mS2M_R_RUSERm_S2M_R_RUSERHardLink <= m_S2M_R_RUSER;
mS2M_R_RVALIDm_S2M_R_RVALIDHardLink <= m_S2M_R_RVALID;
mS2M_W_WREADYm_S2M_W_WREADYHardLink <= m_S2M_W_WREADY;
mAXADDRm_AXADDRHardLink <= m_AXADDR;
mREm_REHardLink <= m_RE;
mWEm_WEHardLink <= m_WE;
mWDATA0m_WDATA0HardLink <= m_WDATA0;
mWDATA1m_WDATA1HardLink <= m_WDATA1;
mWDATA2m_WDATA2HardLink <= m_WDATA2;
mWDATA3m_WDATA3HardLink <= m_WDATA3;
mWSTRBm_WSTRBHardLink <= m_WSTRB;
m_InvalidInputs <= mInvalidInputsm_InvalidInputsHardLink;
m_OutACK <= mOutACKm_OutACKHardLink;
m_RDATA0 <= mRDATA0m_RDATA0HardLink;
m_RDATA1 <= mRDATA1m_RDATA1HardLink;
m_RDATA2 <= mRDATA2m_RDATA2HardLink;
m_RDATA3 <= mRDATA3m_RDATA3HardLink;
m_M2S_AR_ARID <= mM2S_AR_ARIDm_M2S_AR_ARIDHardLink;
m_M2S_AR_ARADDR <= mM2S_AR_ARADDRm_M2S_AR_ARADDRHardLink;
m_M2S_AR_ARLEN <= mM2S_AR_ARLENm_M2S_AR_ARLENHardLink;
m_M2S_AR_ARSIZE <= mM2S_AR_ARSIZEm_M2S_AR_ARSIZEHardLink;
m_M2S_AR_ARBURST <= mM2S_AR_ARBURSTm_M2S_AR_ARBURSTHardLink;
m_M2S_AR_ARLOCK <= mM2S_AR_ARLOCKm_M2S_AR_ARLOCKHardLink;
m_M2S_AR_ARCACHE <= mM2S_AR_ARCACHEm_M2S_AR_ARCACHEHardLink;
m_M2S_AR_ARPROT <= mM2S_AR_ARPROTm_M2S_AR_ARPROTHardLink;
m_M2S_AR_ARQOS <= mM2S_AR_ARQOSm_M2S_AR_ARQOSHardLink;
m_M2S_AR_ARREGION <= mM2S_AR_ARREGIONm_M2S_AR_ARREGIONHardLink;
m_M2S_AR_ARUSER <= mM2S_AR_ARUSERm_M2S_AR_ARUSERHardLink;
m_M2S_AR_ARVALID <= mM2S_AR_ARVALIDm_M2S_AR_ARVALIDHardLink;
m_M2S_R_RREADY <= mM2S_R_RREADYm_M2S_R_RREADYHardLink;
m_M2S_AW_AWID <= mM2S_AW_AWIDm_M2S_AW_AWIDHardLink;
m_M2S_AW_AWADDR <= mM2S_AW_AWADDRm_M2S_AW_AWADDRHardLink;
m_M2S_AW_AWLEN <= mM2S_AW_AWLENm_M2S_AW_AWLENHardLink;
m_M2S_AW_AWSIZE <= mM2S_AW_AWSIZEm_M2S_AW_AWSIZEHardLink;
m_M2S_AW_AWBURST <= mM2S_AW_AWBURSTm_M2S_AW_AWBURSTHardLink;
m_M2S_AW_AWLOCK <= mM2S_AW_AWLOCKm_M2S_AW_AWLOCKHardLink;
m_M2S_AW_AWCACHE <= mM2S_AW_AWCACHEm_M2S_AW_AWCACHEHardLink;
m_M2S_AW_AWPROT <= mM2S_AW_AWPROTm_M2S_AW_AWPROTHardLink;
m_M2S_AW_AWQOS <= mM2S_AW_AWQOSm_M2S_AW_AWQOSHardLink;
m_M2S_AW_AWREGION <= mM2S_AW_AWREGIONm_M2S_AW_AWREGIONHardLink;
m_M2S_AW_AWUSER <= mM2S_AW_AWUSERm_M2S_AW_AWUSERHardLink;
m_M2S_AW_AWVALID <= mM2S_AW_AWVALIDm_M2S_AW_AWVALIDHardLink;
m_M2S_W_WID <= mM2S_W_WIDm_M2S_W_WIDHardLink;
m_M2S_W_WDATA0 <= mM2S_W_WDATA0m_M2S_W_WDATA0HardLink;
m_M2S_W_WDATA1 <= mM2S_W_WDATA1m_M2S_W_WDATA1HardLink;
m_M2S_W_WDATA2 <= mM2S_W_WDATA2m_M2S_W_WDATA2HardLink;
m_M2S_W_WDATA3 <= mM2S_W_WDATA3m_M2S_W_WDATA3HardLink;
m_M2S_W_WSTRB <= mM2S_W_WSTRBm_M2S_W_WSTRBHardLink;
m_M2S_W_WLAST <= mM2S_W_WLASTm_M2S_W_WLASTHardLink;
m_M2S_W_WUSER <= mM2S_W_WUSERm_M2S_W_WUSERHardLink;
m_M2S_W_WVALID <= mM2S_W_WVALIDm_M2S_W_WVALIDHardLink;
m_M2S_B_BREADY <= mM2S_B_BREADYm_M2S_B_BREADYHardLink;
end process;
-- [BEGIN USER ARCHITECTURE]
-- [END USER ARCHITECTURE]
end architecture;
