-- PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
-- * This file was generated by Quokka FPGA Toolkit.
-- * Generated code is your property, do whatever you want with it
-- * Place custom code between [BEGIN USER ***] and [END USER ***].
-- * CAUTION: All code outside of [USER] scope is subject to regeneration.
-- * Bad things happen sometimes in developer's life,
--   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
-- * Internal structure of code is subject to change.
--   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
-- * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
-- * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
--
-- DISCLAIMER:
--   Code comes AS-IS, it is your responsibility to make sure it is working as expected
--   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
--
-- System configuration name is LiteralsModule_TopLevel, clock frequency is 1Hz, Top-level
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.Quokka.all;
entity LiteralsModule_TopLevel is
	port
	(
		-- [BEGIN USER PORTS]
		-- [END USER PORTS]
		BinaryByte : out unsigned (7 downto 0);
		BinaryInt : out signed (31 downto 0);
		BinaryShort : out signed (15 downto 0);
		Byte : out unsigned (7 downto 0);
		Int : out signed (31 downto 0);
		Long : out signed (63 downto 0);
		LongHex : out signed (63 downto 0);
		SByte : out signed (7 downto 0);
		Short : out signed (15 downto 0);
		UInt : out unsigned (31 downto 0);
		ULong : out unsigned (63 downto 0);
		ULongHex : out unsigned (63 downto 0);
		UShort : out unsigned (15 downto 0)
	);
end entity;
-- FSM summary
-- Packages
architecture rtl of LiteralsModule_TopLevel is
	-- [BEGIN USER SIGNALS]
	-- [END USER SIGNALS]
	constant HiSignal : std_logic := '1';
	constant LoSignal : std_logic := '0';
	constant Zero : std_logic := '0';
	constant One : std_logic := '1';
	-- true is a reserved name, declaration skipped
	-- false is a reserved name, declaration skipped
	constant LiteralsModule_L20F35T47_Expr : unsigned(7 downto 0) := "10010110";
	constant LiteralsModule_L22F33T60_Expr : unsigned(19 downto 0) := "10010110101011110000";
	constant LiteralsModule_L21F37T54_Expr : unsigned(11 downto 0) := "100101101010";
	constant LiteralsModule_L10F29T31_Expr : unsigned(5 downto 0) := "101010";
	constant LiteralsModule_L14F27T29_Expr : signed(1 downto 0) := "11";
	constant LiteralsModule_L16F29T50_Expr : signed(63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
	constant LiteralsModule_L18F32T53_Expr : unsigned(62 downto 0) := "111000000000000111111111111111111111111111111111111111111111111";
	constant LiteralsModule_L11F31T33_Expr : signed(1 downto 0) := "11";
	constant LiteralsModule_L12F31T33_Expr : signed(1 downto 0) := "11";
	constant LiteralsModule_L15F29T31_Expr : unsigned(5 downto 0) := "101110";
	constant LiteralsModule_L17F31T35_Expr : unsigned(5 downto 0) := "110000";
	constant LiteralsModule_L19F34T55_Expr : unsigned(63 downto 0) := "1000000000000000111111111111111111111111111111111111111111111111";
	constant LiteralsModule_L13F33T35_Expr : unsigned(5 downto 0) := "101100";
begin
	process (all)
	begin
		BinaryByte <= LiteralsModule_L20F35T47_Expr;
		BinaryInt(31 downto 20) <= (others => '0');
		BinaryInt(19 downto 0) <= signed(LiteralsModule_L22F33T60_Expr);
		BinaryShort(15 downto 12) <= (others => '0');
		BinaryShort(11 downto 0) <= signed(LiteralsModule_L21F37T54_Expr);
		Byte(7 downto 6) <= (others => '0');
		Byte(5 downto 0) <= LiteralsModule_L10F29T31_Expr;
		Int(31 downto 2) <= (others => LiteralsModule_L14F27T29_Expr(1));
		Int(1 downto 0) <= LiteralsModule_L14F27T29_Expr;
		Long <= LiteralsModule_L16F29T50_Expr;
		LongHex(63) <= '0';
		LongHex(62 downto 0) <= signed(LiteralsModule_L18F32T53_Expr);
		SByte(7 downto 2) <= (others => LiteralsModule_L11F31T33_Expr(1));
		SByte(1 downto 0) <= LiteralsModule_L11F31T33_Expr;
		Short(15 downto 2) <= (others => LiteralsModule_L12F31T33_Expr(1));
		Short(1 downto 0) <= LiteralsModule_L12F31T33_Expr;
		UInt(31 downto 6) <= (others => '0');
		UInt(5 downto 0) <= LiteralsModule_L15F29T31_Expr;
		ULong(63 downto 6) <= (others => '0');
		ULong(5 downto 0) <= LiteralsModule_L17F31T35_Expr;
		ULongHex <= LiteralsModule_L19F34T55_Expr;
		UShort(15 downto 6) <= (others => '0');
		UShort(5 downto 0) <= LiteralsModule_L13F33T35_Expr;
	end process;
	-- [BEGIN USER ARCHITECTURE]
	-- [END USER ARCHITECTURE]
end architecture;
