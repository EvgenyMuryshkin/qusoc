-- PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
-- * This file was generated by Quokka FPGA Toolkit.
-- * Generated code is your property, do whatever you want with it
-- * Place custom code between [BEGIN USER ***] and [END USER ***].
-- * CAUTION: All code outside of [USER] scope is subject to regeneration.
-- * Bad things happen sometimes in developer's life,
--   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
-- * Internal structure of code is subject to change.
--   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
-- * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
-- * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
--
-- DISCLAIMER:
--   Code comes AS-IS, it is your responsibility to make sure it is working as expected
--   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
--
-- System configuration name is AXI4PassThroughModule_TopLevel, clock frequency is 1Hz, Top-level
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.Quokka.all;
entity AXI4PassThroughModule_TopLevel is
	port
	(
		-- [BEGIN USER PORTS]
		-- [END USER PORTS]
		iM2S_R_AR_ARID : in unsigned (7 downto 0);
		iM2S_R_AR_ARADDR : in unsigned (31 downto 0);
		iM2S_R_AR_ARLEN : in unsigned (7 downto 0);
		iM2S_R_AR_ARSIZE : in unsigned (2 downto 0);
		iM2S_R_AR_ARBURST : in unsigned (1 downto 0);
		iM2S_R_AR_ARLOCK : in unsigned (1 downto 0);
		iM2S_R_AR_ARCACHE : in unsigned (3 downto 0);
		iM2S_R_AR_ARPROT : in unsigned (2 downto 0);
		iM2S_R_AR_ARQOS : in unsigned (3 downto 0);
		iM2S_R_AR_ARREGION : in unsigned (7 downto 0);
		iM2S_R_AR_ARUSER : in unsigned (7 downto 0);
		iM2S_R_AR_ARVALID : in std_logic;
		iM2S_R_R_RREADY : in std_logic;
		iM2S_W_AW_AWID : in unsigned (7 downto 0);
		iM2S_W_AW_AWADDR : in unsigned (31 downto 0);
		iM2S_W_AW_AWLEN : in unsigned (7 downto 0);
		iM2S_W_AW_AWSIZE : in unsigned (2 downto 0);
		iM2S_W_AW_AWBURST : in unsigned (1 downto 0);
		iM2S_W_AW_AWLOCK : in unsigned (1 downto 0);
		iM2S_W_AW_AWCACHE : in unsigned (3 downto 0);
		iM2S_W_AW_AWPROT : in unsigned (2 downto 0);
		iM2S_W_AW_AWQOS : in unsigned (3 downto 0);
		iM2S_W_AW_AWREGION : in unsigned (7 downto 0);
		iM2S_W_AW_AWUSER : in unsigned (7 downto 0);
		iM2S_W_AW_AWVALID : in std_logic;
		iM2S_W_W_WID : in unsigned (7 downto 0);
		iM2S_W_W_WDATA0 : in unsigned (7 downto 0);
		iM2S_W_W_WDATA1 : in unsigned (7 downto 0);
		iM2S_W_W_WDATA2 : in unsigned (7 downto 0);
		iM2S_W_W_WDATA3 : in unsigned (7 downto 0);
		iM2S_W_W_WSTRB : in unsigned (3 downto 0);
		iM2S_W_W_WLAST : in std_logic;
		iM2S_W_W_WUSER : in unsigned (7 downto 0);
		iM2S_W_W_WVALID : in std_logic;
		iM2S_W_B_BREADY : in std_logic;
		iS2M_R_AR_ARREADY : in std_logic;
		iS2M_R_R_RID : in unsigned (7 downto 0);
		iS2M_R_R_RDATA0 : in unsigned (7 downto 0);
		iS2M_R_R_RDATA1 : in unsigned (7 downto 0);
		iS2M_R_R_RDATA2 : in unsigned (7 downto 0);
		iS2M_R_R_RDATA3 : in unsigned (7 downto 0);
		iS2M_R_R_RRESP : in unsigned (1 downto 0);
		iS2M_R_R_RLAST : in std_logic;
		iS2M_R_R_RUSER : in unsigned (7 downto 0);
		iS2M_R_R_RVALID : in std_logic;
		iS2M_W_AW_AWREADY : in std_logic;
		iS2M_W_B_BID : in unsigned (7 downto 0);
		iS2M_W_B_BRESP : in unsigned (1 downto 0);
		iS2M_W_B_BUSER : in unsigned (7 downto 0);
		iS2M_W_B_BVALID : in std_logic;
		iS2M_W_W_WREADY : in std_logic;
		oM2S_R_AR_ARID : out unsigned (7 downto 0);
		oM2S_R_AR_ARADDR : out unsigned (31 downto 0);
		oM2S_R_AR_ARLEN : out unsigned (7 downto 0);
		oM2S_R_AR_ARSIZE : out unsigned (2 downto 0);
		oM2S_R_AR_ARBURST : out unsigned (1 downto 0);
		oM2S_R_AR_ARLOCK : out unsigned (1 downto 0);
		oM2S_R_AR_ARCACHE : out unsigned (3 downto 0);
		oM2S_R_AR_ARPROT : out unsigned (2 downto 0);
		oM2S_R_AR_ARQOS : out unsigned (3 downto 0);
		oM2S_R_AR_ARREGION : out unsigned (7 downto 0);
		oM2S_R_AR_ARUSER : out unsigned (7 downto 0);
		oM2S_R_AR_ARVALID : out std_logic;
		oM2S_R_R_RREADY : out std_logic;
		oM2S_W_AW_AWID : out unsigned (7 downto 0);
		oM2S_W_AW_AWADDR : out unsigned (31 downto 0);
		oM2S_W_AW_AWLEN : out unsigned (7 downto 0);
		oM2S_W_AW_AWSIZE : out unsigned (2 downto 0);
		oM2S_W_AW_AWBURST : out unsigned (1 downto 0);
		oM2S_W_AW_AWLOCK : out unsigned (1 downto 0);
		oM2S_W_AW_AWCACHE : out unsigned (3 downto 0);
		oM2S_W_AW_AWPROT : out unsigned (2 downto 0);
		oM2S_W_AW_AWQOS : out unsigned (3 downto 0);
		oM2S_W_AW_AWREGION : out unsigned (7 downto 0);
		oM2S_W_AW_AWUSER : out unsigned (7 downto 0);
		oM2S_W_AW_AWVALID : out std_logic;
		oM2S_W_W_WID : out unsigned (7 downto 0);
		oM2S_W_W_WDATA0 : out unsigned (7 downto 0);
		oM2S_W_W_WDATA1 : out unsigned (7 downto 0);
		oM2S_W_W_WDATA2 : out unsigned (7 downto 0);
		oM2S_W_W_WDATA3 : out unsigned (7 downto 0);
		oM2S_W_W_WSTRB : out unsigned (3 downto 0);
		oM2S_W_W_WLAST : out std_logic;
		oM2S_W_W_WUSER : out unsigned (7 downto 0);
		oM2S_W_W_WVALID : out std_logic;
		oM2S_W_B_BREADY : out std_logic;
		oS2M_R_AR_ARREADY : out std_logic;
		oS2M_R_R_RID : out unsigned (7 downto 0);
		oS2M_R_R_RDATA0 : out unsigned (7 downto 0);
		oS2M_R_R_RDATA1 : out unsigned (7 downto 0);
		oS2M_R_R_RDATA2 : out unsigned (7 downto 0);
		oS2M_R_R_RDATA3 : out unsigned (7 downto 0);
		oS2M_R_R_RRESP : out unsigned (1 downto 0);
		oS2M_R_R_RLAST : out std_logic;
		oS2M_R_R_RUSER : out unsigned (7 downto 0);
		oS2M_R_R_RVALID : out std_logic;
		oS2M_W_AW_AWREADY : out std_logic;
		oS2M_W_B_BID : out unsigned (7 downto 0);
		oS2M_W_B_BRESP : out unsigned (1 downto 0);
		oS2M_W_B_BUSER : out unsigned (7 downto 0);
		oS2M_W_B_BVALID : out std_logic;
		oS2M_W_W_WREADY : out std_logic
	);
end entity;
-- FSM summary
-- Packages
architecture rtl of AXI4PassThroughModule_TopLevel is
	-- [BEGIN USER SIGNALS]
	-- [END USER SIGNALS]
	constant HiSignal : std_logic := '1';
	constant LoSignal : std_logic := '0';
	constant Zero : std_logic := '0';
	constant One : std_logic := '1';
	-- true is a reserved name, declaration skipped
	-- false is a reserved name, declaration skipped
	signal Inputs_iM2S_R_AR_ARID : unsigned(7 downto 0) := (others => '0');
	signal Inputs_iM2S_R_AR_ARADDR : unsigned(31 downto 0) := (others => '0');
	signal Inputs_iM2S_R_AR_ARLEN : unsigned(7 downto 0) := (others => '0');
	signal Inputs_iM2S_R_AR_ARSIZE : unsigned(2 downto 0) := (others => '0');
	signal Inputs_iM2S_R_AR_ARBURST : unsigned(1 downto 0) := (others => '0');
	signal Inputs_iM2S_R_AR_ARLOCK : unsigned(1 downto 0) := (others => '0');
	signal Inputs_iM2S_R_AR_ARCACHE : unsigned(3 downto 0) := (others => '0');
	signal Inputs_iM2S_R_AR_ARPROT : unsigned(2 downto 0) := (others => '0');
	signal Inputs_iM2S_R_AR_ARQOS : unsigned(3 downto 0) := (others => '0');
	signal Inputs_iM2S_R_AR_ARREGION : unsigned(7 downto 0) := (others => '0');
	signal Inputs_iM2S_R_AR_ARUSER : unsigned(7 downto 0) := (others => '0');
	signal Inputs_iM2S_R_AR_ARVALID : std_logic := '0';
	signal Inputs_iM2S_R_R_RREADY : std_logic := '0';
	signal Inputs_iM2S_W_AW_AWID : unsigned(7 downto 0) := (others => '0');
	signal Inputs_iM2S_W_AW_AWADDR : unsigned(31 downto 0) := (others => '0');
	signal Inputs_iM2S_W_AW_AWLEN : unsigned(7 downto 0) := (others => '0');
	signal Inputs_iM2S_W_AW_AWSIZE : unsigned(2 downto 0) := (others => '0');
	signal Inputs_iM2S_W_AW_AWBURST : unsigned(1 downto 0) := (others => '0');
	signal Inputs_iM2S_W_AW_AWLOCK : unsigned(1 downto 0) := (others => '0');
	signal Inputs_iM2S_W_AW_AWCACHE : unsigned(3 downto 0) := (others => '0');
	signal Inputs_iM2S_W_AW_AWPROT : unsigned(2 downto 0) := (others => '0');
	signal Inputs_iM2S_W_AW_AWQOS : unsigned(3 downto 0) := (others => '0');
	signal Inputs_iM2S_W_AW_AWREGION : unsigned(7 downto 0) := (others => '0');
	signal Inputs_iM2S_W_AW_AWUSER : unsigned(7 downto 0) := (others => '0');
	signal Inputs_iM2S_W_AW_AWVALID : std_logic := '0';
	signal Inputs_iM2S_W_W_WID : unsigned(7 downto 0) := (others => '0');
	signal Inputs_iM2S_W_W_WSTRB : unsigned(3 downto 0) := (others => '0');
	signal Inputs_iM2S_W_W_WLAST : std_logic := '0';
	signal Inputs_iM2S_W_W_WUSER : unsigned(7 downto 0) := (others => '0');
	signal Inputs_iM2S_W_W_WVALID : std_logic := '0';
	signal Inputs_iM2S_W_B_BREADY : std_logic := '0';
	signal Inputs_iS2M_R_AR_ARREADY : std_logic := '0';
	signal Inputs_iS2M_R_R_RID : unsigned(7 downto 0) := (others => '0');
	signal Inputs_iS2M_R_R_RRESP : unsigned(1 downto 0) := (others => '0');
	signal Inputs_iS2M_R_R_RLAST : std_logic := '0';
	signal Inputs_iS2M_R_R_RUSER : unsigned(7 downto 0) := (others => '0');
	signal Inputs_iS2M_R_R_RVALID : std_logic := '0';
	signal Inputs_iS2M_W_AW_AWREADY : std_logic := '0';
	signal Inputs_iS2M_W_B_BID : unsigned(7 downto 0) := (others => '0');
	signal Inputs_iS2M_W_B_BRESP : unsigned(1 downto 0) := (others => '0');
	signal Inputs_iS2M_W_B_BUSER : unsigned(7 downto 0) := (others => '0');
	signal Inputs_iS2M_W_B_BVALID : std_logic := '0';
	signal Inputs_iS2M_W_W_WREADY : std_logic := '0';
	type Inputs_iM2S_W_W_WDATAArray is array (0 to 3) of unsigned (7 downto 0);
	signal Inputs_iM2S_W_W_WDATA : Inputs_iM2S_W_W_WDATAArray := (others => (others => '0'));
	type Inputs_iS2M_R_R_RDATAArray is array (0 to 3) of unsigned (7 downto 0);
	signal Inputs_iS2M_R_R_RDATA : Inputs_iS2M_R_R_RDATAArray := (others => (others => '0'));
	type m2sArray is array (0 to 0) of unsigned (221 downto 0);
	signal m2s : m2sArray := (others => (others => '0'));
	type s2mArray is array (0 to 0) of unsigned (73 downto 0);
	signal s2m : s2mArray := (others => (others => '0'));
begin
	process (iM2S_R_AR_ARADDR, iM2S_R_AR_ARBURST, iM2S_R_AR_ARCACHE, iM2S_R_AR_ARID, iM2S_R_AR_ARLEN, iM2S_R_AR_ARLOCK, iM2S_R_AR_ARPROT, iM2S_R_AR_ARQOS, iM2S_R_AR_ARREGION, iM2S_R_AR_ARSIZE, iM2S_R_AR_ARUSER, iM2S_R_AR_ARVALID, iM2S_R_R_RREADY, iM2S_W_AW_AWADDR, iM2S_W_AW_AWBURST, iM2S_W_AW_AWCACHE, iM2S_W_AW_AWID, iM2S_W_AW_AWLEN, iM2S_W_AW_AWLOCK, iM2S_W_AW_AWPROT, iM2S_W_AW_AWQOS, iM2S_W_AW_AWREGION, iM2S_W_AW_AWSIZE, iM2S_W_AW_AWUSER, iM2S_W_AW_AWVALID, iM2S_W_B_BREADY, iM2S_W_W_WDATA0, iM2S_W_W_WDATA1, iM2S_W_W_WDATA2, iM2S_W_W_WDATA3, iM2S_W_W_WID, iM2S_W_W_WLAST, iM2S_W_W_WSTRB, iM2S_W_W_WUSER, iM2S_W_W_WVALID, Inputs_iM2S_R_AR_ARADDR, Inputs_iM2S_R_AR_ARBURST, Inputs_iM2S_R_AR_ARCACHE, Inputs_iM2S_R_AR_ARID, Inputs_iM2S_R_AR_ARLEN, Inputs_iM2S_R_AR_ARLOCK, Inputs_iM2S_R_AR_ARPROT, Inputs_iM2S_R_AR_ARQOS, Inputs_iM2S_R_AR_ARREGION, Inputs_iM2S_R_AR_ARSIZE, Inputs_iM2S_R_AR_ARUSER, Inputs_iM2S_R_AR_ARVALID, Inputs_iM2S_R_R_RREADY, Inputs_iM2S_W_AW_AWADDR, Inputs_iM2S_W_AW_AWBURST, Inputs_iM2S_W_AW_AWCACHE, Inputs_iM2S_W_AW_AWID, Inputs_iM2S_W_AW_AWLEN, Inputs_iM2S_W_AW_AWLOCK, Inputs_iM2S_W_AW_AWPROT, Inputs_iM2S_W_AW_AWQOS, Inputs_iM2S_W_AW_AWREGION, Inputs_iM2S_W_AW_AWSIZE, Inputs_iM2S_W_AW_AWUSER, Inputs_iM2S_W_AW_AWVALID, Inputs_iM2S_W_B_BREADY, Inputs_iM2S_W_W_WDATA, Inputs_iM2S_W_W_WID, Inputs_iM2S_W_W_WLAST, Inputs_iM2S_W_W_WSTRB, Inputs_iM2S_W_W_WUSER, Inputs_iM2S_W_W_WVALID, Inputs_iS2M_R_AR_ARREADY, Inputs_iS2M_R_R_RDATA, Inputs_iS2M_R_R_RID, Inputs_iS2M_R_R_RLAST, Inputs_iS2M_R_R_RRESP, Inputs_iS2M_R_R_RUSER, Inputs_iS2M_R_R_RVALID, Inputs_iS2M_W_AW_AWREADY, Inputs_iS2M_W_B_BID, Inputs_iS2M_W_B_BRESP, Inputs_iS2M_W_B_BUSER, Inputs_iS2M_W_B_BVALID, Inputs_iS2M_W_W_WREADY, iS2M_R_AR_ARREADY, iS2M_R_R_RDATA0, iS2M_R_R_RDATA1, iS2M_R_R_RDATA2, iS2M_R_R_RDATA3, iS2M_R_R_RID, iS2M_R_R_RLAST, iS2M_R_R_RRESP, iS2M_R_R_RUSER, iS2M_R_R_RVALID, iS2M_W_AW_AWREADY, iS2M_W_B_BID, iS2M_W_B_BRESP, iS2M_W_B_BUSER, iS2M_W_B_BVALID, iS2M_W_W_WREADY, m2s, s2m)
	begin
		Inputs_iM2S_R_AR_ARID <= iM2S_R_AR_ARID;
		Inputs_iM2S_R_AR_ARADDR <= iM2S_R_AR_ARADDR;
		Inputs_iM2S_R_AR_ARLEN <= iM2S_R_AR_ARLEN;
		Inputs_iM2S_R_AR_ARSIZE <= iM2S_R_AR_ARSIZE;
		Inputs_iM2S_R_AR_ARBURST <= iM2S_R_AR_ARBURST;
		Inputs_iM2S_R_AR_ARLOCK <= iM2S_R_AR_ARLOCK;
		Inputs_iM2S_R_AR_ARCACHE <= iM2S_R_AR_ARCACHE;
		Inputs_iM2S_R_AR_ARPROT <= iM2S_R_AR_ARPROT;
		Inputs_iM2S_R_AR_ARQOS <= iM2S_R_AR_ARQOS;
		Inputs_iM2S_R_AR_ARREGION <= iM2S_R_AR_ARREGION;
		Inputs_iM2S_R_AR_ARUSER <= iM2S_R_AR_ARUSER;
		Inputs_iM2S_R_AR_ARVALID <= iM2S_R_AR_ARVALID;
		Inputs_iM2S_R_R_RREADY <= iM2S_R_R_RREADY;
		Inputs_iM2S_W_AW_AWID <= iM2S_W_AW_AWID;
		Inputs_iM2S_W_AW_AWADDR <= iM2S_W_AW_AWADDR;
		Inputs_iM2S_W_AW_AWLEN <= iM2S_W_AW_AWLEN;
		Inputs_iM2S_W_AW_AWSIZE <= iM2S_W_AW_AWSIZE;
		Inputs_iM2S_W_AW_AWBURST <= iM2S_W_AW_AWBURST;
		Inputs_iM2S_W_AW_AWLOCK <= iM2S_W_AW_AWLOCK;
		Inputs_iM2S_W_AW_AWCACHE <= iM2S_W_AW_AWCACHE;
		Inputs_iM2S_W_AW_AWPROT <= iM2S_W_AW_AWPROT;
		Inputs_iM2S_W_AW_AWQOS <= iM2S_W_AW_AWQOS;
		Inputs_iM2S_W_AW_AWREGION <= iM2S_W_AW_AWREGION;
		Inputs_iM2S_W_AW_AWUSER <= iM2S_W_AW_AWUSER;
		Inputs_iM2S_W_AW_AWVALID <= iM2S_W_AW_AWVALID;
		Inputs_iM2S_W_W_WID <= iM2S_W_W_WID;
		Inputs_iM2S_W_W_WDATA(0) <= iM2S_W_W_WDATA0;
		Inputs_iM2S_W_W_WDATA(1) <= iM2S_W_W_WDATA1;
		Inputs_iM2S_W_W_WDATA(2) <= iM2S_W_W_WDATA2;
		Inputs_iM2S_W_W_WDATA(3) <= iM2S_W_W_WDATA3;
		Inputs_iM2S_W_W_WSTRB <= iM2S_W_W_WSTRB;
		Inputs_iM2S_W_W_WLAST <= iM2S_W_W_WLAST;
		Inputs_iM2S_W_W_WUSER <= iM2S_W_W_WUSER;
		Inputs_iM2S_W_W_WVALID <= iM2S_W_W_WVALID;
		Inputs_iM2S_W_B_BREADY <= iM2S_W_B_BREADY;
		Inputs_iS2M_R_AR_ARREADY <= iS2M_R_AR_ARREADY;
		Inputs_iS2M_R_R_RID <= iS2M_R_R_RID;
		Inputs_iS2M_R_R_RDATA(0) <= iS2M_R_R_RDATA0;
		Inputs_iS2M_R_R_RDATA(1) <= iS2M_R_R_RDATA1;
		Inputs_iS2M_R_R_RDATA(2) <= iS2M_R_R_RDATA2;
		Inputs_iS2M_R_R_RDATA(3) <= iS2M_R_R_RDATA3;
		Inputs_iS2M_R_R_RRESP <= iS2M_R_R_RRESP;
		Inputs_iS2M_R_R_RLAST <= iS2M_R_R_RLAST;
		Inputs_iS2M_R_R_RUSER <= iS2M_R_R_RUSER;
		Inputs_iS2M_R_R_RVALID <= iS2M_R_R_RVALID;
		Inputs_iS2M_W_AW_AWREADY <= iS2M_W_AW_AWREADY;
		Inputs_iS2M_W_B_BID <= iS2M_W_B_BID;
		Inputs_iS2M_W_B_BRESP <= iS2M_W_B_BRESP;
		Inputs_iS2M_W_B_BUSER <= iS2M_W_B_BUSER;
		Inputs_iS2M_W_B_BVALID <= iS2M_W_B_BVALID;
		Inputs_iS2M_W_W_WREADY <= iS2M_W_W_WREADY;
		m2s(0)(221) <= Inputs_iM2S_W_B_BREADY;
		m2s(0)(220) <= Inputs_iM2S_W_W_WVALID;
		m2s(0)(219 downto 212) <= Inputs_iM2S_W_W_WUSER;
		m2s(0)(211) <= Inputs_iM2S_W_W_WLAST;
		m2s(0)(210 downto 207) <= Inputs_iM2S_W_W_WSTRB;
		m2s(0)(206 downto 199) <= Inputs_iM2S_W_W_WDATA(3);
		m2s(0)(198 downto 191) <= Inputs_iM2S_W_W_WDATA(2);
		m2s(0)(190 downto 183) <= Inputs_iM2S_W_W_WDATA(1);
		m2s(0)(182 downto 175) <= Inputs_iM2S_W_W_WDATA(0);
		m2s(0)(174 downto 167) <= Inputs_iM2S_W_W_WID;
		m2s(0)(166) <= Inputs_iM2S_W_AW_AWVALID;
		m2s(0)(165 downto 158) <= Inputs_iM2S_W_AW_AWUSER;
		m2s(0)(157 downto 150) <= Inputs_iM2S_W_AW_AWREGION;
		m2s(0)(149 downto 146) <= Inputs_iM2S_W_AW_AWQOS;
		m2s(0)(145 downto 143) <= Inputs_iM2S_W_AW_AWPROT;
		m2s(0)(142 downto 139) <= Inputs_iM2S_W_AW_AWCACHE;
		m2s(0)(138 downto 137) <= Inputs_iM2S_W_AW_AWLOCK;
		m2s(0)(136 downto 135) <= Inputs_iM2S_W_AW_AWBURST;
		m2s(0)(134 downto 132) <= Inputs_iM2S_W_AW_AWSIZE;
		m2s(0)(131 downto 124) <= Inputs_iM2S_W_AW_AWLEN;
		m2s(0)(123 downto 92) <= Inputs_iM2S_W_AW_AWADDR;
		m2s(0)(91 downto 84) <= Inputs_iM2S_W_AW_AWID;
		m2s(0)(83) <= Inputs_iM2S_R_R_RREADY;
		m2s(0)(82) <= Inputs_iM2S_R_AR_ARVALID;
		m2s(0)(81 downto 74) <= Inputs_iM2S_R_AR_ARUSER;
		m2s(0)(73 downto 66) <= Inputs_iM2S_R_AR_ARREGION;
		m2s(0)(65 downto 62) <= Inputs_iM2S_R_AR_ARQOS;
		m2s(0)(61 downto 59) <= Inputs_iM2S_R_AR_ARPROT;
		m2s(0)(58 downto 55) <= Inputs_iM2S_R_AR_ARCACHE;
		m2s(0)(54 downto 53) <= Inputs_iM2S_R_AR_ARLOCK;
		m2s(0)(52 downto 51) <= Inputs_iM2S_R_AR_ARBURST;
		m2s(0)(50 downto 48) <= Inputs_iM2S_R_AR_ARSIZE;
		m2s(0)(47 downto 40) <= Inputs_iM2S_R_AR_ARLEN;
		m2s(0)(39 downto 8) <= Inputs_iM2S_R_AR_ARADDR;
		m2s(0)(7 downto 0) <= Inputs_iM2S_R_AR_ARID;
		s2m(0)(73) <= Inputs_iS2M_W_W_WREADY;
		s2m(0)(72) <= Inputs_iS2M_W_B_BVALID;
		s2m(0)(71 downto 64) <= Inputs_iS2M_W_B_BUSER;
		s2m(0)(63 downto 62) <= Inputs_iS2M_W_B_BRESP;
		s2m(0)(61 downto 54) <= Inputs_iS2M_W_B_BID;
		s2m(0)(53) <= Inputs_iS2M_W_AW_AWREADY;
		s2m(0)(52) <= Inputs_iS2M_R_R_RVALID;
		s2m(0)(51 downto 44) <= Inputs_iS2M_R_R_RUSER;
		s2m(0)(43) <= Inputs_iS2M_R_R_RLAST;
		s2m(0)(42 downto 41) <= Inputs_iS2M_R_R_RRESP;
		s2m(0)(40 downto 33) <= Inputs_iS2M_R_R_RDATA(3);
		s2m(0)(32 downto 25) <= Inputs_iS2M_R_R_RDATA(2);
		s2m(0)(24 downto 17) <= Inputs_iS2M_R_R_RDATA(1);
		s2m(0)(16 downto 9) <= Inputs_iS2M_R_R_RDATA(0);
		s2m(0)(8 downto 1) <= Inputs_iS2M_R_R_RID;
		s2m(0)(0) <= Inputs_iS2M_R_AR_ARREADY;
		oM2S_W_B_BREADY <= m2s(0)(221);
		oM2S_W_W_WVALID <= m2s(0)(220);
		oM2S_W_W_WUSER <= m2s(0)(219 downto 212);
		oM2S_W_W_WLAST <= m2s(0)(211);
		oM2S_W_W_WSTRB <= m2s(0)(210 downto 207);
		oM2S_W_W_WDATA3 <= m2s(0)(206 downto 199);
		oM2S_W_W_WDATA2 <= m2s(0)(198 downto 191);
		oM2S_W_W_WDATA1 <= m2s(0)(190 downto 183);
		oM2S_W_W_WDATA0 <= m2s(0)(182 downto 175);
		oM2S_W_W_WID <= m2s(0)(174 downto 167);
		oM2S_W_AW_AWVALID <= m2s(0)(166);
		oM2S_W_AW_AWUSER <= m2s(0)(165 downto 158);
		oM2S_W_AW_AWREGION <= m2s(0)(157 downto 150);
		oM2S_W_AW_AWQOS <= m2s(0)(149 downto 146);
		oM2S_W_AW_AWPROT <= m2s(0)(145 downto 143);
		oM2S_W_AW_AWCACHE <= m2s(0)(142 downto 139);
		oM2S_W_AW_AWLOCK <= m2s(0)(138 downto 137);
		oM2S_W_AW_AWBURST <= m2s(0)(136 downto 135);
		oM2S_W_AW_AWSIZE <= m2s(0)(134 downto 132);
		oM2S_W_AW_AWLEN <= m2s(0)(131 downto 124);
		oM2S_W_AW_AWADDR <= m2s(0)(123 downto 92);
		oM2S_W_AW_AWID <= m2s(0)(91 downto 84);
		oM2S_R_R_RREADY <= m2s(0)(83);
		oM2S_R_AR_ARVALID <= m2s(0)(82);
		oM2S_R_AR_ARUSER <= m2s(0)(81 downto 74);
		oM2S_R_AR_ARREGION <= m2s(0)(73 downto 66);
		oM2S_R_AR_ARQOS <= m2s(0)(65 downto 62);
		oM2S_R_AR_ARPROT <= m2s(0)(61 downto 59);
		oM2S_R_AR_ARCACHE <= m2s(0)(58 downto 55);
		oM2S_R_AR_ARLOCK <= m2s(0)(54 downto 53);
		oM2S_R_AR_ARBURST <= m2s(0)(52 downto 51);
		oM2S_R_AR_ARSIZE <= m2s(0)(50 downto 48);
		oM2S_R_AR_ARLEN <= m2s(0)(47 downto 40);
		oM2S_R_AR_ARADDR <= m2s(0)(39 downto 8);
		oM2S_R_AR_ARID <= m2s(0)(7 downto 0);
		oS2M_W_W_WREADY <= s2m(0)(73);
		oS2M_W_B_BVALID <= s2m(0)(72);
		oS2M_W_B_BUSER <= s2m(0)(71 downto 64);
		oS2M_W_B_BRESP <= s2m(0)(63 downto 62);
		oS2M_W_B_BID <= s2m(0)(61 downto 54);
		oS2M_W_AW_AWREADY <= s2m(0)(53);
		oS2M_R_R_RVALID <= s2m(0)(52);
		oS2M_R_R_RUSER <= s2m(0)(51 downto 44);
		oS2M_R_R_RLAST <= s2m(0)(43);
		oS2M_R_R_RRESP <= s2m(0)(42 downto 41);
		oS2M_R_R_RDATA3 <= s2m(0)(40 downto 33);
		oS2M_R_R_RDATA2 <= s2m(0)(32 downto 25);
		oS2M_R_R_RDATA1 <= s2m(0)(24 downto 17);
		oS2M_R_R_RDATA0 <= s2m(0)(16 downto 9);
		oS2M_R_R_RID <= s2m(0)(8 downto 1);
		oS2M_R_AR_ARREADY <= s2m(0)(0);
	end process;
	-- [BEGIN USER ARCHITECTURE]
	-- [END USER ARCHITECTURE]
end architecture;
