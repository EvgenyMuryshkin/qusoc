`timescale 1ns/1ps
`default_nettype none
// PLEASE READ THIS, IT MAY SAVE YOU SOME TIME AND MONEY, THANK YOU!
// * This file was generated by Quokka FPGA Toolkit.
// * Generated code is your property, do whatever you want with it
// * Place custom code between [BEGIN USER ***] and [END USER ***].
// * CAUTION: All code outside of [USER] scope is subject to regeneration.
// * Bad things happen sometimes in developer's life,
//   it is recommended to use source control management software (e.g. git, bzr etc) to keep your custom code safe'n'sound.
// * Internal structure of code is subject to change.
//   You can use some of signals in custom code, but most likely they will not exist in future (e.g. will get shorter or gone completely)
// * Please send your feedback, comments, improvement ideas etc. to evmuryshkin@gmail.com
// * Visit https://github.com/EvgenyMuryshkin/QuokkaEvaluation to access latest version of playground
// 
// DISCLAIMER:
//   Code comes AS-IS, it is your responsibility to make sure it is working as expected
//   no responsibility will be taken for any loss or damage caused by use of Quokka toolkit.
// 
// System configuration name is Increment_TopLevel_Increment_CPU_RISCVModule_Regs, clock frequency is 1Hz, Embedded
// FSM summary
// -- Packages
module Increment_TopLevel_Increment_CPU_RISCVModule_Regs (
// [BEGIN USER PORTS]
// [END USER PORTS]

	input wire  BoardSignals_Clock,
	input wire  BoardSignals_Reset,
	input wire  BoardSignals_Running,
	input wire  BoardSignals_Starting,
	input wire  BoardSignals_Started,
	input wire  Read,
	input wire  [5: 1] RS1Addr,
	input wire  [5: 1] RS2Addr,
	input wire  [5: 1] RD,
	input wire  WE,
	input wire  [32: 1] WriteData,
	output wire [32: 1] RS1,
	output wire [32: 1] RS2,
	output wire Ready
    );

// [BEGIN USER SIGNALS]
// [END USER SIGNALS]
localparam HiSignal = 1'b1;
localparam LoSignal = 1'b0;
wire  Zero = 1'b0;
wire  One = 1'b1;
wire  true = 1'b1;
wire  false = 1'b0;
wire  RegistersDoubleRAMModule_L24F9L36T10_RegistersDoubleRAMModule_L25F48T49_Expr = 1'b0;
wire  Inputs_Read;
wire  [4:0] Inputs_RS1Addr;
wire  [4:0] Inputs_RS2Addr;
wire  [4:0] Inputs_RD;
wire  Inputs_WE;
wire  [31:0] Inputs_WriteData;
reg  NextState_Ready;
reg  RegistersDoubleRAMModule_L24F9L36T10_we;
reg  [31:0] State_RS1;
reg  [31:0] State_RS2;
reg  State_Ready = 1'b0;
wire  State_ReadyDefault = 1'b0;
wire  RegistersDoubleRAMModule_L24F9L36T10_RegistersDoubleRAMModule_L25F22T49_Expr;
wire  RegistersDoubleRAMModule_L24F9L36T10_RegistersDoubleRAMModule_L25F22T49_Expr_1;
wire  RegistersDoubleRAMModule_L24F9L36T10_RegistersDoubleRAMModule_L25F22T49_Expr_2;
wire  RegistersDoubleRAMModule_L24F9L36T10_RegistersDoubleRAMModule_L25F35T49_Expr;
wire signed  [5:0] RegistersDoubleRAMModule_L24F9L36T10_RegistersDoubleRAMModule_L25F35T49_ExprLhs;
wire signed  [5:0] RegistersDoubleRAMModule_L24F9L36T10_RegistersDoubleRAMModule_L25F35T49_ExprRhs;
reg [31:0] State_x [0 : 31];
initial
begin : Init_State_x
	integer i;
	for (i = 0; i < 32; i = i + 1)
		State_x[i] = 0;
end
reg [31:0] State_x2 [0 : 31];
initial
begin : Init_State_x2
	integer i;
	for (i = 0; i < 32; i = i + 1)
		State_x2[i] = 0;
end
always @(posedge BoardSignals_Clock)
begin
if ( BoardSignals_Reset == 1 ) begin
State_Ready <= State_ReadyDefault;
end
else begin
State_Ready <= NextState_Ready;
end
end
assign RegistersDoubleRAMModule_L24F9L36T10_RegistersDoubleRAMModule_L25F35T49_Expr = RegistersDoubleRAMModule_L24F9L36T10_RegistersDoubleRAMModule_L25F35T49_ExprLhs != RegistersDoubleRAMModule_L24F9L36T10_RegistersDoubleRAMModule_L25F35T49_ExprRhs ? 1'b1 : 1'b0;
assign RegistersDoubleRAMModule_L24F9L36T10_RegistersDoubleRAMModule_L25F22T49_Expr = RegistersDoubleRAMModule_L24F9L36T10_RegistersDoubleRAMModule_L25F22T49_Expr_1 & RegistersDoubleRAMModule_L24F9L36T10_RegistersDoubleRAMModule_L25F22T49_Expr_2;
always @*
begin
NextState_Ready = State_Ready;
RegistersDoubleRAMModule_L24F9L36T10_we = Zero;
RegistersDoubleRAMModule_L24F9L36T10_we = RegistersDoubleRAMModule_L24F9L36T10_RegistersDoubleRAMModule_L25F22T49_Expr;
if ( RegistersDoubleRAMModule_L24F9L36T10_we == 1 ) begin
end
NextState_Ready = Inputs_Read;

end
// inferred simple dual port RAM with read-first behaviour
always @ (posedge BoardSignals_Clock)
begin
	if (RegistersDoubleRAMModule_L24F9L36T10_we) begin
		State_x[Inputs_RD] <= Inputs_WriteData;
        State_x2[Inputs_RD] <= Inputs_WriteData;
    end    

	State_RS1 <= State_x[Inputs_RS1Addr];
	State_RS2 <= State_x2[Inputs_RS2Addr];
end

assign RegistersDoubleRAMModule_L24F9L36T10_RegistersDoubleRAMModule_L25F35T49_ExprLhs = { {1{1'b0}}, Inputs_RD }/*expand*/;
assign RegistersDoubleRAMModule_L24F9L36T10_RegistersDoubleRAMModule_L25F35T49_ExprRhs = { {5{1'b0}}, RegistersDoubleRAMModule_L24F9L36T10_RegistersDoubleRAMModule_L25F48T49_Expr }/*expand*/;
assign RegistersDoubleRAMModule_L24F9L36T10_RegistersDoubleRAMModule_L25F22T49_Expr_1 = Inputs_WE;
assign RegistersDoubleRAMModule_L24F9L36T10_RegistersDoubleRAMModule_L25F22T49_Expr_2 = RegistersDoubleRAMModule_L24F9L36T10_RegistersDoubleRAMModule_L25F35T49_Expr;
assign Inputs_Read = Read;
assign Inputs_RS1Addr = RS1Addr;
assign Inputs_RS2Addr = RS2Addr;
assign Inputs_RD = RD;
assign Inputs_WE = WE;
assign Inputs_WriteData = WriteData;
assign RS1 = State_RS1;
assign RS2 = State_RS2;
assign Ready = State_Ready;
// [BEGIN USER ARCHITECTURE]
// [END USER ARCHITECTURE]
endmodule
